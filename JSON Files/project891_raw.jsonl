{"repository_name": "Project_891", "func_path_in_repository": "manage.py", "func_name": "main", "whole_func_string": "def main():\n                                   \n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)", "func_code_string": "def main():\n                                   \n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "Role", "whole_func_string": "class Role(models.IntegerChoices):\n    SUPERVISOR = 1, _('Supervisor')\n    INSTRUCTOR = 2, _('Instructor')\n    TA = 3, _('TA')", "func_code_string": "class Role(models.IntegerChoices):\n    SUPERVISOR = 1, _('Supervisor')\n    INSTRUCTOR = 2, _('Instructor')\n    TA = 3, _('TA')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "User", "whole_func_string": "class User(AbstractUser):\n    role = models.PositiveSmallIntegerField(\n        choices=Role.choices, blank=True, null=True)\n    home_address = models.CharField(max_length=50, blank=True, null=True)\n    phone_number = models.CharField(\n        max_length=10, blank=True, null=True, unique=True)\n\n    courses = models.ManyToManyField('project_app.Course', blank=True)\n\n                                                             \n                                                                   \n                                                                      \n\n    class Meta:\n        ordering = ['role', 'first_name', 'last_name']\n\n    def is_supervisor(self):\n        return self.role == Role.SUPERVISOR\n\n    def is_instructor(self):\n        return self.role == Role.INSTRUCTOR\n\n    def is_ta(self):\n        return self.role == Role.TA\n\n    def __str__(self):\n        return f'{self.first_name} {self.last_name}'", "func_code_string": "class User(AbstractUser):\n    role = models.PositiveSmallIntegerField(\n        choices=Role.choices, blank=True, null=True)\n    home_address = models.CharField(max_length=50, blank=True, null=True)\n    phone_number = models.CharField(\n        max_length=10, blank=True, null=True, unique=True)\n\n    courses = models.ManyToManyField('project_app.Course', blank=True)\n\n                                                             \n                                                                   \n                                                                      \n\n    class Meta:\n        ordering = ['role', 'first_name', 'last_name']\n\n    def is_supervisor(self):\n        return self.role == Role.SUPERVISOR\n\n    def is_instructor(self):\n        return self.role == Role.INSTRUCTOR\n\n    def is_ta(self):\n        return self.role == Role.TA\n\n    def __str__(self):\n        return f'{self.first_name} {self.last_name}'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "Course", "whole_func_string": "class Course(models.Model):\n    name = models.CharField(max_length=100, blank=True)\n    subject = models.CharField(max_length=7)\n    number = models.CharField(max_length=3, unique=True)\n\n    instructor = models.ForeignKey('project_app.User', on_delete=models.SET_NULL,\n                                   blank=True, null=True, limit_choices_to={'role': Role.INSTRUCTOR})\n\n                                           \n                                                 \n\n    class Meta:\n        ordering = ['subject', 'number']\n\n    def __str__(self):\n        return f'{self.subject} {self.number}'", "func_code_string": "class Course(models.Model):\n    name = models.CharField(max_length=100, blank=True)\n    subject = models.CharField(max_length=7)\n    number = models.CharField(max_length=3, unique=True)\n\n    instructor = models.ForeignKey('project_app.User', on_delete=models.SET_NULL,\n                                   blank=True, null=True, limit_choices_to={'role': Role.INSTRUCTOR})\n\n                                           \n                                                 \n\n    class Meta:\n        ordering = ['subject', 'number']\n\n    def __str__(self):\n        return f'{self.subject} {self.number}'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "Section", "whole_func_string": "class Section(models.Model):\n    number = models.CharField(max_length=3)\n    course = models.ForeignKey('project_app.Course', on_delete=models.CASCADE)\n    ta = models.ForeignKey('project_app.User', on_delete=models.SET_NULL,\n                           blank=True, null=True, limit_choices_to={'role': Role.TA})\n\n    class Meta:\n        ordering = ['course__subject', 'course__number', 'number']\n\n    def __str__(self):\n        return f'{self.course.subject} {self.course.number} - {self.number}'", "func_code_string": "class Section(models.Model):\n    number = models.CharField(max_length=3)\n    course = models.ForeignKey('project_app.Course', on_delete=models.CASCADE)\n    ta = models.ForeignKey('project_app.User', on_delete=models.SET_NULL,\n                           blank=True, null=True, limit_choices_to={'role': Role.TA})\n\n    class Meta:\n        ordering = ['course__subject', 'course__number', 'number']\n\n    def __str__(self):\n        return f'{self.course.subject} {self.course.number} - {self.number}'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "Notification", "whole_func_string": "class Notification(models.Model):\n    sender = models.ForeignKey(\n        'project_app.User', on_delete=models.CASCADE, related_name='sent_notifications')\n    recipient = models.ForeignKey(\n        'project_app.User', on_delete=models.CASCADE, related_name='received_notifications')\n    subject = models.CharField(max_length=100)\n    message = models.TextField()\n\n    class Meta:\n        ordering = ['sender__last_name', 'sender__first_name']\n\n    def __str__(self):\n        return f' {self.sender} -> {self.recipient}'", "func_code_string": "class Notification(models.Model):\n    sender = models.ForeignKey(\n        'project_app.User', on_delete=models.CASCADE, related_name='sent_notifications')\n    recipient = models.ForeignKey(\n        'project_app.User', on_delete=models.CASCADE, related_name='received_notifications')\n    subject = models.CharField(max_length=100)\n    message = models.TextField()\n\n    class Meta:\n        ordering = ['sender__last_name', 'sender__first_name']\n\n    def __str__(self):\n        return f' {self.sender} -> {self.recipient}'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "Meta", "whole_func_string": "class Meta:\n        ordering = ['role', 'first_name', 'last_name']", "func_code_string": "class Meta:\n        ordering = ['role', 'first_name', 'last_name']", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "is_supervisor", "whole_func_string": "def is_supervisor(self):\n        return self.role == Role.SUPERVISOR", "func_code_string": "def is_supervisor(self):\n        return self.role == Role.SUPERVISOR", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "is_instructor", "whole_func_string": "def is_instructor(self):\n        return self.role == Role.INSTRUCTOR", "func_code_string": "def is_instructor(self):\n        return self.role == Role.INSTRUCTOR", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "is_ta", "whole_func_string": "def is_ta(self):\n        return self.role == Role.TA", "func_code_string": "def is_ta(self):\n        return self.role == Role.TA", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "__str__", "whole_func_string": "def __str__(self):\n        return f'{self.first_name} {self.last_name}'", "func_code_string": "def __str__(self):\n        return f'{self.first_name} {self.last_name}'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "Meta", "whole_func_string": "class Meta:\n        ordering = ['subject', 'number']", "func_code_string": "class Meta:\n        ordering = ['subject', 'number']", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "__str__", "whole_func_string": "def __str__(self):\n        return f'{self.subject} {self.number}'", "func_code_string": "def __str__(self):\n        return f'{self.subject} {self.number}'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "Meta", "whole_func_string": "class Meta:\n        ordering = ['course__subject', 'course__number', 'number']", "func_code_string": "class Meta:\n        ordering = ['course__subject', 'course__number', 'number']", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "__str__", "whole_func_string": "def __str__(self):\n        return f'{self.course.subject} {self.course.number} - {self.number}'", "func_code_string": "def __str__(self):\n        return f'{self.course.subject} {self.course.number} - {self.number}'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "Meta", "whole_func_string": "class Meta:\n        ordering = ['sender__last_name', 'sender__first_name']", "func_code_string": "class Meta:\n        ordering = ['sender__last_name', 'sender__first_name']", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/models.py", "func_name": "__str__", "whole_func_string": "def __str__(self):\n        return f' {self.sender} -> {self.recipient}'", "func_code_string": "def __str__(self):\n        return f' {self.sender} -> {self.recipient}'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/apps.py", "func_name": "ProjectAppConfig", "whole_func_string": "class ProjectAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'project_app'", "func_code_string": "class ProjectAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'project_app'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "CreateCourseForm", "whole_func_string": "class CreateCourseForm(forms.Form):\n    subject = forms.CharField(max_length=7)\n    number = forms.CharField(max_length=3)\n    name = forms.CharField(max_length=100, required=False)\n    instructor = forms.ModelChoiceField(queryset=User.objects.filter(role=Role.INSTRUCTOR), required=False)\n                                                                                                      \n\n    def clean(self):\n        cleaned_data = super().clean()\n\n        subject = cleaned_data.get('subject')\n        number = cleaned_data.get('number')\n        name = cleaned_data.get('name')\n        instructor = cleaned_data.get('instructor')\n                                       \n\n        if not subject:\n            raise ValidationError('Subject is empty.', code='subject')\n\n        if not subject.isupper():\n            raise ValidationError('Subject is not upper case.')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if not number.isnumeric():\n            raise ValidationError('Number is not a number.')\n\n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        try:\n            course = Course.objects.get(subject=subject, number=number)\n            raise ValidationError(f'{course} already exists.')\n        except Course.DoesNotExist:\n            return cleaned_data", "func_code_string": "class CreateCourseForm(forms.Form):\n    subject = forms.CharField(max_length=7)\n    number = forms.CharField(max_length=3)\n    name = forms.CharField(max_length=100, required=False)\n    instructor = forms.ModelChoiceField(queryset=User.objects.filter(role=Role.INSTRUCTOR), required=False)\n                                                                                                      \n\n    def clean(self):\n        cleaned_data = super().clean()\n\n        subject = cleaned_data.get('subject')\n        number = cleaned_data.get('number')\n        name = cleaned_data.get('name')\n        instructor = cleaned_data.get('instructor')\n                                       \n\n        if not subject:\n            raise ValidationError('Subject is empty.', code='subject')\n\n        if not subject.isupper():\n            raise ValidationError('Subject is not upper case.')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if not number.isnumeric():\n            raise ValidationError('Number is not a number.')\n\n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        try:\n            course = Course.objects.get(subject=subject, number=number)\n            raise ValidationError(f'{course} already exists.')\n        except Course.DoesNotExist:\n            return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "EditCourseForm", "whole_func_string": "class EditCourseForm(forms.Form):\n    subject = forms.CharField(max_length=7, required=False)\n    number = forms.CharField(max_length=3, required=False)\n    name = forms.CharField(max_length=100, required=False)\n    instructor = forms.ModelChoiceField(queryset=User.objects.filter(role=Role.INSTRUCTOR), required=False)\n\n    def clean(self):\n        cleaned_data = super().clean()\n\n        subject = cleaned_data.get('subject')\n        number = cleaned_data.get('number')\n        name = cleaned_data.get('name')\n        instructor = cleaned_data.get('instructor')\n        \n        if not subject:\n            raise ValidationError('Subject is empty.', code='subject')\n\n        if not subject.isupper():\n            raise ValidationError('Must provide a username')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number') \n\n        if not number.isnumeric():\n            raise ValidationError('Number is not a number.')\n        \n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        return cleaned_data", "func_code_string": "class EditCourseForm(forms.Form):\n    subject = forms.CharField(max_length=7, required=False)\n    number = forms.CharField(max_length=3, required=False)\n    name = forms.CharField(max_length=100, required=False)\n    instructor = forms.ModelChoiceField(queryset=User.objects.filter(role=Role.INSTRUCTOR), required=False)\n\n    def clean(self):\n        cleaned_data = super().clean()\n\n        subject = cleaned_data.get('subject')\n        number = cleaned_data.get('number')\n        name = cleaned_data.get('name')\n        instructor = cleaned_data.get('instructor')\n        \n        if not subject:\n            raise ValidationError('Subject is empty.', code='subject')\n\n        if not subject.isupper():\n            raise ValidationError('Must provide a username')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number') \n\n        if not number.isnumeric():\n            raise ValidationError('Number is not a number.')\n        \n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "CreateSectionForm", "whole_func_string": "class CreateSectionForm(forms.Form):\n    course = forms.ModelChoiceField(queryset=Course.objects.all(), disabled=True)\n    number = forms.CharField(max_length=3)\n    ta = forms.ModelChoiceField(queryset=User.objects.filter(role=Role.TA), required=False)\n\n    def clean(self):\n        cleaned_data = super().clean()\n        print('in create section')\n        course = cleaned_data.get('course')\n        number = cleaned_data.get('number')\n        ta = cleaned_data.get('ta')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if ta and ta.role != Role.TA:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        try:\n            print('testing if exists')\n            section = Section.objects.get(number=number, course=course)\n            raise ValidationError(f'{section} already exists.')\n        except Section.DoesNotExist:\n            return cleaned_data", "func_code_string": "class CreateSectionForm(forms.Form):\n    course = forms.ModelChoiceField(queryset=Course.objects.all(), disabled=True)\n    number = forms.CharField(max_length=3)\n    ta = forms.ModelChoiceField(queryset=User.objects.filter(role=Role.TA), required=False)\n\n    def clean(self):\n        cleaned_data = super().clean()\n        print('in create section')\n        course = cleaned_data.get('course')\n        number = cleaned_data.get('number')\n        ta = cleaned_data.get('ta')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if ta and ta.role != Role.TA:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        try:\n            print('testing if exists')\n            section = Section.objects.get(number=number, course=course)\n            raise ValidationError(f'{section} already exists.')\n        except Section.DoesNotExist:\n            return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "EditSectionForm", "whole_func_string": "class EditSectionForm(forms.Form):\n    number = forms.CharField(max_length=3)\n    ta = forms.ModelChoiceField(queryset=User.objects.filter(role=Role.TA), required=False)\n\n    def clean(self):\n        cleaned_data = super().clean()\n\n        number = cleaned_data.get('number')\n        ta = cleaned_data.get('ta')\n        course = cleaned_data.get('course')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if ta and ta.role != Role.TA:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        return cleaned_data", "func_code_string": "class EditSectionForm(forms.Form):\n    number = forms.CharField(max_length=3)\n    ta = forms.ModelChoiceField(queryset=User.objects.filter(role=Role.TA), required=False)\n\n    def clean(self):\n        cleaned_data = super().clean()\n\n        number = cleaned_data.get('number')\n        ta = cleaned_data.get('ta')\n        course = cleaned_data.get('course')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if ta and ta.role != Role.TA:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "CreateUserForm", "whole_func_string": "class CreateUserForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n    first_name = forms.CharField(required=True, max_length=150)\n    last_name = forms.CharField(required=True, max_length=150)\n    role = forms.IntegerField(widget=forms.Select(choices=Role.choices), initial=Role.TA, required=True)\n\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'first_name', 'last_name', 'role')\n        exclude = ('first_name', 'last_name', 'phone_number', 'home_address')\n\n    def clean(self):\n        cleaned_data = super().clean()\n\n        username = cleaned_data.get('username')\n        email = cleaned_data.get('email')\n        first_name = cleaned_data.get('first_name')\n        last_name = cleaned_data.get('last_name')\n        role = cleaned_data.get('role')\n\n        self.first_name = first_name.capitalize()\n        self.last_name = last_name.capitalize()\n\n        user_class = UserClass(username, email, first_name, last_name, role)\n        user_class.validate()\n\n        return cleaned_data\n    \n    def save(self, commit=True):\n        user = super().save(commit=False)\n        \n        user_class = UserClass.get_instance(user)\n        user_class.set_email(self.cleaned_data.get('email'))\n        user_class.set_role(self.cleaned_data('role'))\n\n        return user_class.get_model_instance()", "func_code_string": "class CreateUserForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n    first_name = forms.CharField(required=True, max_length=150)\n    last_name = forms.CharField(required=True, max_length=150)\n    role = forms.IntegerField(widget=forms.Select(choices=Role.choices), initial=Role.TA, required=True)\n\n    class Meta:\n        model = User\n        fields = ('username', 'email', 'first_name', 'last_name', 'role')\n        exclude = ('first_name', 'last_name', 'phone_number', 'home_address')\n\n    def clean(self):\n        cleaned_data = super().clean()\n\n        username = cleaned_data.get('username')\n        email = cleaned_data.get('email')\n        first_name = cleaned_data.get('first_name')\n        last_name = cleaned_data.get('last_name')\n        role = cleaned_data.get('role')\n\n        self.first_name = first_name.capitalize()\n        self.last_name = last_name.capitalize()\n\n        user_class = UserClass(username, email, first_name, last_name, role)\n        user_class.validate()\n\n        return cleaned_data\n    \n    def save(self, commit=True):\n        user = super().save(commit=False)\n        \n        user_class = UserClass.get_instance(user)\n        user_class.set_email(self.cleaned_data.get('email'))\n        user_class.set_role(self.cleaned_data('role'))\n\n        return user_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "EditUserForm", "whole_func_string": "class EditUserForm(forms.Form):\n    username = forms.CharField(max_length=150)\n    email = forms.EmailField()\n    first_name = forms.CharField(max_length=150)\n    last_name = forms.CharField(max_length=150)\n    role = forms.IntegerField(widget=forms.Select(choices=Role.choices))\n\n    def clean(self):\n        pass", "func_code_string": "class EditUserForm(forms.Form):\n    username = forms.CharField(max_length=150)\n    email = forms.EmailField()\n    first_name = forms.CharField(max_length=150)\n    last_name = forms.CharField(max_length=150)\n    role = forms.IntegerField(widget=forms.Select(choices=Role.choices))\n\n    def clean(self):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "ResetUserPasswordForm", "whole_func_string": "class ResetUserPasswordForm(forms.Form):\n    password = forms.CharField(max_length=128, widget=forms.PasswordInput())\n    confirm_password = forms.CharField(\n        max_length=128, label='Confirm Password', widget=forms.PasswordInput())\n    \n    def clean(self):\n        pass", "func_code_string": "class ResetUserPasswordForm(forms.Form):\n    password = forms.CharField(max_length=128, widget=forms.PasswordInput())\n    confirm_password = forms.CharField(\n        max_length=128, label='Confirm Password', widget=forms.PasswordInput())\n    \n    def clean(self):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "UpdateProfileForm", "whole_func_string": "class UpdateProfileForm(forms.Form):\n    first_name = forms.CharField(max_length=150)\n    last_name = forms.CharField(max_length=150)\n    email = forms.EmailField()\n    home_address = forms.CharField(max_length=255, required=False)\n    phone_number = forms.CharField(max_length=20, required=False)\n\n    def __init__(self, *args, **kwargs):\n        self.user = kwargs.pop('user', None)\n        super().__init__(*args, **kwargs)\n\n        if self.user:\n            self.fields['first_name'].initial = self.user.first_name\n            self.fields['last_name'].initial = self.user.last_name\n            self.fields['email'].initial = self.user.email\n            self.fields['home_address'].initial = self.user.home_address\n            self.fields['phone_number'].initial = self.user.phone_number\n\n    def clean_email(self):\n        email = self.cleaned_data.get('email')\n\n        if email == self.user.email:\n            return email\n\n        if User.objects.filter(email=email).exclude(username=self.user.username).exists():\n            raise forms.ValidationError('This email is already in use.')\n\n        return email\n\n    def save(self):\n        self.user.first_name = self.cleaned_data['first_name']\n        self.user.last_name = self.cleaned_data['last_name']\n        self.user.email = self.cleaned_data['email']\n        self.user.home_address = self.cleaned_data['home_address']\n        self.user.phone_number = self.cleaned_data['phone_number']\n        self.user.save()", "func_code_string": "class UpdateProfileForm(forms.Form):\n    first_name = forms.CharField(max_length=150)\n    last_name = forms.CharField(max_length=150)\n    email = forms.EmailField()\n    home_address = forms.CharField(max_length=255, required=False)\n    phone_number = forms.CharField(max_length=20, required=False)\n\n    def __init__(self, *args, **kwargs):\n        self.user = kwargs.pop('user', None)\n        super().__init__(*args, **kwargs)\n\n        if self.user:\n            self.fields['first_name'].initial = self.user.first_name\n            self.fields['last_name'].initial = self.user.last_name\n            self.fields['email'].initial = self.user.email\n            self.fields['home_address'].initial = self.user.home_address\n            self.fields['phone_number'].initial = self.user.phone_number\n\n    def clean_email(self):\n        email = self.cleaned_data.get('email')\n\n        if email == self.user.email:\n            return email\n\n        if User.objects.filter(email=email).exclude(username=self.user.username).exists():\n            raise forms.ValidationError('This email is already in use.')\n\n        return email\n\n    def save(self):\n        self.user.first_name = self.cleaned_data['first_name']\n        self.user.last_name = self.cleaned_data['last_name']\n        self.user.email = self.cleaned_data['email']\n        self.user.home_address = self.cleaned_data['home_address']\n        self.user.phone_number = self.cleaned_data['phone_number']\n        self.user.save()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "ChangePasswordForm", "whole_func_string": "class ChangePasswordForm(PasswordChangeForm):\n    def clean(self):\n        cleaned_data = super().clean()\n\n        new_password1 = cleaned_data.get('new_password1')\n        new_password2 = cleaned_data.get('new_password2')\n\n        if new_password1 != new_password2:\n            raise ValidationError('New passwords do not match')\n\n        return cleaned_data", "func_code_string": "class ChangePasswordForm(PasswordChangeForm):\n    def clean(self):\n        cleaned_data = super().clean()\n\n        new_password1 = cleaned_data.get('new_password1')\n        new_password2 = cleaned_data.get('new_password2')\n\n        if new_password1 != new_password2:\n            raise ValidationError('New passwords do not match')\n\n        return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "clean", "whole_func_string": "def clean(self):\n        cleaned_data = super().clean()\n\n        subject = cleaned_data.get('subject')\n        number = cleaned_data.get('number')\n        name = cleaned_data.get('name')\n        instructor = cleaned_data.get('instructor')\n                                       \n\n        if not subject:\n            raise ValidationError('Subject is empty.', code='subject')\n\n        if not subject.isupper():\n            raise ValidationError('Subject is not upper case.')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if not number.isnumeric():\n            raise ValidationError('Number is not a number.')\n\n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        try:\n            course = Course.objects.get(subject=subject, number=number)\n            raise ValidationError(f'{course} already exists.')\n        except Course.DoesNotExist:\n            return cleaned_data", "func_code_string": "def clean(self):\n        cleaned_data = super().clean()\n\n        subject = cleaned_data.get('subject')\n        number = cleaned_data.get('number')\n        name = cleaned_data.get('name')\n        instructor = cleaned_data.get('instructor')\n                                       \n\n        if not subject:\n            raise ValidationError('Subject is empty.', code='subject')\n\n        if not subject.isupper():\n            raise ValidationError('Subject is not upper case.')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if not number.isnumeric():\n            raise ValidationError('Number is not a number.')\n\n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        try:\n            course = Course.objects.get(subject=subject, number=number)\n            raise ValidationError(f'{course} already exists.')\n        except Course.DoesNotExist:\n            return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "clean", "whole_func_string": "def clean(self):\n        cleaned_data = super().clean()\n\n        subject = cleaned_data.get('subject')\n        number = cleaned_data.get('number')\n        name = cleaned_data.get('name')\n        instructor = cleaned_data.get('instructor')\n        \n        if not subject:\n            raise ValidationError('Subject is empty.', code='subject')\n\n        if not subject.isupper():\n            raise ValidationError('Must provide a username')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number') \n\n        if not number.isnumeric():\n            raise ValidationError('Number is not a number.')\n        \n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        return cleaned_data", "func_code_string": "def clean(self):\n        cleaned_data = super().clean()\n\n        subject = cleaned_data.get('subject')\n        number = cleaned_data.get('number')\n        name = cleaned_data.get('name')\n        instructor = cleaned_data.get('instructor')\n        \n        if not subject:\n            raise ValidationError('Subject is empty.', code='subject')\n\n        if not subject.isupper():\n            raise ValidationError('Must provide a username')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number') \n\n        if not number.isnumeric():\n            raise ValidationError('Number is not a number.')\n        \n        if instructor and instructor.role != Role.INSTRUCTOR:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "clean", "whole_func_string": "def clean(self):\n        cleaned_data = super().clean()\n        print('in create section')\n        course = cleaned_data.get('course')\n        number = cleaned_data.get('number')\n        ta = cleaned_data.get('ta')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if ta and ta.role != Role.TA:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        try:\n            print('testing if exists')\n            section = Section.objects.get(number=number, course=course)\n            raise ValidationError(f'{section} already exists.')\n        except Section.DoesNotExist:\n            return cleaned_data", "func_code_string": "def clean(self):\n        cleaned_data = super().clean()\n        print('in create section')\n        course = cleaned_data.get('course')\n        number = cleaned_data.get('number')\n        ta = cleaned_data.get('ta')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if ta and ta.role != Role.TA:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        try:\n            print('testing if exists')\n            section = Section.objects.get(number=number, course=course)\n            raise ValidationError(f'{section} already exists.')\n        except Section.DoesNotExist:\n            return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "clean", "whole_func_string": "def clean(self):\n        cleaned_data = super().clean()\n\n        number = cleaned_data.get('number')\n        ta = cleaned_data.get('ta')\n        course = cleaned_data.get('course')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if ta and ta.role != Role.TA:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        return cleaned_data", "func_code_string": "def clean(self):\n        cleaned_data = super().clean()\n\n        number = cleaned_data.get('number')\n        ta = cleaned_data.get('ta')\n        course = cleaned_data.get('course')\n\n        if not number:\n            raise ValidationError('Number is empty.', code='number')\n\n        if ta and ta.role != Role.TA:\n            raise ValidationError('Selected \"instructor\" is not an instructor.')\n\n        return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "Meta", "whole_func_string": "class Meta:\n        model = User\n        fields = ('username', 'email', 'first_name', 'last_name', 'role')\n        exclude = ('first_name', 'last_name', 'phone_number', 'home_address')", "func_code_string": "class Meta:\n        model = User\n        fields = ('username', 'email', 'first_name', 'last_name', 'role')\n        exclude = ('first_name', 'last_name', 'phone_number', 'home_address')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "clean", "whole_func_string": "def clean(self):\n        cleaned_data = super().clean()\n\n        username = cleaned_data.get('username')\n        email = cleaned_data.get('email')\n        first_name = cleaned_data.get('first_name')\n        last_name = cleaned_data.get('last_name')\n        role = cleaned_data.get('role')\n\n        self.first_name = first_name.capitalize()\n        self.last_name = last_name.capitalize()\n\n        user_class = UserClass(username, email, first_name, last_name, role)\n        user_class.validate()\n\n        return cleaned_data", "func_code_string": "def clean(self):\n        cleaned_data = super().clean()\n\n        username = cleaned_data.get('username')\n        email = cleaned_data.get('email')\n        first_name = cleaned_data.get('first_name')\n        last_name = cleaned_data.get('last_name')\n        role = cleaned_data.get('role')\n\n        self.first_name = first_name.capitalize()\n        self.last_name = last_name.capitalize()\n\n        user_class = UserClass(username, email, first_name, last_name, role)\n        user_class.validate()\n\n        return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "save", "whole_func_string": "def save(self, commit=True):\n        user = super().save(commit=False)\n        \n        user_class = UserClass.get_instance(user)\n        user_class.set_email(self.cleaned_data.get('email'))\n        user_class.set_role(self.cleaned_data('role'))\n\n        return user_class.get_model_instance()", "func_code_string": "def save(self, commit=True):\n        user = super().save(commit=False)\n        \n        user_class = UserClass.get_instance(user)\n        user_class.set_email(self.cleaned_data.get('email'))\n        user_class.set_role(self.cleaned_data('role'))\n\n        return user_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "clean", "whole_func_string": "def clean(self):\n        pass", "func_code_string": "def clean(self):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "clean", "whole_func_string": "def clean(self):\n        pass", "func_code_string": "def clean(self):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "__init__", "whole_func_string": "def __init__(self, *args, **kwargs):\n        self.user = kwargs.pop('user', None)\n        super().__init__(*args, **kwargs)\n\n        if self.user:\n            self.fields['first_name'].initial = self.user.first_name\n            self.fields['last_name'].initial = self.user.last_name\n            self.fields['email'].initial = self.user.email\n            self.fields['home_address'].initial = self.user.home_address\n            self.fields['phone_number'].initial = self.user.phone_number", "func_code_string": "def __init__(self, *args, **kwargs):\n        self.user = kwargs.pop('user', None)\n        super().__init__(*args, **kwargs)\n\n        if self.user:\n            self.fields['first_name'].initial = self.user.first_name\n            self.fields['last_name'].initial = self.user.last_name\n            self.fields['email'].initial = self.user.email\n            self.fields['home_address'].initial = self.user.home_address\n            self.fields['phone_number'].initial = self.user.phone_number", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "clean_email", "whole_func_string": "def clean_email(self):\n        email = self.cleaned_data.get('email')\n\n        if email == self.user.email:\n            return email\n\n        if User.objects.filter(email=email).exclude(username=self.user.username).exists():\n            raise forms.ValidationError('This email is already in use.')\n\n        return email", "func_code_string": "def clean_email(self):\n        email = self.cleaned_data.get('email')\n\n        if email == self.user.email:\n            return email\n\n        if User.objects.filter(email=email).exclude(username=self.user.username).exists():\n            raise forms.ValidationError('This email is already in use.')\n\n        return email", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "save", "whole_func_string": "def save(self):\n        self.user.first_name = self.cleaned_data['first_name']\n        self.user.last_name = self.cleaned_data['last_name']\n        self.user.email = self.cleaned_data['email']\n        self.user.home_address = self.cleaned_data['home_address']\n        self.user.phone_number = self.cleaned_data['phone_number']\n        self.user.save()", "func_code_string": "def save(self):\n        self.user.first_name = self.cleaned_data['first_name']\n        self.user.last_name = self.cleaned_data['last_name']\n        self.user.email = self.cleaned_data['email']\n        self.user.home_address = self.cleaned_data['home_address']\n        self.user.phone_number = self.cleaned_data['phone_number']\n        self.user.save()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/forms.py", "func_name": "clean", "whole_func_string": "def clean(self):\n        cleaned_data = super().clean()\n\n        new_password1 = cleaned_data.get('new_password1')\n        new_password2 = cleaned_data.get('new_password2')\n\n        if new_password1 != new_password2:\n            raise ValidationError('New passwords do not match')\n\n        return cleaned_data", "func_code_string": "def clean(self):\n        cleaned_data = super().clean()\n\n        new_password1 = cleaned_data.get('new_password1')\n        new_password2 = cleaned_data.get('new_password2')\n\n        if new_password1 != new_password2:\n            raise ValidationError('New passwords do not match')\n\n        return cleaned_data", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "Profile", "whole_func_string": "class Profile(LoginRequiredMixin, View):\n    def get(self, request):\n        return render(request, 'main/profile.html')", "func_code_string": "class Profile(LoginRequiredMixin, View):\n    def get(self, request):\n        return render(request, 'main/profile.html')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "ViewCourses", "whole_func_string": "class ViewCourses(LoginRequiredMixin, View):\n    def get(self, request):\n        user_class = UserClass.get_instance(request.user)\n        courses = user_class.get_courses()\n\n        return render(request, 'main/courses.html', {'courses': courses})", "func_code_string": "class ViewCourses(LoginRequiredMixin, View):\n    def get(self, request):\n        user_class = UserClass.get_instance(request.user)\n        courses = user_class.get_courses()\n\n        return render(request, 'main/courses.html', {'courses': courses})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "ViewCourse", "whole_func_string": "class ViewCourse(LoginRequiredMixin, View):\n    def get(self, request, course_id):\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n        user_class = UserClass.get_instance(request.user)\n\n        if not user_class.has_course(course):\n            return redirect('/courses/')\n\n        return render(request, 'main/course.html', {'course': course, 'tas': course_class.get_tas(),\n                                                    'sections': course_class.get_sections()})", "func_code_string": "class ViewCourse(LoginRequiredMixin, View):\n    def get(self, request, course_id):\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n        user_class = UserClass.get_instance(request.user)\n\n        if not user_class.has_course(course):\n            return redirect('/courses/')\n\n        return render(request, 'main/course.html', {'course': course, 'tas': course_class.get_tas(),\n                                                    'sections': course_class.get_sections()})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "CreateCourse", "whole_func_string": "class CreateCourse(LoginRequiredMixin, View):\n    def get(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        form = CreateCourseForm()\n\n        return render(request, 'main/create_course.html', {'form': form})\n\n    def post(self, request):\n        form = CreateCourseForm(request.POST)\n        message = ''\n\n        if form.is_valid():\n            subject = form.cleaned_data.get('subject')\n            number = form.cleaned_data.get('number')\n            name = form.cleaned_data.get('name')\n            instructor = form.cleaned_data.get('instructor')\n\n            course_class = CourseClass(subject, number, name, instructor)\n            message = course_class.save_details()\n\n        return render(request, 'main/create_course.html', {'form': form, 'message': message})", "func_code_string": "class CreateCourse(LoginRequiredMixin, View):\n    def get(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        form = CreateCourseForm()\n\n        return render(request, 'main/create_course.html', {'form': form})\n\n    def post(self, request):\n        form = CreateCourseForm(request.POST)\n        message = ''\n\n        if form.is_valid():\n            subject = form.cleaned_data.get('subject')\n            number = form.cleaned_data.get('number')\n            name = form.cleaned_data.get('name')\n            instructor = form.cleaned_data.get('instructor')\n\n            course_class = CourseClass(subject, number, name, instructor)\n            message = course_class.save_details()\n\n        return render(request, 'main/create_course.html', {'form': form, 'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "DeleteCourse", "whole_func_string": "class DeleteCourse(LoginRequiredMixin, View):\n    def get(self, request, course_id):\n                                                   \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        return render(request, 'main/delete_course.html', {'course': course})\n\n    def post(self, request, course_id):\n                                                   \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course.delete()\n        return redirect('/courses/')", "func_code_string": "class DeleteCourse(LoginRequiredMixin, View):\n    def get(self, request, course_id):\n                                                   \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        return render(request, 'main/delete_course.html', {'course': course})\n\n    def post(self, request, course_id):\n                                                   \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course.delete()\n        return redirect('/courses/')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "EditCourse", "whole_func_string": "class EditCourse(LoginRequiredMixin, View):\n    def get(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n\n        form = EditCourseForm(\n            initial={\n                'subject': course_class.get_subject(),\n                'number': course_class.get_number(),\n                'name': course_class.get_name(),\n                'instructor': course_class.get_instructor()\n            }\n        )\n\n        return render(request, 'main/edit_course.html', {'course': course, 'form': form})\n\n    def post(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n\n        form = EditCourseForm(\n            request.POST,\n            initial={\n                'subject': course_class.get_subject(),\n                'number': course_class.get_number(),\n                'name': course_class.get_name(),\n                'instructor': course_class.get_instructor()\n            }\n        )\n\n        message = ''\n\n        if form.is_valid():\n            subject = form.cleaned_data.get('subject')\n            number = form.cleaned_data.get('number')\n            name = form.cleaned_data.get('name')\n            instructor = form.cleaned_data.get('instructor')\n\n            course_class.set_subject(subject)\n            course_class.set_number(number)\n            course_class.set_name(name)\n            course_class.set_instructor(instructor)\n\n            course = get_object_or_404(Course, subject=subject, number=number)\n\n            message = f'Successfully updated {subject} {number}.'\n\n        return render(request, 'main/edit_course.html', {'course': course, 'form': form, 'message': message})", "func_code_string": "class EditCourse(LoginRequiredMixin, View):\n    def get(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n\n        form = EditCourseForm(\n            initial={\n                'subject': course_class.get_subject(),\n                'number': course_class.get_number(),\n                'name': course_class.get_name(),\n                'instructor': course_class.get_instructor()\n            }\n        )\n\n        return render(request, 'main/edit_course.html', {'course': course, 'form': form})\n\n    def post(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n\n        form = EditCourseForm(\n            request.POST,\n            initial={\n                'subject': course_class.get_subject(),\n                'number': course_class.get_number(),\n                'name': course_class.get_name(),\n                'instructor': course_class.get_instructor()\n            }\n        )\n\n        message = ''\n\n        if form.is_valid():\n            subject = form.cleaned_data.get('subject')\n            number = form.cleaned_data.get('number')\n            name = form.cleaned_data.get('name')\n            instructor = form.cleaned_data.get('instructor')\n\n            course_class.set_subject(subject)\n            course_class.set_number(number)\n            course_class.set_name(name)\n            course_class.set_instructor(instructor)\n\n            course = get_object_or_404(Course, subject=subject, number=number)\n\n            message = f'Successfully updated {subject} {number}.'\n\n        return render(request, 'main/edit_course.html', {'course': course, 'form': form, 'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "CreateSection", "whole_func_string": "class CreateSection(LoginRequiredMixin, View):\n    def get(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        form = CreateSectionForm(\n            initial={\n                'course': course,\n                'number': 000\n            }\n        )\n\n        return render(request, 'main/create_section.html', {'course_id': course_id, 'form': form})\n\n    def post(self, request, course_id):\n        course = get_object_or_404(Course, pk=course_id)\n        form = CreateSectionForm(\n            request.POST,\n            initial={\n                'course': course\n            }\n        )\n        message = ''\n\n        if form.is_valid():\n            number = form.cleaned_data.get('number')\n            ta = form.cleaned_data.get('ta')\n            course = form.cleaned_data.get('course')\n\n            section_class = SectionClass(number, course, ta)\n            message = section_class.save_details()\n\n        return render(request, 'main/create_section.html', {'course_id': course_id, 'form': form, 'message': message})", "func_code_string": "class CreateSection(LoginRequiredMixin, View):\n    def get(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        form = CreateSectionForm(\n            initial={\n                'course': course,\n                'number': 000\n            }\n        )\n\n        return render(request, 'main/create_section.html', {'course_id': course_id, 'form': form})\n\n    def post(self, request, course_id):\n        course = get_object_or_404(Course, pk=course_id)\n        form = CreateSectionForm(\n            request.POST,\n            initial={\n                'course': course\n            }\n        )\n        message = ''\n\n        if form.is_valid():\n            number = form.cleaned_data.get('number')\n            ta = form.cleaned_data.get('ta')\n            course = form.cleaned_data.get('course')\n\n            section_class = SectionClass(number, course, ta)\n            message = section_class.save_details()\n\n        return render(request, 'main/create_section.html', {'course_id': course_id, 'form': form, 'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "DeleteSection", "whole_func_string": "class DeleteSection(LoginRequiredMixin, View):\n    def get(self, request, course_id, section_id):\n                                                    \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        section = get_object_or_404(Section, pk=section_id)\n        course = get_object_or_404(Course, pk=course_id)\n        return render(request, 'main/delete_section.html', {'course': course, 'section': section})\n\n    def post(self, request, course_id, section_id):\n                                                    \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section.delete()\n        return redirect(f'/courses/{course_id}/')", "func_code_string": "class DeleteSection(LoginRequiredMixin, View):\n    def get(self, request, course_id, section_id):\n                                                    \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        section = get_object_or_404(Section, pk=section_id)\n        course = get_object_or_404(Course, pk=course_id)\n        return render(request, 'main/delete_section.html', {'course': course, 'section': section})\n\n    def post(self, request, course_id, section_id):\n                                                    \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section.delete()\n        return redirect(f'/courses/{course_id}/')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "EditSection", "whole_func_string": "class EditSection(LoginRequiredMixin, View):\n    def get(self, request, course_id, section_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/courses/{course_id}')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section_class = SectionClass.get_instance(section)\n        course = get_object_or_404(Course, pk=course_id)\n\n        form = EditSectionForm(\n            initial={\n                'number': section.number,\n                'ta': section.ta\n            }\n        )\n\n        return render(request, 'main/edit_section.html', {'course': course, 'section': section, 'form': form})\n\n    def post(self, request, course_id, section_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section_class = SectionClass.get_instance(section)\n        course = get_object_or_404(Course, pk=course_id)\n\n        form = EditSectionForm(\n            request.POST,\n            initial={\n                'number': section_class.get_number(),\n                'ta': section.ta,\n                'course': course\n            }\n        )\n\n        message = ''\n\n        if form.is_valid():\n            number = form.cleaned_data.get('number')\n            ta = form.cleaned_data.get('ta')\n\n            section_class.set_number(number)\n            section_class.set_ta(ta)\n\n            section = get_object_or_404(Section, number=number, course=course_id)\n\n            message = f'Successfully updated {course.subject} {course.number} - {section.number}.'\n\n        return render(request, 'main/edit_section.html', {'course': course, 'section': section, 'form': form,\n                                                          'message': message})", "func_code_string": "class EditSection(LoginRequiredMixin, View):\n    def get(self, request, course_id, section_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/courses/{course_id}')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section_class = SectionClass.get_instance(section)\n        course = get_object_or_404(Course, pk=course_id)\n\n        form = EditSectionForm(\n            initial={\n                'number': section.number,\n                'ta': section.ta\n            }\n        )\n\n        return render(request, 'main/edit_section.html', {'course': course, 'section': section, 'form': form})\n\n    def post(self, request, course_id, section_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section_class = SectionClass.get_instance(section)\n        course = get_object_or_404(Course, pk=course_id)\n\n        form = EditSectionForm(\n            request.POST,\n            initial={\n                'number': section_class.get_number(),\n                'ta': section.ta,\n                'course': course\n            }\n        )\n\n        message = ''\n\n        if form.is_valid():\n            number = form.cleaned_data.get('number')\n            ta = form.cleaned_data.get('ta')\n\n            section_class.set_number(number)\n            section_class.set_ta(ta)\n\n            section = get_object_or_404(Section, number=number, course=course_id)\n\n            message = f'Successfully updated {course.subject} {course.number} - {section.number}.'\n\n        return render(request, 'main/edit_section.html', {'course': course, 'section': section, 'form': form,\n                                                          'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "ViewUsers", "whole_func_string": "class ViewUsers(LoginRequiredMixin, View):\n    def get(self, request):\n        users = UserClass.all().exclude(username='admin')\n\n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        return render(request, 'main/users.html', {'users': users})", "func_code_string": "class ViewUsers(LoginRequiredMixin, View):\n    def get(self, request):\n        users = UserClass.all().exclude(username='admin')\n\n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        return render(request, 'main/users.html', {'users': users})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "ViewUser", "whole_func_string": "class ViewUser(LoginRequiredMixin, View):\n    def get(self, request, user_id):\n        requested_user = get_object_or_404(User, pk=user_id)\n\n        return render(request, 'main/user.html', {'requested_user': requested_user})", "func_code_string": "class ViewUser(LoginRequiredMixin, View):\n    def get(self, request, user_id):\n        requested_user = get_object_or_404(User, pk=user_id)\n\n        return render(request, 'main/user.html', {'requested_user': requested_user})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "CreateUser", "whole_func_string": "class CreateUser(LoginRequiredMixin, View):\n    def get(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        form = CreateUserForm()\n\n        return render(request, 'main/create_user.html', {'form': form})\n\n    def post(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        supervisor_class = SupervisorClass.get_instance(request.user)\n        form = CreateUserForm(request.POST)\n        message = ''\n\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            email = form.cleaned_data.get('email')\n            password = form.cleaned_data.get('password2')\n            first_name = form.cleaned_data.get('first_name')\n            last_name = form.cleaned_data.get('last_name')\n            role = form.cleaned_data.get('role')\n\n            supervisor_class.create_user(username, email, password, first_name, last_name, role)\n            message = f'Successfully created {first_name} {last_name}.'\n\n        return render(request, 'main/create_user.html', {'form': form, 'message': message})", "func_code_string": "class CreateUser(LoginRequiredMixin, View):\n    def get(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        form = CreateUserForm()\n\n        return render(request, 'main/create_user.html', {'form': form})\n\n    def post(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        supervisor_class = SupervisorClass.get_instance(request.user)\n        form = CreateUserForm(request.POST)\n        message = ''\n\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            email = form.cleaned_data.get('email')\n            password = form.cleaned_data.get('password2')\n            first_name = form.cleaned_data.get('first_name')\n            last_name = form.cleaned_data.get('last_name')\n            role = form.cleaned_data.get('role')\n\n            supervisor_class.create_user(username, email, password, first_name, last_name, role)\n            message = f'Successfully created {first_name} {last_name}.'\n\n        return render(request, 'main/create_user.html', {'form': form, 'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "DeleteUser", "whole_func_string": "class DeleteUser(LoginRequiredMixin, View):\n    def get(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        return render(request, \"main/delete_user.html\", {'requested_user': requested_user})\n\n    def post(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        requested_user.delete()\n\n        return redirect('/users/')", "func_code_string": "class DeleteUser(LoginRequiredMixin, View):\n    def get(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        return render(request, \"main/delete_user.html\", {'requested_user': requested_user})\n\n    def post(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        requested_user.delete()\n\n        return redirect('/users/')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "EditUser", "whole_func_string": "class EditUser(LoginRequiredMixin, View):\n    def get(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/users/{user_id}/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        user_class = UserClass.get_instance(requested_user)\n\n        form = EditUserForm(\n            initial={\n                'username': user_class.get_username(),\n                'email': user_class.get_email(),\n                'first_name': user_class.get_first_name(),\n                'last_name': user_class.get_last_name(),\n                'role': user_class.get_role()\n            }\n        )\n\n        return render(request, \"main/edit_user.html\", {'requested_user': requested_user, 'form': form})\n\n    def post(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/users/{user_id}')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        user_class = UserClass.get_instance(requested_user)\n\n        form = EditUserForm(\n            request.POST,\n            initial={\n                'username': user_class.get_username(),\n                'email': user_class.get_email(),\n                'first_name': user_class.get_first_name(),\n                'last_name': user_class.get_last_name(),\n                'role': user_class.get_role()\n            }\n        )\n        message = ''\n\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            email = form.cleaned_data.get('email')\n            first_name = form.cleaned_data.get('first_name')\n            last_name = form.cleaned_data.get('last_name')\n            role = form.cleaned_data.get('role')\n\n            user_class.set_username(username)\n            user_class.set_email(email)\n            user_class.set_first_name(first_name)\n            user_class.set_last_name(last_name)\n            user_class.set_role(role)\n\n            requested_user = get_object_or_404(User, pk=user_id)\n\n            message = f'Successfully updated {requested_user}'\n\n        return render(request, 'main/edit_user.html',\n                      {'requested_user': requested_user, 'form': form, 'message': message})", "func_code_string": "class EditUser(LoginRequiredMixin, View):\n    def get(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/users/{user_id}/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        user_class = UserClass.get_instance(requested_user)\n\n        form = EditUserForm(\n            initial={\n                'username': user_class.get_username(),\n                'email': user_class.get_email(),\n                'first_name': user_class.get_first_name(),\n                'last_name': user_class.get_last_name(),\n                'role': user_class.get_role()\n            }\n        )\n\n        return render(request, \"main/edit_user.html\", {'requested_user': requested_user, 'form': form})\n\n    def post(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/users/{user_id}')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        user_class = UserClass.get_instance(requested_user)\n\n        form = EditUserForm(\n            request.POST,\n            initial={\n                'username': user_class.get_username(),\n                'email': user_class.get_email(),\n                'first_name': user_class.get_first_name(),\n                'last_name': user_class.get_last_name(),\n                'role': user_class.get_role()\n            }\n        )\n        message = ''\n\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            email = form.cleaned_data.get('email')\n            first_name = form.cleaned_data.get('first_name')\n            last_name = form.cleaned_data.get('last_name')\n            role = form.cleaned_data.get('role')\n\n            user_class.set_username(username)\n            user_class.set_email(email)\n            user_class.set_first_name(first_name)\n            user_class.set_last_name(last_name)\n            user_class.set_role(role)\n\n            requested_user = get_object_or_404(User, pk=user_id)\n\n            message = f'Successfully updated {requested_user}'\n\n        return render(request, 'main/edit_user.html',\n                      {'requested_user': requested_user, 'form': form, 'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "UpdateProfileView", "whole_func_string": "class UpdateProfileView(View):\n    def get(self, request):\n        form = UpdateProfileForm(user=request.user)\n        return render(request, 'main/update_profile.html', {'form': form})\n\n    def post(self, request):\n        form = UpdateProfileForm(request.POST, user=request.user)\n        if form.is_valid():\n            form.save()\n            return redirect('profile')\n        return render(request, 'main/update_profile.html', {'form': form})", "func_code_string": "class UpdateProfileView(View):\n    def get(self, request):\n        form = UpdateProfileForm(user=request.user)\n        return render(request, 'main/update_profile.html', {'form': form})\n\n    def post(self, request):\n        form = UpdateProfileForm(request.POST, user=request.user)\n        if form.is_valid():\n            form.save()\n            return redirect('profile')\n        return render(request, 'main/update_profile.html', {'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "ChangePasswordView", "whole_func_string": "class ChangePasswordView(View):\n    def get(self, request, *args, **kwargs):\n        form = ChangePasswordForm(user=request.user)\n        return render(request, 'main/change_password.html', {'form': form})\n\n    def post(self, request, *args, **kwargs):\n        form = ChangePasswordForm(user=request.user, data=request.POST)\n        if form.is_valid():\n            form.save()\n            update_session_auth_hash(request, form.user)\n            return redirect('profile')\n        return render(request, 'main/change_password.html', {'form': form})", "func_code_string": "class ChangePasswordView(View):\n    def get(self, request, *args, **kwargs):\n        form = ChangePasswordForm(user=request.user)\n        return render(request, 'main/change_password.html', {'form': form})\n\n    def post(self, request, *args, **kwargs):\n        form = ChangePasswordForm(user=request.user, data=request.POST)\n        if form.is_valid():\n            form.save()\n            update_session_auth_hash(request, form.user)\n            return redirect('profile')\n        return render(request, 'main/change_password.html', {'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request):\n        return render(request, 'main/profile.html')", "func_code_string": "def get(self, request):\n        return render(request, 'main/profile.html')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request):\n        user_class = UserClass.get_instance(request.user)\n        courses = user_class.get_courses()\n\n        return render(request, 'main/courses.html', {'courses': courses})", "func_code_string": "def get(self, request):\n        user_class = UserClass.get_instance(request.user)\n        courses = user_class.get_courses()\n\n        return render(request, 'main/courses.html', {'courses': courses})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request, course_id):\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n        user_class = UserClass.get_instance(request.user)\n\n        if not user_class.has_course(course):\n            return redirect('/courses/')\n\n        return render(request, 'main/course.html', {'course': course, 'tas': course_class.get_tas(),\n                                                    'sections': course_class.get_sections()})", "func_code_string": "def get(self, request, course_id):\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n        user_class = UserClass.get_instance(request.user)\n\n        if not user_class.has_course(course):\n            return redirect('/courses/')\n\n        return render(request, 'main/course.html', {'course': course, 'tas': course_class.get_tas(),\n                                                    'sections': course_class.get_sections()})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        form = CreateCourseForm()\n\n        return render(request, 'main/create_course.html', {'form': form})", "func_code_string": "def get(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        form = CreateCourseForm()\n\n        return render(request, 'main/create_course.html', {'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request):\n        form = CreateCourseForm(request.POST)\n        message = ''\n\n        if form.is_valid():\n            subject = form.cleaned_data.get('subject')\n            number = form.cleaned_data.get('number')\n            name = form.cleaned_data.get('name')\n            instructor = form.cleaned_data.get('instructor')\n\n            course_class = CourseClass(subject, number, name, instructor)\n            message = course_class.save_details()\n\n        return render(request, 'main/create_course.html', {'form': form, 'message': message})", "func_code_string": "def post(self, request):\n        form = CreateCourseForm(request.POST)\n        message = ''\n\n        if form.is_valid():\n            subject = form.cleaned_data.get('subject')\n            number = form.cleaned_data.get('number')\n            name = form.cleaned_data.get('name')\n            instructor = form.cleaned_data.get('instructor')\n\n            course_class = CourseClass(subject, number, name, instructor)\n            message = course_class.save_details()\n\n        return render(request, 'main/create_course.html', {'form': form, 'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request, course_id):\n                                                   \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        return render(request, 'main/delete_course.html', {'course': course})", "func_code_string": "def get(self, request, course_id):\n                                                   \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        return render(request, 'main/delete_course.html', {'course': course})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request, course_id):\n                                                   \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course.delete()\n        return redirect('/courses/')", "func_code_string": "def post(self, request, course_id):\n                                                   \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course.delete()\n        return redirect('/courses/')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n\n        form = EditCourseForm(\n            initial={\n                'subject': course_class.get_subject(),\n                'number': course_class.get_number(),\n                'name': course_class.get_name(),\n                'instructor': course_class.get_instructor()\n            }\n        )\n\n        return render(request, 'main/edit_course.html', {'course': course, 'form': form})", "func_code_string": "def get(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n\n        form = EditCourseForm(\n            initial={\n                'subject': course_class.get_subject(),\n                'number': course_class.get_number(),\n                'name': course_class.get_name(),\n                'instructor': course_class.get_instructor()\n            }\n        )\n\n        return render(request, 'main/edit_course.html', {'course': course, 'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n\n        form = EditCourseForm(\n            request.POST,\n            initial={\n                'subject': course_class.get_subject(),\n                'number': course_class.get_number(),\n                'name': course_class.get_name(),\n                'instructor': course_class.get_instructor()\n            }\n        )\n\n        message = ''\n\n        if form.is_valid():\n            subject = form.cleaned_data.get('subject')\n            number = form.cleaned_data.get('number')\n            name = form.cleaned_data.get('name')\n            instructor = form.cleaned_data.get('instructor')\n\n            course_class.set_subject(subject)\n            course_class.set_number(number)\n            course_class.set_name(name)\n            course_class.set_instructor(instructor)\n\n            course = get_object_or_404(Course, subject=subject, number=number)\n\n            message = f'Successfully updated {subject} {number}.'\n\n        return render(request, 'main/edit_course.html', {'course': course, 'form': form, 'message': message})", "func_code_string": "def post(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        course = get_object_or_404(Course, pk=course_id)\n        course_class = CourseClass.get_instance(course)\n\n        form = EditCourseForm(\n            request.POST,\n            initial={\n                'subject': course_class.get_subject(),\n                'number': course_class.get_number(),\n                'name': course_class.get_name(),\n                'instructor': course_class.get_instructor()\n            }\n        )\n\n        message = ''\n\n        if form.is_valid():\n            subject = form.cleaned_data.get('subject')\n            number = form.cleaned_data.get('number')\n            name = form.cleaned_data.get('name')\n            instructor = form.cleaned_data.get('instructor')\n\n            course_class.set_subject(subject)\n            course_class.set_number(number)\n            course_class.set_name(name)\n            course_class.set_instructor(instructor)\n\n            course = get_object_or_404(Course, subject=subject, number=number)\n\n            message = f'Successfully updated {subject} {number}.'\n\n        return render(request, 'main/edit_course.html', {'course': course, 'form': form, 'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        form = CreateSectionForm(\n            initial={\n                'course': course,\n                'number': 000\n            }\n        )\n\n        return render(request, 'main/create_section.html', {'course_id': course_id, 'form': form})", "func_code_string": "def get(self, request, course_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}/')\n\n        course = get_object_or_404(Course, pk=course_id)\n        form = CreateSectionForm(\n            initial={\n                'course': course,\n                'number': 000\n            }\n        )\n\n        return render(request, 'main/create_section.html', {'course_id': course_id, 'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request, course_id):\n        course = get_object_or_404(Course, pk=course_id)\n        form = CreateSectionForm(\n            request.POST,\n            initial={\n                'course': course\n            }\n        )\n        message = ''\n\n        if form.is_valid():\n            number = form.cleaned_data.get('number')\n            ta = form.cleaned_data.get('ta')\n            course = form.cleaned_data.get('course')\n\n            section_class = SectionClass(number, course, ta)\n            message = section_class.save_details()\n\n        return render(request, 'main/create_section.html', {'course_id': course_id, 'form': form, 'message': message})", "func_code_string": "def post(self, request, course_id):\n        course = get_object_or_404(Course, pk=course_id)\n        form = CreateSectionForm(\n            request.POST,\n            initial={\n                'course': course\n            }\n        )\n        message = ''\n\n        if form.is_valid():\n            number = form.cleaned_data.get('number')\n            ta = form.cleaned_data.get('ta')\n            course = form.cleaned_data.get('course')\n\n            section_class = SectionClass(number, course, ta)\n            message = section_class.save_details()\n\n        return render(request, 'main/create_section.html', {'course_id': course_id, 'form': form, 'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request, course_id, section_id):\n                                                    \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        section = get_object_or_404(Section, pk=section_id)\n        course = get_object_or_404(Course, pk=course_id)\n        return render(request, 'main/delete_section.html', {'course': course, 'section': section})", "func_code_string": "def get(self, request, course_id, section_id):\n                                                    \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        section = get_object_or_404(Section, pk=section_id)\n        course = get_object_or_404(Course, pk=course_id)\n        return render(request, 'main/delete_section.html', {'course': course, 'section': section})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request, course_id, section_id):\n                                                    \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section.delete()\n        return redirect(f'/courses/{course_id}/')", "func_code_string": "def post(self, request, course_id, section_id):\n                                                    \n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section.delete()\n        return redirect(f'/courses/{course_id}/')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request, course_id, section_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/courses/{course_id}')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section_class = SectionClass.get_instance(section)\n        course = get_object_or_404(Course, pk=course_id)\n\n        form = EditSectionForm(\n            initial={\n                'number': section.number,\n                'ta': section.ta\n            }\n        )\n\n        return render(request, 'main/edit_section.html', {'course': course, 'section': section, 'form': form})", "func_code_string": "def get(self, request, course_id, section_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/courses/{course_id}')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section_class = SectionClass.get_instance(section)\n        course = get_object_or_404(Course, pk=course_id)\n\n        form = EditSectionForm(\n            initial={\n                'number': section.number,\n                'ta': section.ta\n            }\n        )\n\n        return render(request, 'main/edit_section.html', {'course': course, 'section': section, 'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request, course_id, section_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section_class = SectionClass.get_instance(section)\n        course = get_object_or_404(Course, pk=course_id)\n\n        form = EditSectionForm(\n            request.POST,\n            initial={\n                'number': section_class.get_number(),\n                'ta': section.ta,\n                'course': course\n            }\n        )\n\n        message = ''\n\n        if form.is_valid():\n            number = form.cleaned_data.get('number')\n            ta = form.cleaned_data.get('ta')\n\n            section_class.set_number(number)\n            section_class.set_ta(ta)\n\n            section = get_object_or_404(Section, number=number, course=course_id)\n\n            message = f'Successfully updated {course.subject} {course.number} - {section.number}.'\n\n        return render(request, 'main/edit_section.html', {'course': course, 'section': section, 'form': form,\n                                                          'message': message})", "func_code_string": "def post(self, request, course_id, section_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/course/{course_id}')\n\n        section = get_object_or_404(Section, pk=section_id)\n        section_class = SectionClass.get_instance(section)\n        course = get_object_or_404(Course, pk=course_id)\n\n        form = EditSectionForm(\n            request.POST,\n            initial={\n                'number': section_class.get_number(),\n                'ta': section.ta,\n                'course': course\n            }\n        )\n\n        message = ''\n\n        if form.is_valid():\n            number = form.cleaned_data.get('number')\n            ta = form.cleaned_data.get('ta')\n\n            section_class.set_number(number)\n            section_class.set_ta(ta)\n\n            section = get_object_or_404(Section, number=number, course=course_id)\n\n            message = f'Successfully updated {course.subject} {course.number} - {section.number}.'\n\n        return render(request, 'main/edit_section.html', {'course': course, 'section': section, 'form': form,\n                                                          'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request):\n        users = UserClass.all().exclude(username='admin')\n\n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        return render(request, 'main/users.html', {'users': users})", "func_code_string": "def get(self, request):\n        users = UserClass.all().exclude(username='admin')\n\n        if not request.user.is_supervisor():\n            return redirect('/courses/')\n\n        return render(request, 'main/users.html', {'users': users})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request, user_id):\n        requested_user = get_object_or_404(User, pk=user_id)\n\n        return render(request, 'main/user.html', {'requested_user': requested_user})", "func_code_string": "def get(self, request, user_id):\n        requested_user = get_object_or_404(User, pk=user_id)\n\n        return render(request, 'main/user.html', {'requested_user': requested_user})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        form = CreateUserForm()\n\n        return render(request, 'main/create_user.html', {'form': form})", "func_code_string": "def get(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        form = CreateUserForm()\n\n        return render(request, 'main/create_user.html', {'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        supervisor_class = SupervisorClass.get_instance(request.user)\n        form = CreateUserForm(request.POST)\n        message = ''\n\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            email = form.cleaned_data.get('email')\n            password = form.cleaned_data.get('password2')\n            first_name = form.cleaned_data.get('first_name')\n            last_name = form.cleaned_data.get('last_name')\n            role = form.cleaned_data.get('role')\n\n            supervisor_class.create_user(username, email, password, first_name, last_name, role)\n            message = f'Successfully created {first_name} {last_name}.'\n\n        return render(request, 'main/create_user.html', {'form': form, 'message': message})", "func_code_string": "def post(self, request):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        supervisor_class = SupervisorClass.get_instance(request.user)\n        form = CreateUserForm(request.POST)\n        message = ''\n\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            email = form.cleaned_data.get('email')\n            password = form.cleaned_data.get('password2')\n            first_name = form.cleaned_data.get('first_name')\n            last_name = form.cleaned_data.get('last_name')\n            role = form.cleaned_data.get('role')\n\n            supervisor_class.create_user(username, email, password, first_name, last_name, role)\n            message = f'Successfully created {first_name} {last_name}.'\n\n        return render(request, 'main/create_user.html', {'form': form, 'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        return render(request, \"main/delete_user.html\", {'requested_user': requested_user})", "func_code_string": "def get(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        return render(request, \"main/delete_user.html\", {'requested_user': requested_user})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        requested_user.delete()\n\n        return redirect('/users/')", "func_code_string": "def post(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect('/users/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        requested_user.delete()\n\n        return redirect('/users/')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/users/{user_id}/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        user_class = UserClass.get_instance(requested_user)\n\n        form = EditUserForm(\n            initial={\n                'username': user_class.get_username(),\n                'email': user_class.get_email(),\n                'first_name': user_class.get_first_name(),\n                'last_name': user_class.get_last_name(),\n                'role': user_class.get_role()\n            }\n        )\n\n        return render(request, \"main/edit_user.html\", {'requested_user': requested_user, 'form': form})", "func_code_string": "def get(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/users/{user_id}/')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        user_class = UserClass.get_instance(requested_user)\n\n        form = EditUserForm(\n            initial={\n                'username': user_class.get_username(),\n                'email': user_class.get_email(),\n                'first_name': user_class.get_first_name(),\n                'last_name': user_class.get_last_name(),\n                'role': user_class.get_role()\n            }\n        )\n\n        return render(request, \"main/edit_user.html\", {'requested_user': requested_user, 'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/users/{user_id}')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        user_class = UserClass.get_instance(requested_user)\n\n        form = EditUserForm(\n            request.POST,\n            initial={\n                'username': user_class.get_username(),\n                'email': user_class.get_email(),\n                'first_name': user_class.get_first_name(),\n                'last_name': user_class.get_last_name(),\n                'role': user_class.get_role()\n            }\n        )\n        message = ''\n\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            email = form.cleaned_data.get('email')\n            first_name = form.cleaned_data.get('first_name')\n            last_name = form.cleaned_data.get('last_name')\n            role = form.cleaned_data.get('role')\n\n            user_class.set_username(username)\n            user_class.set_email(email)\n            user_class.set_first_name(first_name)\n            user_class.set_last_name(last_name)\n            user_class.set_role(role)\n\n            requested_user = get_object_or_404(User, pk=user_id)\n\n            message = f'Successfully updated {requested_user}'\n\n        return render(request, 'main/edit_user.html',\n                      {'requested_user': requested_user, 'form': form, 'message': message})", "func_code_string": "def post(self, request, user_id):\n        if not request.user.is_supervisor():\n            return redirect(f'/users/{user_id}')\n\n        requested_user = get_object_or_404(User, pk=user_id)\n        user_class = UserClass.get_instance(requested_user)\n\n        form = EditUserForm(\n            request.POST,\n            initial={\n                'username': user_class.get_username(),\n                'email': user_class.get_email(),\n                'first_name': user_class.get_first_name(),\n                'last_name': user_class.get_last_name(),\n                'role': user_class.get_role()\n            }\n        )\n        message = ''\n\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            email = form.cleaned_data.get('email')\n            first_name = form.cleaned_data.get('first_name')\n            last_name = form.cleaned_data.get('last_name')\n            role = form.cleaned_data.get('role')\n\n            user_class.set_username(username)\n            user_class.set_email(email)\n            user_class.set_first_name(first_name)\n            user_class.set_last_name(last_name)\n            user_class.set_role(role)\n\n            requested_user = get_object_or_404(User, pk=user_id)\n\n            message = f'Successfully updated {requested_user}'\n\n        return render(request, 'main/edit_user.html',\n                      {'requested_user': requested_user, 'form': form, 'message': message})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request):\n        form = UpdateProfileForm(user=request.user)\n        return render(request, 'main/update_profile.html', {'form': form})", "func_code_string": "def get(self, request):\n        form = UpdateProfileForm(user=request.user)\n        return render(request, 'main/update_profile.html', {'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request):\n        form = UpdateProfileForm(request.POST, user=request.user)\n        if form.is_valid():\n            form.save()\n            return redirect('profile')\n        return render(request, 'main/update_profile.html', {'form': form})", "func_code_string": "def post(self, request):\n        form = UpdateProfileForm(request.POST, user=request.user)\n        if form.is_valid():\n            form.save()\n            return redirect('profile')\n        return render(request, 'main/update_profile.html', {'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "get", "whole_func_string": "def get(self, request, *args, **kwargs):\n        form = ChangePasswordForm(user=request.user)\n        return render(request, 'main/change_password.html', {'form': form})", "func_code_string": "def get(self, request, *args, **kwargs):\n        form = ChangePasswordForm(user=request.user)\n        return render(request, 'main/change_password.html', {'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/views.py", "func_name": "post", "whole_func_string": "def post(self, request, *args, **kwargs):\n        form = ChangePasswordForm(user=request.user, data=request.POST)\n        if form.is_valid():\n            form.save()\n            update_session_auth_hash(request, form.user)\n            return redirect('profile')\n        return render(request, 'main/change_password.html', {'form': form})", "func_code_string": "def post(self, request, *args, **kwargs):\n        form = ChangePasswordForm(user=request.user, data=request.POST)\n        if form.is_valid():\n            form.save()\n            update_session_auth_hash(request, form.user)\n            return redirect('profile')\n        return render(request, 'main/change_password.html', {'form': form})", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/migrations/0002_remove_section_tas_section_ta_and_more.py", "func_name": "Migration", "whole_func_string": "class Migration(migrations.Migration):\n\n    dependencies = [\n        ('project_app', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RemoveField(\n            model_name='section',\n            name='tas',\n        ),\n        migrations.AddField(\n            model_name='section',\n            name='ta',\n            field=models.ForeignKey(blank=True, limit_choices_to={'role': 3}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),\n        ),\n        migrations.AlterField(\n            model_name='notification',\n            name='sender',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL),\n        ),\n    ]", "func_code_string": "class Migration(migrations.Migration):\n\n    dependencies = [\n        ('project_app', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RemoveField(\n            model_name='section',\n            name='tas',\n        ),\n        migrations.AddField(\n            model_name='section',\n            name='ta',\n            field=models.ForeignKey(blank=True, limit_choices_to={'role': 3}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),\n        ),\n        migrations.AlterField(\n            model_name='notification',\n            name='sender',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL),\n        ),\n    ]", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/migrations/0001_initial.py", "func_name": "Migration", "whole_func_string": "class Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),\n                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),\n                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),\n                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),\n                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),\n                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),\n                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),\n                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Supervisor'), (2, 'Instructor'), (3, 'TA')], null=True)),\n                ('home_address', models.CharField(blank=True, max_length=50, null=True)),\n                ('phone_number', models.CharField(blank=True, max_length=10, null=True, unique=True)),\n            ],\n            options={\n                'ordering': ['role', 'first_name', 'last_name'],\n            },\n            managers=[\n                ('objects', django.contrib.auth.models.UserManager()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Course',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(blank=True, max_length=100)),\n                ('subject', models.CharField(max_length=7)),\n                ('number', models.CharField(max_length=3, unique=True)),\n                ('instructor', models.ForeignKey(blank=True, limit_choices_to={'role': 2}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),\n            ],\n            options={\n                'ordering': ['subject', 'number'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Section',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('number', models.CharField(max_length=3, unique=True)),\n                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project_app.course')),\n                ('tas', models.ManyToManyField(blank=True, limit_choices_to={'role': 3}, to=settings.AUTH_USER_MODEL)),\n            ],\n            options={\n                'ordering': ['course__subject', 'course__number', 'number'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Notification',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('subject', models.CharField(max_length=100)),\n                ('message', models.TextField()),\n                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_notifications', to=settings.AUTH_USER_MODEL)),\n                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),\n            ],\n            options={\n                'ordering': ['sender__last_name', 'sender__first_name'],\n            },\n        ),\n        migrations.AddField(\n            model_name='user',\n            name='courses',\n            field=models.ManyToManyField(blank=True, to='project_app.course'),\n        ),\n        migrations.AddField(\n            model_name='user',\n            name='groups',\n            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),\n        ),\n        migrations.AddField(\n            model_name='user',\n            name='user_permissions',\n            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),\n        ),\n    ]", "func_code_string": "class Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),\n                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),\n                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),\n                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),\n                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),\n                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),\n                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),\n                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Supervisor'), (2, 'Instructor'), (3, 'TA')], null=True)),\n                ('home_address', models.CharField(blank=True, max_length=50, null=True)),\n                ('phone_number', models.CharField(blank=True, max_length=10, null=True, unique=True)),\n            ],\n            options={\n                'ordering': ['role', 'first_name', 'last_name'],\n            },\n            managers=[\n                ('objects', django.contrib.auth.models.UserManager()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Course',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(blank=True, max_length=100)),\n                ('subject', models.CharField(max_length=7)),\n                ('number', models.CharField(max_length=3, unique=True)),\n                ('instructor', models.ForeignKey(blank=True, limit_choices_to={'role': 2}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),\n            ],\n            options={\n                'ordering': ['subject', 'number'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Section',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('number', models.CharField(max_length=3, unique=True)),\n                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project_app.course')),\n                ('tas', models.ManyToManyField(blank=True, limit_choices_to={'role': 3}, to=settings.AUTH_USER_MODEL)),\n            ],\n            options={\n                'ordering': ['course__subject', 'course__number', 'number'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Notification',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('subject', models.CharField(max_length=100)),\n                ('message', models.TextField()),\n                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_notifications', to=settings.AUTH_USER_MODEL)),\n                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),\n            ],\n            options={\n                'ordering': ['sender__last_name', 'sender__first_name'],\n            },\n        ),\n        migrations.AddField(\n            model_name='user',\n            name='courses',\n            field=models.ManyToManyField(blank=True, to='project_app.course'),\n        ),\n        migrations.AddField(\n            model_name='user',\n            name='groups',\n            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),\n        ),\n        migrations.AddField(\n            model_name='user',\n            name='user_permissions',\n            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),\n        ),\n    ]", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "project_app/migrations/0003_alter_section_number.py", "func_name": "Migration", "whole_func_string": "class Migration(migrations.Migration):\n\n    dependencies = [\n        ('project_app', '0002_remove_section_tas_section_ta_and_more'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='section',\n            name='number',\n            field=models.CharField(max_length=3),\n        ),\n    ]", "func_code_string": "class Migration(migrations.Migration):\n\n    dependencies = [\n        ('project_app', '0002_remove_section_tas_section_ta_and_more'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='section',\n            name='number',\n            field=models.CharField(max_length=3),\n        ),\n    ]", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "UserUnitTestSuite", "whole_func_string": "class UserUnitTestSuite(TestCase):\n    def setUp(self):\n        self.user_class = UserClass(username='user', email='user@uwm.edu', first_name='Test', last_name='User')\n        self.user_class.save_details()\n\n        self.test_class = UserClass(username='test', email='test@uwm.edu', first_name='Test', last_name='Test')\n        self.test_class.save_details()\n\n        self.invalid_class = UserClass(username='invalid', email='invalid@uwm.edu', first_name='Test', last_name='Invalid')\n\n        self.course = CourseClass(name='Test', subject='TEST', number='001')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass(number='001', course=self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n        self.notification = NotificationClass(self.user_class.get_model_instance(), self.test_class.get_model_instance(), 'Subject', 'Message')\n        self.notification.save_details()\n        self.notification = self.notification.get_model_instance()\n\n        self.user_class.sent_notifications = [self.notification]\n        self.test_class.received_notifications = [self.notification]\n\n        user = self.user_class.get_model_instance()\n        user.sent_notifications.add(self.notification)\n\n        test = self.test_class.get_model_instance()\n        test.received_notifications.add(self.notification)\n\n    def test_init_default(self):\n        user_class = UserClass(username='user', email='user@uwm.edu', first_name='Test', last_name='User', role=Role.TA, phone_number='', home_address='', courses=[self.course])\n\n        self.assertEqual(user_class.username, 'user')\n        self.assertEqual(user_class.email, 'user@uwm.edu')\n        self.assertEqual(user_class.first_name, 'Test')\n        self.assertEqual(user_class.last_name, 'User')\n        self.assertEqual(user_class.role, Role.TA)\n        self.assertEqual(user_class.phone_number, '')\n        self.assertEqual(user_class.home_address, '')\n        self.assertEqual(user_class.courses, [self.course])\n        self.assertEqual(user_class.sent_notifications, [])\n        self.assertEqual(user_class.received_notifications, [])\n\n    def test_validate_default(self):\n        pass\n\n    def test_save_details_default(self):\n        user = User.objects.get(username=self.user_class.username)\n\n        self.assertEqual(self.user_class.username, user.username)\n        self.assertEqual(self.user_class.email, user.email)\n        self.assertEqual(self.user_class.first_name, user.first_name)\n        self.assertEqual(self.user_class.last_name, user.last_name)\n        self.assertEqual(self.user_class.role, user.role)\n        self.assertEqual(self.user_class.phone_number, user.phone_number)\n        self.assertEqual(self.user_class.home_address, user.home_address)\n        self.assertEqual(self.user_class.courses, list(user.courses.all()))\n\n    def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='Failed to raise IntegrityError for duplicate user'):\n            self.user_class.save_details()\n    \n    def test_get_model_instance_default(self):\n        user = self.user_class.get_model_instance()\n\n        self.assertEqual(user.username, self.user_class.username)\n        self.assertEqual(user.email, self.user_class.email)\n        self.assertEqual(user.first_name, self.user_class.first_name)\n        self.assertEqual(user.last_name, self.user_class.last_name)\n        self.assertEqual(user.role, self.user_class.role)\n        self.assertEqual(user.phone_number, self.user_class.phone_number)\n        self.assertEqual(user.home_address, self.user_class.home_address)\n        self.assertEqual(list(user.courses.all()), self.user_class.courses)\n        self.assertEqual(list(user.sent_notifications.all()), self.user_class.sent_notifications)\n        self.assertEqual(list(user.received_notifications.all()), self.user_class.received_notifications)\n\n    def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(User.DoesNotExist, msg='get_model_instance does not throw user does not exist exception'):\n            self.invalid_class.get_model_instance()\n    \n    def test_get_instance_default(self):\n        user_class = UserClass.get_instance(self.user_class.get_model_instance())\n\n        self.assertTrue(isinstance(user_class, UserClass))\n\n        self.assertEqual(user_class.username, self.user_class.username)\n        self.assertEqual(user_class.email, self.user_class.email)\n        self.assertEqual(user_class.first_name, self.user_class.first_name)\n        self.assertEqual(user_class.last_name, self.user_class.last_name)\n        self.assertEqual(user_class.role, self.user_class.role)\n        self.assertEqual(user_class.phone_number, self.user_class.phone_number)\n        self.assertEqual(user_class.home_address, self.user_class.home_address)\n        self.assertEqual(user_class.courses, self.user_class.courses)\n        self.assertEqual(user_class.sent_notifications, self.user_class.sent_notifications)\n        self.assertEqual(user_class.received_notifications, self.user_class.received_notifications)\n    \n    def test_delete_default(self):\n        self.user_class.delete()\n\n        with self.assertRaises(User.DoesNotExist, msg='Failed to delete the user from db'):\n            self.user_class.get_model_instance()\n    \n    def test_delete_does_not_exist(self):\n        self.user_class.delete()\n\n        with self.assertRaises(User.DoesNotExist, msg='delete does not raise User.DoesNotExist for non-existant user'):\n            self.user_class.delete()\n\n    def test_get_username_default(self):\n        self.assertEqual(self.user_class.get_username(), 'user')\n\n    def test_set_username_default(self):\n        self.user_class.set_username('testuser')\n        self.assertEqual(self.user_class.username, 'testuser')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.username, 'testuser')\n\n    def test_get_email_default(self):\n        self.assertEqual(self.user_class.get_email(), 'user@uwm.edu')\n\n    def test_set_email_default(self):\n        self.user_class.set_email('testuser@uwm.edu')\n        self.assertEqual(self.user_class.email, 'testuser@uwm.edu')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.email, 'testuser@uwm.edu')\n\n    def test_get_first_name(self):\n        self.assertEqual(self.user_class.get_first_name(), 'Test')\n\n    def test_set_first_name_default(self):\n        self.user_class.set_first_name('test')\n        self.assertEqual(self.user_class.first_name, 'test')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.first_name, 'test')\n\n    def test_get_last_name(self):\n        self.assertEqual(self.user_class.get_last_name(), 'User')\n\n    def test_set_last_name_default(self):\n        self.user_class.set_last_name('user')\n        self.assertEqual(self.user_class.last_name, 'user')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.last_name, 'user')\n\n    def test_get_role_default(self):\n        self.assertEqual(self.user_class.get_role(), None)\n\n    def test_set_role_default(self):\n        self.user_class.set_role(Role.TA)\n        self.user_class.role = Role.TA\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.role, Role.TA)\n\n    def test_set_password_default(self):\n        self.user_class.set_password('foobar123')\n        \n        user = self.user_class.get_model_instance()\n        self.assertTrue(user.check_password('foobar123'))\n\n    def test_set_password_invalid(self):\n        with self.assertRaises(ValidationError, msg='set_password does not raise ValidationError for invalid password'):\n            self.user_class.set_password('password')\n\n    def test_set_phone_number_default(self):\n        self.user_class.set_phone_number('123456789123')\n        self.assertEqual(self.user_class.phone_number, '123456789123')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.phone_number, '123456789123')\n\n    def test_set_home_address_default(self):\n        self.user_class.set_home_address('123 Main St.')\n        self.assertEqual(self.user_class.home_address, '123 Main St.')\n\n        user = User.objects.get(username=self.user_class.username)\n        self.assertEqual(user.home_address, '123 Main St.')\n\n    def test_add_course_default(self):\n        self.user_class.add_course(self.course)\n        self.assertIn(self.course, self.user_class.courses)\n\n        user = User.objects.get(username=self.user_class.username)\n        self.assertIn(self.course, user.courses.all())\n    \n    def test_add_course_exists(self):\n        self.user_class.add_course(self.course)\n        self.assertNotEqual(self.user_class.courses, [self.course, self.course])\n\n        user = self.user_class.get_model_instance()\n        self.assertNotEqual(list(user.courses.all()), [self.course, self.course])\n\n    def test_get_courses_default(self):\n        user = self.user_class.get_model_instance()\n        user.courses.add(self.course)\n        user.save()\n\n        self.assertEqual(list(self.user_class.get_courses()), [self.course])\n\n    def test_get_courses_empty(self):\n        self.assertEqual(list(self.user_class.get_courses()), [])\n\n    def test_has_course_true(self):\n        self.user_class.add_course(self.course)\n\n        user = self.user_class.get_model_instance()\n\n        self.assertTrue(user.courses.filter(subject=self.course.subject, number=self.course.number).exists())\n        self.assertTrue(self.user_class.has_course(self.course))\n\n    def test_has_course_false(self):\n        user = self.user_class.get_model_instance()\n\n        self.assertFalse(user.courses.filter(subject=self.course.subject, number=self.course.number).exists())\n        self.assertFalse(self.user_class.has_course(self.course))\n\n    def test_get_received_notifications_default(self):\n        self.assertEqual(list(self.test_class.get_received_notifications()), [self.notification])\n\n    def test_get_received_notifications_empty(self):\n        self.assertEqual(list(self.user_class.get_received_notifications()), [])\n    \n    def test_is_supervisor_default(self):\n        self.user_class.set_role(Role.SUPERVISOR)\n\n        self.assertTrue(self.user_class.is_supervisor())\n        self.assertFalse(self.user_class.is_instructor())\n        self.assertFalse(self.user_class.is_ta())\n\n    def test_is_instructor_default(self):\n        self.user_class.set_role(Role.INSTRUCTOR)\n\n        self.assertFalse(self.user_class.is_supervisor())\n        self.assertTrue(self.user_class.is_instructor())\n        self.assertFalse(self.user_class.is_ta())\n\n    def test_is_ta_default(self):\n        self.user_class.set_role(Role.TA)\n        self.assertFalse(self.user_class.is_supervisor())\n        self.assertFalse(self.user_class.is_instructor())\n        self.assertTrue(self.user_class.is_ta())\n\n    def test_all_default(self):\n        self.assertIn(self.user_class.get_model_instance(), list(UserClass.all()))\n        self.assertIn(self.test_class.get_model_instance(), list(UserClass.all()))", "func_code_string": "class UserUnitTestSuite(TestCase):\n    def setUp(self):\n        self.user_class = UserClass(username='user', email='user@uwm.edu', first_name='Test', last_name='User')\n        self.user_class.save_details()\n\n        self.test_class = UserClass(username='test', email='test@uwm.edu', first_name='Test', last_name='Test')\n        self.test_class.save_details()\n\n        self.invalid_class = UserClass(username='invalid', email='invalid@uwm.edu', first_name='Test', last_name='Invalid')\n\n        self.course = CourseClass(name='Test', subject='TEST', number='001')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass(number='001', course=self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n        self.notification = NotificationClass(self.user_class.get_model_instance(), self.test_class.get_model_instance(), 'Subject', 'Message')\n        self.notification.save_details()\n        self.notification = self.notification.get_model_instance()\n\n        self.user_class.sent_notifications = [self.notification]\n        self.test_class.received_notifications = [self.notification]\n\n        user = self.user_class.get_model_instance()\n        user.sent_notifications.add(self.notification)\n\n        test = self.test_class.get_model_instance()\n        test.received_notifications.add(self.notification)\n\n    def test_init_default(self):\n        user_class = UserClass(username='user', email='user@uwm.edu', first_name='Test', last_name='User', role=Role.TA, phone_number='', home_address='', courses=[self.course])\n\n        self.assertEqual(user_class.username, 'user')\n        self.assertEqual(user_class.email, 'user@uwm.edu')\n        self.assertEqual(user_class.first_name, 'Test')\n        self.assertEqual(user_class.last_name, 'User')\n        self.assertEqual(user_class.role, Role.TA)\n        self.assertEqual(user_class.phone_number, '')\n        self.assertEqual(user_class.home_address, '')\n        self.assertEqual(user_class.courses, [self.course])\n        self.assertEqual(user_class.sent_notifications, [])\n        self.assertEqual(user_class.received_notifications, [])\n\n    def test_validate_default(self):\n        pass\n\n    def test_save_details_default(self):\n        user = User.objects.get(username=self.user_class.username)\n\n        self.assertEqual(self.user_class.username, user.username)\n        self.assertEqual(self.user_class.email, user.email)\n        self.assertEqual(self.user_class.first_name, user.first_name)\n        self.assertEqual(self.user_class.last_name, user.last_name)\n        self.assertEqual(self.user_class.role, user.role)\n        self.assertEqual(self.user_class.phone_number, user.phone_number)\n        self.assertEqual(self.user_class.home_address, user.home_address)\n        self.assertEqual(self.user_class.courses, list(user.courses.all()))\n\n    def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='Failed to raise IntegrityError for duplicate user'):\n            self.user_class.save_details()\n    \n    def test_get_model_instance_default(self):\n        user = self.user_class.get_model_instance()\n\n        self.assertEqual(user.username, self.user_class.username)\n        self.assertEqual(user.email, self.user_class.email)\n        self.assertEqual(user.first_name, self.user_class.first_name)\n        self.assertEqual(user.last_name, self.user_class.last_name)\n        self.assertEqual(user.role, self.user_class.role)\n        self.assertEqual(user.phone_number, self.user_class.phone_number)\n        self.assertEqual(user.home_address, self.user_class.home_address)\n        self.assertEqual(list(user.courses.all()), self.user_class.courses)\n        self.assertEqual(list(user.sent_notifications.all()), self.user_class.sent_notifications)\n        self.assertEqual(list(user.received_notifications.all()), self.user_class.received_notifications)\n\n    def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(User.DoesNotExist, msg='get_model_instance does not throw user does not exist exception'):\n            self.invalid_class.get_model_instance()\n    \n    def test_get_instance_default(self):\n        user_class = UserClass.get_instance(self.user_class.get_model_instance())\n\n        self.assertTrue(isinstance(user_class, UserClass))\n\n        self.assertEqual(user_class.username, self.user_class.username)\n        self.assertEqual(user_class.email, self.user_class.email)\n        self.assertEqual(user_class.first_name, self.user_class.first_name)\n        self.assertEqual(user_class.last_name, self.user_class.last_name)\n        self.assertEqual(user_class.role, self.user_class.role)\n        self.assertEqual(user_class.phone_number, self.user_class.phone_number)\n        self.assertEqual(user_class.home_address, self.user_class.home_address)\n        self.assertEqual(user_class.courses, self.user_class.courses)\n        self.assertEqual(user_class.sent_notifications, self.user_class.sent_notifications)\n        self.assertEqual(user_class.received_notifications, self.user_class.received_notifications)\n    \n    def test_delete_default(self):\n        self.user_class.delete()\n\n        with self.assertRaises(User.DoesNotExist, msg='Failed to delete the user from db'):\n            self.user_class.get_model_instance()\n    \n    def test_delete_does_not_exist(self):\n        self.user_class.delete()\n\n        with self.assertRaises(User.DoesNotExist, msg='delete does not raise User.DoesNotExist for non-existant user'):\n            self.user_class.delete()\n\n    def test_get_username_default(self):\n        self.assertEqual(self.user_class.get_username(), 'user')\n\n    def test_set_username_default(self):\n        self.user_class.set_username('testuser')\n        self.assertEqual(self.user_class.username, 'testuser')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.username, 'testuser')\n\n    def test_get_email_default(self):\n        self.assertEqual(self.user_class.get_email(), 'user@uwm.edu')\n\n    def test_set_email_default(self):\n        self.user_class.set_email('testuser@uwm.edu')\n        self.assertEqual(self.user_class.email, 'testuser@uwm.edu')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.email, 'testuser@uwm.edu')\n\n    def test_get_first_name(self):\n        self.assertEqual(self.user_class.get_first_name(), 'Test')\n\n    def test_set_first_name_default(self):\n        self.user_class.set_first_name('test')\n        self.assertEqual(self.user_class.first_name, 'test')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.first_name, 'test')\n\n    def test_get_last_name(self):\n        self.assertEqual(self.user_class.get_last_name(), 'User')\n\n    def test_set_last_name_default(self):\n        self.user_class.set_last_name('user')\n        self.assertEqual(self.user_class.last_name, 'user')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.last_name, 'user')\n\n    def test_get_role_default(self):\n        self.assertEqual(self.user_class.get_role(), None)\n\n    def test_set_role_default(self):\n        self.user_class.set_role(Role.TA)\n        self.user_class.role = Role.TA\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.role, Role.TA)\n\n    def test_set_password_default(self):\n        self.user_class.set_password('foobar123')\n        \n        user = self.user_class.get_model_instance()\n        self.assertTrue(user.check_password('foobar123'))\n\n    def test_set_password_invalid(self):\n        with self.assertRaises(ValidationError, msg='set_password does not raise ValidationError for invalid password'):\n            self.user_class.set_password('password')\n\n    def test_set_phone_number_default(self):\n        self.user_class.set_phone_number('123456789123')\n        self.assertEqual(self.user_class.phone_number, '123456789123')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.phone_number, '123456789123')\n\n    def test_set_home_address_default(self):\n        self.user_class.set_home_address('123 Main St.')\n        self.assertEqual(self.user_class.home_address, '123 Main St.')\n\n        user = User.objects.get(username=self.user_class.username)\n        self.assertEqual(user.home_address, '123 Main St.')\n\n    def test_add_course_default(self):\n        self.user_class.add_course(self.course)\n        self.assertIn(self.course, self.user_class.courses)\n\n        user = User.objects.get(username=self.user_class.username)\n        self.assertIn(self.course, user.courses.all())\n    \n    def test_add_course_exists(self):\n        self.user_class.add_course(self.course)\n        self.assertNotEqual(self.user_class.courses, [self.course, self.course])\n\n        user = self.user_class.get_model_instance()\n        self.assertNotEqual(list(user.courses.all()), [self.course, self.course])\n\n    def test_get_courses_default(self):\n        user = self.user_class.get_model_instance()\n        user.courses.add(self.course)\n        user.save()\n\n        self.assertEqual(list(self.user_class.get_courses()), [self.course])\n\n    def test_get_courses_empty(self):\n        self.assertEqual(list(self.user_class.get_courses()), [])\n\n    def test_has_course_true(self):\n        self.user_class.add_course(self.course)\n\n        user = self.user_class.get_model_instance()\n\n        self.assertTrue(user.courses.filter(subject=self.course.subject, number=self.course.number).exists())\n        self.assertTrue(self.user_class.has_course(self.course))\n\n    def test_has_course_false(self):\n        user = self.user_class.get_model_instance()\n\n        self.assertFalse(user.courses.filter(subject=self.course.subject, number=self.course.number).exists())\n        self.assertFalse(self.user_class.has_course(self.course))\n\n    def test_get_received_notifications_default(self):\n        self.assertEqual(list(self.test_class.get_received_notifications()), [self.notification])\n\n    def test_get_received_notifications_empty(self):\n        self.assertEqual(list(self.user_class.get_received_notifications()), [])\n    \n    def test_is_supervisor_default(self):\n        self.user_class.set_role(Role.SUPERVISOR)\n\n        self.assertTrue(self.user_class.is_supervisor())\n        self.assertFalse(self.user_class.is_instructor())\n        self.assertFalse(self.user_class.is_ta())\n\n    def test_is_instructor_default(self):\n        self.user_class.set_role(Role.INSTRUCTOR)\n\n        self.assertFalse(self.user_class.is_supervisor())\n        self.assertTrue(self.user_class.is_instructor())\n        self.assertFalse(self.user_class.is_ta())\n\n    def test_is_ta_default(self):\n        self.user_class.set_role(Role.TA)\n        self.assertFalse(self.user_class.is_supervisor())\n        self.assertFalse(self.user_class.is_instructor())\n        self.assertTrue(self.user_class.is_ta())\n\n    def test_all_default(self):\n        self.assertIn(self.user_class.get_model_instance(), list(UserClass.all()))\n        self.assertIn(self.test_class.get_model_instance(), list(UserClass.all()))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n        self.user_class = UserClass(username='user', email='user@uwm.edu', first_name='Test', last_name='User')\n        self.user_class.save_details()\n\n        self.test_class = UserClass(username='test', email='test@uwm.edu', first_name='Test', last_name='Test')\n        self.test_class.save_details()\n\n        self.invalid_class = UserClass(username='invalid', email='invalid@uwm.edu', first_name='Test', last_name='Invalid')\n\n        self.course = CourseClass(name='Test', subject='TEST', number='001')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass(number='001', course=self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n        self.notification = NotificationClass(self.user_class.get_model_instance(), self.test_class.get_model_instance(), 'Subject', 'Message')\n        self.notification.save_details()\n        self.notification = self.notification.get_model_instance()\n\n        self.user_class.sent_notifications = [self.notification]\n        self.test_class.received_notifications = [self.notification]\n\n        user = self.user_class.get_model_instance()\n        user.sent_notifications.add(self.notification)\n\n        test = self.test_class.get_model_instance()\n        test.received_notifications.add(self.notification)", "func_code_string": "def setUp(self):\n        self.user_class = UserClass(username='user', email='user@uwm.edu', first_name='Test', last_name='User')\n        self.user_class.save_details()\n\n        self.test_class = UserClass(username='test', email='test@uwm.edu', first_name='Test', last_name='Test')\n        self.test_class.save_details()\n\n        self.invalid_class = UserClass(username='invalid', email='invalid@uwm.edu', first_name='Test', last_name='Invalid')\n\n        self.course = CourseClass(name='Test', subject='TEST', number='001')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass(number='001', course=self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n        self.notification = NotificationClass(self.user_class.get_model_instance(), self.test_class.get_model_instance(), 'Subject', 'Message')\n        self.notification.save_details()\n        self.notification = self.notification.get_model_instance()\n\n        self.user_class.sent_notifications = [self.notification]\n        self.test_class.received_notifications = [self.notification]\n\n        user = self.user_class.get_model_instance()\n        user.sent_notifications.add(self.notification)\n\n        test = self.test_class.get_model_instance()\n        test.received_notifications.add(self.notification)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_init_default", "whole_func_string": "def test_init_default(self):\n        user_class = UserClass(username='user', email='user@uwm.edu', first_name='Test', last_name='User', role=Role.TA, phone_number='', home_address='', courses=[self.course])\n\n        self.assertEqual(user_class.username, 'user')\n        self.assertEqual(user_class.email, 'user@uwm.edu')\n        self.assertEqual(user_class.first_name, 'Test')\n        self.assertEqual(user_class.last_name, 'User')\n        self.assertEqual(user_class.role, Role.TA)\n        self.assertEqual(user_class.phone_number, '')\n        self.assertEqual(user_class.home_address, '')\n        self.assertEqual(user_class.courses, [self.course])\n        self.assertEqual(user_class.sent_notifications, [])\n        self.assertEqual(user_class.received_notifications, [])", "func_code_string": "def test_init_default(self):\n        user_class = UserClass(username='user', email='user@uwm.edu', first_name='Test', last_name='User', role=Role.TA, phone_number='', home_address='', courses=[self.course])\n\n        self.assertEqual(user_class.username, 'user')\n        self.assertEqual(user_class.email, 'user@uwm.edu')\n        self.assertEqual(user_class.first_name, 'Test')\n        self.assertEqual(user_class.last_name, 'User')\n        self.assertEqual(user_class.role, Role.TA)\n        self.assertEqual(user_class.phone_number, '')\n        self.assertEqual(user_class.home_address, '')\n        self.assertEqual(user_class.courses, [self.course])\n        self.assertEqual(user_class.sent_notifications, [])\n        self.assertEqual(user_class.received_notifications, [])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_validate_default", "whole_func_string": "def test_validate_default(self):\n        pass", "func_code_string": "def test_validate_default(self):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_save_details_default", "whole_func_string": "def test_save_details_default(self):\n        user = User.objects.get(username=self.user_class.username)\n\n        self.assertEqual(self.user_class.username, user.username)\n        self.assertEqual(self.user_class.email, user.email)\n        self.assertEqual(self.user_class.first_name, user.first_name)\n        self.assertEqual(self.user_class.last_name, user.last_name)\n        self.assertEqual(self.user_class.role, user.role)\n        self.assertEqual(self.user_class.phone_number, user.phone_number)\n        self.assertEqual(self.user_class.home_address, user.home_address)\n        self.assertEqual(self.user_class.courses, list(user.courses.all()))", "func_code_string": "def test_save_details_default(self):\n        user = User.objects.get(username=self.user_class.username)\n\n        self.assertEqual(self.user_class.username, user.username)\n        self.assertEqual(self.user_class.email, user.email)\n        self.assertEqual(self.user_class.first_name, user.first_name)\n        self.assertEqual(self.user_class.last_name, user.last_name)\n        self.assertEqual(self.user_class.role, user.role)\n        self.assertEqual(self.user_class.phone_number, user.phone_number)\n        self.assertEqual(self.user_class.home_address, user.home_address)\n        self.assertEqual(self.user_class.courses, list(user.courses.all()))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_save_details_exists", "whole_func_string": "def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='Failed to raise IntegrityError for duplicate user'):\n            self.user_class.save_details()", "func_code_string": "def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='Failed to raise IntegrityError for duplicate user'):\n            self.user_class.save_details()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_model_instance_default", "whole_func_string": "def test_get_model_instance_default(self):\n        user = self.user_class.get_model_instance()\n\n        self.assertEqual(user.username, self.user_class.username)\n        self.assertEqual(user.email, self.user_class.email)\n        self.assertEqual(user.first_name, self.user_class.first_name)\n        self.assertEqual(user.last_name, self.user_class.last_name)\n        self.assertEqual(user.role, self.user_class.role)\n        self.assertEqual(user.phone_number, self.user_class.phone_number)\n        self.assertEqual(user.home_address, self.user_class.home_address)\n        self.assertEqual(list(user.courses.all()), self.user_class.courses)\n        self.assertEqual(list(user.sent_notifications.all()), self.user_class.sent_notifications)\n        self.assertEqual(list(user.received_notifications.all()), self.user_class.received_notifications)", "func_code_string": "def test_get_model_instance_default(self):\n        user = self.user_class.get_model_instance()\n\n        self.assertEqual(user.username, self.user_class.username)\n        self.assertEqual(user.email, self.user_class.email)\n        self.assertEqual(user.first_name, self.user_class.first_name)\n        self.assertEqual(user.last_name, self.user_class.last_name)\n        self.assertEqual(user.role, self.user_class.role)\n        self.assertEqual(user.phone_number, self.user_class.phone_number)\n        self.assertEqual(user.home_address, self.user_class.home_address)\n        self.assertEqual(list(user.courses.all()), self.user_class.courses)\n        self.assertEqual(list(user.sent_notifications.all()), self.user_class.sent_notifications)\n        self.assertEqual(list(user.received_notifications.all()), self.user_class.received_notifications)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_model_instance_does_not_exist", "whole_func_string": "def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(User.DoesNotExist, msg='get_model_instance does not throw user does not exist exception'):\n            self.invalid_class.get_model_instance()", "func_code_string": "def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(User.DoesNotExist, msg='get_model_instance does not throw user does not exist exception'):\n            self.invalid_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_instance_default", "whole_func_string": "def test_get_instance_default(self):\n        user_class = UserClass.get_instance(self.user_class.get_model_instance())\n\n        self.assertTrue(isinstance(user_class, UserClass))\n\n        self.assertEqual(user_class.username, self.user_class.username)\n        self.assertEqual(user_class.email, self.user_class.email)\n        self.assertEqual(user_class.first_name, self.user_class.first_name)\n        self.assertEqual(user_class.last_name, self.user_class.last_name)\n        self.assertEqual(user_class.role, self.user_class.role)\n        self.assertEqual(user_class.phone_number, self.user_class.phone_number)\n        self.assertEqual(user_class.home_address, self.user_class.home_address)\n        self.assertEqual(user_class.courses, self.user_class.courses)\n        self.assertEqual(user_class.sent_notifications, self.user_class.sent_notifications)\n        self.assertEqual(user_class.received_notifications, self.user_class.received_notifications)", "func_code_string": "def test_get_instance_default(self):\n        user_class = UserClass.get_instance(self.user_class.get_model_instance())\n\n        self.assertTrue(isinstance(user_class, UserClass))\n\n        self.assertEqual(user_class.username, self.user_class.username)\n        self.assertEqual(user_class.email, self.user_class.email)\n        self.assertEqual(user_class.first_name, self.user_class.first_name)\n        self.assertEqual(user_class.last_name, self.user_class.last_name)\n        self.assertEqual(user_class.role, self.user_class.role)\n        self.assertEqual(user_class.phone_number, self.user_class.phone_number)\n        self.assertEqual(user_class.home_address, self.user_class.home_address)\n        self.assertEqual(user_class.courses, self.user_class.courses)\n        self.assertEqual(user_class.sent_notifications, self.user_class.sent_notifications)\n        self.assertEqual(user_class.received_notifications, self.user_class.received_notifications)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_delete_default", "whole_func_string": "def test_delete_default(self):\n        self.user_class.delete()\n\n        with self.assertRaises(User.DoesNotExist, msg='Failed to delete the user from db'):\n            self.user_class.get_model_instance()", "func_code_string": "def test_delete_default(self):\n        self.user_class.delete()\n\n        with self.assertRaises(User.DoesNotExist, msg='Failed to delete the user from db'):\n            self.user_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_delete_does_not_exist", "whole_func_string": "def test_delete_does_not_exist(self):\n        self.user_class.delete()\n\n        with self.assertRaises(User.DoesNotExist, msg='delete does not raise User.DoesNotExist for non-existant user'):\n            self.user_class.delete()", "func_code_string": "def test_delete_does_not_exist(self):\n        self.user_class.delete()\n\n        with self.assertRaises(User.DoesNotExist, msg='delete does not raise User.DoesNotExist for non-existant user'):\n            self.user_class.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_username_default", "whole_func_string": "def test_get_username_default(self):\n        self.assertEqual(self.user_class.get_username(), 'user')", "func_code_string": "def test_get_username_default(self):\n        self.assertEqual(self.user_class.get_username(), 'user')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_set_username_default", "whole_func_string": "def test_set_username_default(self):\n        self.user_class.set_username('testuser')\n        self.assertEqual(self.user_class.username, 'testuser')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.username, 'testuser')", "func_code_string": "def test_set_username_default(self):\n        self.user_class.set_username('testuser')\n        self.assertEqual(self.user_class.username, 'testuser')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.username, 'testuser')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_email_default", "whole_func_string": "def test_get_email_default(self):\n        self.assertEqual(self.user_class.get_email(), 'user@uwm.edu')", "func_code_string": "def test_get_email_default(self):\n        self.assertEqual(self.user_class.get_email(), 'user@uwm.edu')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_set_email_default", "whole_func_string": "def test_set_email_default(self):\n        self.user_class.set_email('testuser@uwm.edu')\n        self.assertEqual(self.user_class.email, 'testuser@uwm.edu')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.email, 'testuser@uwm.edu')", "func_code_string": "def test_set_email_default(self):\n        self.user_class.set_email('testuser@uwm.edu')\n        self.assertEqual(self.user_class.email, 'testuser@uwm.edu')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.email, 'testuser@uwm.edu')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_first_name", "whole_func_string": "def test_get_first_name(self):\n        self.assertEqual(self.user_class.get_first_name(), 'Test')", "func_code_string": "def test_get_first_name(self):\n        self.assertEqual(self.user_class.get_first_name(), 'Test')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_set_first_name_default", "whole_func_string": "def test_set_first_name_default(self):\n        self.user_class.set_first_name('test')\n        self.assertEqual(self.user_class.first_name, 'test')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.first_name, 'test')", "func_code_string": "def test_set_first_name_default(self):\n        self.user_class.set_first_name('test')\n        self.assertEqual(self.user_class.first_name, 'test')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.first_name, 'test')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_last_name", "whole_func_string": "def test_get_last_name(self):\n        self.assertEqual(self.user_class.get_last_name(), 'User')", "func_code_string": "def test_get_last_name(self):\n        self.assertEqual(self.user_class.get_last_name(), 'User')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_set_last_name_default", "whole_func_string": "def test_set_last_name_default(self):\n        self.user_class.set_last_name('user')\n        self.assertEqual(self.user_class.last_name, 'user')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.last_name, 'user')", "func_code_string": "def test_set_last_name_default(self):\n        self.user_class.set_last_name('user')\n        self.assertEqual(self.user_class.last_name, 'user')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.last_name, 'user')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_role_default", "whole_func_string": "def test_get_role_default(self):\n        self.assertEqual(self.user_class.get_role(), None)", "func_code_string": "def test_get_role_default(self):\n        self.assertEqual(self.user_class.get_role(), None)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_set_role_default", "whole_func_string": "def test_set_role_default(self):\n        self.user_class.set_role(Role.TA)\n        self.user_class.role = Role.TA\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.role, Role.TA)", "func_code_string": "def test_set_role_default(self):\n        self.user_class.set_role(Role.TA)\n        self.user_class.role = Role.TA\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.role, Role.TA)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_set_password_default", "whole_func_string": "def test_set_password_default(self):\n        self.user_class.set_password('foobar123')\n        \n        user = self.user_class.get_model_instance()\n        self.assertTrue(user.check_password('foobar123'))", "func_code_string": "def test_set_password_default(self):\n        self.user_class.set_password('foobar123')\n        \n        user = self.user_class.get_model_instance()\n        self.assertTrue(user.check_password('foobar123'))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_set_password_invalid", "whole_func_string": "def test_set_password_invalid(self):\n        with self.assertRaises(ValidationError, msg='set_password does not raise ValidationError for invalid password'):\n            self.user_class.set_password('password')", "func_code_string": "def test_set_password_invalid(self):\n        with self.assertRaises(ValidationError, msg='set_password does not raise ValidationError for invalid password'):\n            self.user_class.set_password('password')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_set_phone_number_default", "whole_func_string": "def test_set_phone_number_default(self):\n        self.user_class.set_phone_number('123456789123')\n        self.assertEqual(self.user_class.phone_number, '123456789123')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.phone_number, '123456789123')", "func_code_string": "def test_set_phone_number_default(self):\n        self.user_class.set_phone_number('123456789123')\n        self.assertEqual(self.user_class.phone_number, '123456789123')\n\n        user = self.user_class.get_model_instance()\n        self.assertEqual(user.phone_number, '123456789123')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_set_home_address_default", "whole_func_string": "def test_set_home_address_default(self):\n        self.user_class.set_home_address('123 Main St.')\n        self.assertEqual(self.user_class.home_address, '123 Main St.')\n\n        user = User.objects.get(username=self.user_class.username)\n        self.assertEqual(user.home_address, '123 Main St.')", "func_code_string": "def test_set_home_address_default(self):\n        self.user_class.set_home_address('123 Main St.')\n        self.assertEqual(self.user_class.home_address, '123 Main St.')\n\n        user = User.objects.get(username=self.user_class.username)\n        self.assertEqual(user.home_address, '123 Main St.')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_add_course_default", "whole_func_string": "def test_add_course_default(self):\n        self.user_class.add_course(self.course)\n        self.assertIn(self.course, self.user_class.courses)\n\n        user = User.objects.get(username=self.user_class.username)\n        self.assertIn(self.course, user.courses.all())", "func_code_string": "def test_add_course_default(self):\n        self.user_class.add_course(self.course)\n        self.assertIn(self.course, self.user_class.courses)\n\n        user = User.objects.get(username=self.user_class.username)\n        self.assertIn(self.course, user.courses.all())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_add_course_exists", "whole_func_string": "def test_add_course_exists(self):\n        self.user_class.add_course(self.course)\n        self.assertNotEqual(self.user_class.courses, [self.course, self.course])\n\n        user = self.user_class.get_model_instance()\n        self.assertNotEqual(list(user.courses.all()), [self.course, self.course])", "func_code_string": "def test_add_course_exists(self):\n        self.user_class.add_course(self.course)\n        self.assertNotEqual(self.user_class.courses, [self.course, self.course])\n\n        user = self.user_class.get_model_instance()\n        self.assertNotEqual(list(user.courses.all()), [self.course, self.course])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_courses_default", "whole_func_string": "def test_get_courses_default(self):\n        user = self.user_class.get_model_instance()\n        user.courses.add(self.course)\n        user.save()\n\n        self.assertEqual(list(self.user_class.get_courses()), [self.course])", "func_code_string": "def test_get_courses_default(self):\n        user = self.user_class.get_model_instance()\n        user.courses.add(self.course)\n        user.save()\n\n        self.assertEqual(list(self.user_class.get_courses()), [self.course])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_courses_empty", "whole_func_string": "def test_get_courses_empty(self):\n        self.assertEqual(list(self.user_class.get_courses()), [])", "func_code_string": "def test_get_courses_empty(self):\n        self.assertEqual(list(self.user_class.get_courses()), [])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_has_course_true", "whole_func_string": "def test_has_course_true(self):\n        self.user_class.add_course(self.course)\n\n        user = self.user_class.get_model_instance()\n\n        self.assertTrue(user.courses.filter(subject=self.course.subject, number=self.course.number).exists())\n        self.assertTrue(self.user_class.has_course(self.course))", "func_code_string": "def test_has_course_true(self):\n        self.user_class.add_course(self.course)\n\n        user = self.user_class.get_model_instance()\n\n        self.assertTrue(user.courses.filter(subject=self.course.subject, number=self.course.number).exists())\n        self.assertTrue(self.user_class.has_course(self.course))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_has_course_false", "whole_func_string": "def test_has_course_false(self):\n        user = self.user_class.get_model_instance()\n\n        self.assertFalse(user.courses.filter(subject=self.course.subject, number=self.course.number).exists())\n        self.assertFalse(self.user_class.has_course(self.course))", "func_code_string": "def test_has_course_false(self):\n        user = self.user_class.get_model_instance()\n\n        self.assertFalse(user.courses.filter(subject=self.course.subject, number=self.course.number).exists())\n        self.assertFalse(self.user_class.has_course(self.course))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_received_notifications_default", "whole_func_string": "def test_get_received_notifications_default(self):\n        self.assertEqual(list(self.test_class.get_received_notifications()), [self.notification])", "func_code_string": "def test_get_received_notifications_default(self):\n        self.assertEqual(list(self.test_class.get_received_notifications()), [self.notification])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_get_received_notifications_empty", "whole_func_string": "def test_get_received_notifications_empty(self):\n        self.assertEqual(list(self.user_class.get_received_notifications()), [])", "func_code_string": "def test_get_received_notifications_empty(self):\n        self.assertEqual(list(self.user_class.get_received_notifications()), [])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_is_supervisor_default", "whole_func_string": "def test_is_supervisor_default(self):\n        self.user_class.set_role(Role.SUPERVISOR)\n\n        self.assertTrue(self.user_class.is_supervisor())\n        self.assertFalse(self.user_class.is_instructor())\n        self.assertFalse(self.user_class.is_ta())", "func_code_string": "def test_is_supervisor_default(self):\n        self.user_class.set_role(Role.SUPERVISOR)\n\n        self.assertTrue(self.user_class.is_supervisor())\n        self.assertFalse(self.user_class.is_instructor())\n        self.assertFalse(self.user_class.is_ta())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_is_instructor_default", "whole_func_string": "def test_is_instructor_default(self):\n        self.user_class.set_role(Role.INSTRUCTOR)\n\n        self.assertFalse(self.user_class.is_supervisor())\n        self.assertTrue(self.user_class.is_instructor())\n        self.assertFalse(self.user_class.is_ta())", "func_code_string": "def test_is_instructor_default(self):\n        self.user_class.set_role(Role.INSTRUCTOR)\n\n        self.assertFalse(self.user_class.is_supervisor())\n        self.assertTrue(self.user_class.is_instructor())\n        self.assertFalse(self.user_class.is_ta())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_is_ta_default", "whole_func_string": "def test_is_ta_default(self):\n        self.user_class.set_role(Role.TA)\n        self.assertFalse(self.user_class.is_supervisor())\n        self.assertFalse(self.user_class.is_instructor())\n        self.assertTrue(self.user_class.is_ta())", "func_code_string": "def test_is_ta_default(self):\n        self.user_class.set_role(Role.TA)\n        self.assertFalse(self.user_class.is_supervisor())\n        self.assertFalse(self.user_class.is_instructor())\n        self.assertTrue(self.user_class.is_ta())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_user.py", "func_name": "test_all_default", "whole_func_string": "def test_all_default(self):\n        self.assertIn(self.user_class.get_model_instance(), list(UserClass.all()))\n        self.assertIn(self.test_class.get_model_instance(), list(UserClass.all()))", "func_code_string": "def test_all_default(self):\n        self.assertIn(self.user_class.get_model_instance(), list(UserClass.all()))\n        self.assertIn(self.test_class.get_model_instance(), list(UserClass.all()))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "SectionUnitTestSuite", "whole_func_string": "class SectionUnitTestSuite(TestCase):\n    def setUp(self):\n        self.instructor = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass(username='ta', email='ta@uwm.edu',\n                       first_name='Test', last_name='TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course = CourseClass(name='Test', subject='TEST',\n                             number='001', instructor=self.instructor)\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section_class = SectionClass('1', self.course)\n        self.section_class.save_details()\n\n        self.invalid_class = SectionClass('', course=None)\n\n    def test_init_default(self):\n        section_class = SectionClass('1', self.course, [self.ta])\n\n        self.assertEqual(section_class.number, '1')\n        self.assertEqual(section_class.course, self.course)\n        self.assertEqual(section_class.ta, self.ta)\n\n    def test_save_details_default(self):\n        section = Section.objects.get(number=self.section_class.number, course=self.section_class.course)\n\n        self.assertEqual(self.section_class.number, section.number)\n        self.assertEqual(self.section_class.course, section.course)\n        self.assertEqual(self.section_class.ta, section.ta)\n\n    def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='save_details does not raise IntegrityError for duplicate section'):\n            self.section_class.save_details()\n\n    def test_get_model_instance_default(self):\n        section = self.section_class.get_model_instance()\n\n        self.assertEqual(section.number, self.section_class.number)\n        self.assertEqual(section.course, self.section_class.course)\n        self.assertEqual(section.ta, self.section_class.ta)\n    \n    def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Section.DoesNotExist, msg='get_model_instance does not raise Section.DoesNotExist for non-existant section'):\n            self.invalid_class.get_model_instance()\n\n    def test_get_instance_default(self):\n        section_class = SectionClass.get_instance(self.section_class.get_model_instance())\n\n        self.assertTrue(isinstance(section_class, SectionClass))\n\n        self.assertEqual(section_class.number, self.section_class.number)\n        self.assertEqual(section_class.course, self.section_class.course)\n        self.assertEqual(section_class.tas, self.section_class.tas)\n\n    def test_delete_default(self):\n        self.section_class.delete()\n        with self.assertRaises(Section.DoesNotExist, msg='Failed to delete the section from db'):\n            Section.objects.get(number=self.section_class.number, course=self.section_class.course)\n\n    def test_delete_does_not_exist(self):\n        self.section_class.delete()\n\n        with self.assertRaises(Section.DoesNotExist, msg='delete does not raise Section.DoesNotExist for non-existant section'):\n            self.section_class.delete()\n\n    def test_get_number(self):\n        self.assertEqual(self.section_class.get_number(), '1')\n\n    def test_set_number(self):\n        self.section_class.set_number('2')\n        self.assertEqual(self.section_class.number, '2')\n\n        section = self.section_class.get_model_instance()\n        self.assertEqual(section.number, '2')\n\n    def test_get_course(self):\n        self.assertEqual(self.section_class.get_course(), self.course)\n\n    def test_add_ta_default(self):\n        ta_2 = TAClass(username='ta_2', email='ta_2@uwm.edu',\n                    first_name='Test2', last_name='TA2')\n        ta_2.save_details()\n        ta_2 = ta_2.get_model_instance()\n\n        self.section_class.set_ta(ta_2)\n        self.assertIn(ta_2, self.section_class.ta)\n\n        section = self.section_class.get_model_instance()\n        self.assertIn(ta_2, section.tas.all())\n\n        self.assertIn(self.section_class.get_course(), ta_2.courses.all())\n\n    def test_set_ta_does_not_exist(self):\n        invalid_ta = User(username='invalid', email='invalid@uwm.edu',\n                       first_name='Test', last_name='Invalid')\n        invalid_ta.set_password('invalid')\n        invalid_ta.role = Role.TA\n\n        with self.assertRaises(ValueError, msg='set_ta does not raise ValueError for non-existent TA'):\n            self.section_class.set_ta(invalid_ta)", "func_code_string": "class SectionUnitTestSuite(TestCase):\n    def setUp(self):\n        self.instructor = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass(username='ta', email='ta@uwm.edu',\n                       first_name='Test', last_name='TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course = CourseClass(name='Test', subject='TEST',\n                             number='001', instructor=self.instructor)\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section_class = SectionClass('1', self.course)\n        self.section_class.save_details()\n\n        self.invalid_class = SectionClass('', course=None)\n\n    def test_init_default(self):\n        section_class = SectionClass('1', self.course, [self.ta])\n\n        self.assertEqual(section_class.number, '1')\n        self.assertEqual(section_class.course, self.course)\n        self.assertEqual(section_class.ta, self.ta)\n\n    def test_save_details_default(self):\n        section = Section.objects.get(number=self.section_class.number, course=self.section_class.course)\n\n        self.assertEqual(self.section_class.number, section.number)\n        self.assertEqual(self.section_class.course, section.course)\n        self.assertEqual(self.section_class.ta, section.ta)\n\n    def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='save_details does not raise IntegrityError for duplicate section'):\n            self.section_class.save_details()\n\n    def test_get_model_instance_default(self):\n        section = self.section_class.get_model_instance()\n\n        self.assertEqual(section.number, self.section_class.number)\n        self.assertEqual(section.course, self.section_class.course)\n        self.assertEqual(section.ta, self.section_class.ta)\n    \n    def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Section.DoesNotExist, msg='get_model_instance does not raise Section.DoesNotExist for non-existant section'):\n            self.invalid_class.get_model_instance()\n\n    def test_get_instance_default(self):\n        section_class = SectionClass.get_instance(self.section_class.get_model_instance())\n\n        self.assertTrue(isinstance(section_class, SectionClass))\n\n        self.assertEqual(section_class.number, self.section_class.number)\n        self.assertEqual(section_class.course, self.section_class.course)\n        self.assertEqual(section_class.tas, self.section_class.tas)\n\n    def test_delete_default(self):\n        self.section_class.delete()\n        with self.assertRaises(Section.DoesNotExist, msg='Failed to delete the section from db'):\n            Section.objects.get(number=self.section_class.number, course=self.section_class.course)\n\n    def test_delete_does_not_exist(self):\n        self.section_class.delete()\n\n        with self.assertRaises(Section.DoesNotExist, msg='delete does not raise Section.DoesNotExist for non-existant section'):\n            self.section_class.delete()\n\n    def test_get_number(self):\n        self.assertEqual(self.section_class.get_number(), '1')\n\n    def test_set_number(self):\n        self.section_class.set_number('2')\n        self.assertEqual(self.section_class.number, '2')\n\n        section = self.section_class.get_model_instance()\n        self.assertEqual(section.number, '2')\n\n    def test_get_course(self):\n        self.assertEqual(self.section_class.get_course(), self.course)\n\n    def test_add_ta_default(self):\n        ta_2 = TAClass(username='ta_2', email='ta_2@uwm.edu',\n                    first_name='Test2', last_name='TA2')\n        ta_2.save_details()\n        ta_2 = ta_2.get_model_instance()\n\n        self.section_class.set_ta(ta_2)\n        self.assertIn(ta_2, self.section_class.ta)\n\n        section = self.section_class.get_model_instance()\n        self.assertIn(ta_2, section.tas.all())\n\n        self.assertIn(self.section_class.get_course(), ta_2.courses.all())\n\n    def test_set_ta_does_not_exist(self):\n        invalid_ta = User(username='invalid', email='invalid@uwm.edu',\n                       first_name='Test', last_name='Invalid')\n        invalid_ta.set_password('invalid')\n        invalid_ta.role = Role.TA\n\n        with self.assertRaises(ValueError, msg='set_ta does not raise ValueError for non-existent TA'):\n            self.section_class.set_ta(invalid_ta)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n        self.instructor = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass(username='ta', email='ta@uwm.edu',\n                       first_name='Test', last_name='TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course = CourseClass(name='Test', subject='TEST',\n                             number='001', instructor=self.instructor)\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section_class = SectionClass('1', self.course)\n        self.section_class.save_details()\n\n        self.invalid_class = SectionClass('', course=None)", "func_code_string": "def setUp(self):\n        self.instructor = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass(username='ta', email='ta@uwm.edu',\n                       first_name='Test', last_name='TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course = CourseClass(name='Test', subject='TEST',\n                             number='001', instructor=self.instructor)\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section_class = SectionClass('1', self.course)\n        self.section_class.save_details()\n\n        self.invalid_class = SectionClass('', course=None)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_init_default", "whole_func_string": "def test_init_default(self):\n        section_class = SectionClass('1', self.course, [self.ta])\n\n        self.assertEqual(section_class.number, '1')\n        self.assertEqual(section_class.course, self.course)\n        self.assertEqual(section_class.ta, self.ta)", "func_code_string": "def test_init_default(self):\n        section_class = SectionClass('1', self.course, [self.ta])\n\n        self.assertEqual(section_class.number, '1')\n        self.assertEqual(section_class.course, self.course)\n        self.assertEqual(section_class.ta, self.ta)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_save_details_default", "whole_func_string": "def test_save_details_default(self):\n        section = Section.objects.get(number=self.section_class.number, course=self.section_class.course)\n\n        self.assertEqual(self.section_class.number, section.number)\n        self.assertEqual(self.section_class.course, section.course)\n        self.assertEqual(self.section_class.ta, section.ta)", "func_code_string": "def test_save_details_default(self):\n        section = Section.objects.get(number=self.section_class.number, course=self.section_class.course)\n\n        self.assertEqual(self.section_class.number, section.number)\n        self.assertEqual(self.section_class.course, section.course)\n        self.assertEqual(self.section_class.ta, section.ta)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_save_details_exists", "whole_func_string": "def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='save_details does not raise IntegrityError for duplicate section'):\n            self.section_class.save_details()", "func_code_string": "def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='save_details does not raise IntegrityError for duplicate section'):\n            self.section_class.save_details()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_get_model_instance_default", "whole_func_string": "def test_get_model_instance_default(self):\n        section = self.section_class.get_model_instance()\n\n        self.assertEqual(section.number, self.section_class.number)\n        self.assertEqual(section.course, self.section_class.course)\n        self.assertEqual(section.ta, self.section_class.ta)", "func_code_string": "def test_get_model_instance_default(self):\n        section = self.section_class.get_model_instance()\n\n        self.assertEqual(section.number, self.section_class.number)\n        self.assertEqual(section.course, self.section_class.course)\n        self.assertEqual(section.ta, self.section_class.ta)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_get_model_instance_does_not_exist", "whole_func_string": "def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Section.DoesNotExist, msg='get_model_instance does not raise Section.DoesNotExist for non-existant section'):\n            self.invalid_class.get_model_instance()", "func_code_string": "def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Section.DoesNotExist, msg='get_model_instance does not raise Section.DoesNotExist for non-existant section'):\n            self.invalid_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_get_instance_default", "whole_func_string": "def test_get_instance_default(self):\n        section_class = SectionClass.get_instance(self.section_class.get_model_instance())\n\n        self.assertTrue(isinstance(section_class, SectionClass))\n\n        self.assertEqual(section_class.number, self.section_class.number)\n        self.assertEqual(section_class.course, self.section_class.course)\n        self.assertEqual(section_class.tas, self.section_class.tas)", "func_code_string": "def test_get_instance_default(self):\n        section_class = SectionClass.get_instance(self.section_class.get_model_instance())\n\n        self.assertTrue(isinstance(section_class, SectionClass))\n\n        self.assertEqual(section_class.number, self.section_class.number)\n        self.assertEqual(section_class.course, self.section_class.course)\n        self.assertEqual(section_class.tas, self.section_class.tas)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_delete_default", "whole_func_string": "def test_delete_default(self):\n        self.section_class.delete()\n        with self.assertRaises(Section.DoesNotExist, msg='Failed to delete the section from db'):\n            Section.objects.get(number=self.section_class.number, course=self.section_class.course)", "func_code_string": "def test_delete_default(self):\n        self.section_class.delete()\n        with self.assertRaises(Section.DoesNotExist, msg='Failed to delete the section from db'):\n            Section.objects.get(number=self.section_class.number, course=self.section_class.course)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_delete_does_not_exist", "whole_func_string": "def test_delete_does_not_exist(self):\n        self.section_class.delete()\n\n        with self.assertRaises(Section.DoesNotExist, msg='delete does not raise Section.DoesNotExist for non-existant section'):\n            self.section_class.delete()", "func_code_string": "def test_delete_does_not_exist(self):\n        self.section_class.delete()\n\n        with self.assertRaises(Section.DoesNotExist, msg='delete does not raise Section.DoesNotExist for non-existant section'):\n            self.section_class.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_get_number", "whole_func_string": "def test_get_number(self):\n        self.assertEqual(self.section_class.get_number(), '1')", "func_code_string": "def test_get_number(self):\n        self.assertEqual(self.section_class.get_number(), '1')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_set_number", "whole_func_string": "def test_set_number(self):\n        self.section_class.set_number('2')\n        self.assertEqual(self.section_class.number, '2')\n\n        section = self.section_class.get_model_instance()\n        self.assertEqual(section.number, '2')", "func_code_string": "def test_set_number(self):\n        self.section_class.set_number('2')\n        self.assertEqual(self.section_class.number, '2')\n\n        section = self.section_class.get_model_instance()\n        self.assertEqual(section.number, '2')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_get_course", "whole_func_string": "def test_get_course(self):\n        self.assertEqual(self.section_class.get_course(), self.course)", "func_code_string": "def test_get_course(self):\n        self.assertEqual(self.section_class.get_course(), self.course)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_add_ta_default", "whole_func_string": "def test_add_ta_default(self):\n        ta_2 = TAClass(username='ta_2', email='ta_2@uwm.edu',\n                    first_name='Test2', last_name='TA2')\n        ta_2.save_details()\n        ta_2 = ta_2.get_model_instance()\n\n        self.section_class.set_ta(ta_2)\n        self.assertIn(ta_2, self.section_class.ta)\n\n        section = self.section_class.get_model_instance()\n        self.assertIn(ta_2, section.tas.all())\n\n        self.assertIn(self.section_class.get_course(), ta_2.courses.all())", "func_code_string": "def test_add_ta_default(self):\n        ta_2 = TAClass(username='ta_2', email='ta_2@uwm.edu',\n                    first_name='Test2', last_name='TA2')\n        ta_2.save_details()\n        ta_2 = ta_2.get_model_instance()\n\n        self.section_class.set_ta(ta_2)\n        self.assertIn(ta_2, self.section_class.ta)\n\n        section = self.section_class.get_model_instance()\n        self.assertIn(ta_2, section.tas.all())\n\n        self.assertIn(self.section_class.get_course(), ta_2.courses.all())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_section.py", "func_name": "test_set_ta_does_not_exist", "whole_func_string": "def test_set_ta_does_not_exist(self):\n        invalid_ta = User(username='invalid', email='invalid@uwm.edu',\n                       first_name='Test', last_name='Invalid')\n        invalid_ta.set_password('invalid')\n        invalid_ta.role = Role.TA\n\n        with self.assertRaises(ValueError, msg='set_ta does not raise ValueError for non-existent TA'):\n            self.section_class.set_ta(invalid_ta)", "func_code_string": "def test_set_ta_does_not_exist(self):\n        invalid_ta = User(username='invalid', email='invalid@uwm.edu',\n                       first_name='Test', last_name='Invalid')\n        invalid_ta.set_password('invalid')\n        invalid_ta.role = Role.TA\n\n        with self.assertRaises(ValueError, msg='set_ta does not raise ValueError for non-existent TA'):\n            self.section_class.set_ta(invalid_ta)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "NotificationUnitTestSuite", "whole_func_string": "class NotificationUnitTestSuite(TestCase):\n    def setUp(self):\n        self.sender = UserClass(\n            username='sender', email='sender@uwm.edu', first_name='Test', last_name='Sender')\n        self.sender.save_details()\n        self.sender = self.sender.get_model_instance()\n\n        self.recipient = UserClass(\n            username='recipient', email='recipient@uwm.edu', first_name='Test', last_name='Recipient')\n        self.recipient.save_details()\n        self.recipient = self.recipient.get_model_instance()\n\n        self.notification_class = NotificationClass(\n            self.sender, self.recipient, 'Subject', 'Message')\n        self.notification_class.save_details()\n\n        self.invalid_class = NotificationClass(None, None, '', '')\n\n    def test_init_default(self):\n        notification_class = NotificationClass(\n            self.sender, self.recipient, 'Subject', 'Message')\n\n        self.assertEqual(notification_class.sender, self.sender)\n        self.assertEqual(notification_class.recipient, self.recipient)\n        self.assertEqual(notification_class.subject, 'Subject')\n        self.assertEqual(notification_class.message, 'Message')\n        self.assertEqual(notification_class.primary_key, None)\n    \n    def test_get_instance_default(self):\n        notification_class = NotificationClass.get_instance(self.notification_class.get_model_instance())\n\n        self.assertTrue(isinstance(notification_class, NotificationClass))\n\n        self.assertEqual(notification_class.sender, self.notification_class.sender)\n        self.assertEqual(notification_class.recipient, self.notification_class.recipient)\n        self.assertEqual(notification_class.subject, self.notification_class.subject)\n        self.assertEqual(notification_class.message, self.notification_class.message)\n        self.assertEqual(notification_class.primary_key, self.notification_class.primary_key)\n\n    def test_save_details_default(self):\n        notification = Notification.objects.get(sender=self.sender, recipient=self.recipient)\n\n        self.assertEqual(self.notification_class.sender, notification.sender)\n        self.assertEqual(self.notification_class.recipient, notification.recipient)\n        self.assertEqual(self.notification_class.subject, notification.subject)\n        self.assertEqual(self.notification_class.message, notification.message)\n\n    def test_save_details_duplicate(self):\n        notification = Notification.objects.get(sender=self.sender, recipient=self.recipient)\n        self.assertEqual(self.notification_class.primary_key, notification.id)\n\n        self.notification_class.save_details()\n        self.assertNotEqual(\n            self.notification_class.primary_key, notification.id)\n\n    def test_get_model_instance_default(self):\n        notification = self.notification_class.get_model_instance()\n\n        self.assertEqual(notification.id, self.notification_class.primary_key)\n        self.assertEqual(notification.sender, self.notification_class.sender)\n        self.assertEqual(notification.recipient,\n                         self.notification_class.recipient)\n        self.assertEqual(notification.subject, self.notification_class.subject)\n        self.assertEqual(notification.message, self.notification_class.message)\n\n    def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Notification.DoesNotExist, msg='get_model_instance does not raise Notification.DoesNotExist for non-existant notification'):\n            self.invalid_class.get_model_instance()\n\n    def test_get_sender_default(self):\n        self.assertEqual(self.notification_class.get_sender(), self.sender)\n\n    def test_get_recipient_default(self):\n        self.assertEqual(\n            self.notification_class.get_recipient(), self.recipient)\n\n    def test_get_subject_default(self):\n        self.assertEqual(self.notification_class.get_subject(), 'Subject')\n\n    def test_get_message_default(self):\n        self.assertEqual(self.notification_class.get_message(), 'Message')\n\n    def test_get_primary_key_default(self):\n        notification = self.notification_class.get_model_instance()\n        self.assertEqual(\n            self.notification_class.get_primary_key(), notification.id)", "func_code_string": "class NotificationUnitTestSuite(TestCase):\n    def setUp(self):\n        self.sender = UserClass(\n            username='sender', email='sender@uwm.edu', first_name='Test', last_name='Sender')\n        self.sender.save_details()\n        self.sender = self.sender.get_model_instance()\n\n        self.recipient = UserClass(\n            username='recipient', email='recipient@uwm.edu', first_name='Test', last_name='Recipient')\n        self.recipient.save_details()\n        self.recipient = self.recipient.get_model_instance()\n\n        self.notification_class = NotificationClass(\n            self.sender, self.recipient, 'Subject', 'Message')\n        self.notification_class.save_details()\n\n        self.invalid_class = NotificationClass(None, None, '', '')\n\n    def test_init_default(self):\n        notification_class = NotificationClass(\n            self.sender, self.recipient, 'Subject', 'Message')\n\n        self.assertEqual(notification_class.sender, self.sender)\n        self.assertEqual(notification_class.recipient, self.recipient)\n        self.assertEqual(notification_class.subject, 'Subject')\n        self.assertEqual(notification_class.message, 'Message')\n        self.assertEqual(notification_class.primary_key, None)\n    \n    def test_get_instance_default(self):\n        notification_class = NotificationClass.get_instance(self.notification_class.get_model_instance())\n\n        self.assertTrue(isinstance(notification_class, NotificationClass))\n\n        self.assertEqual(notification_class.sender, self.notification_class.sender)\n        self.assertEqual(notification_class.recipient, self.notification_class.recipient)\n        self.assertEqual(notification_class.subject, self.notification_class.subject)\n        self.assertEqual(notification_class.message, self.notification_class.message)\n        self.assertEqual(notification_class.primary_key, self.notification_class.primary_key)\n\n    def test_save_details_default(self):\n        notification = Notification.objects.get(sender=self.sender, recipient=self.recipient)\n\n        self.assertEqual(self.notification_class.sender, notification.sender)\n        self.assertEqual(self.notification_class.recipient, notification.recipient)\n        self.assertEqual(self.notification_class.subject, notification.subject)\n        self.assertEqual(self.notification_class.message, notification.message)\n\n    def test_save_details_duplicate(self):\n        notification = Notification.objects.get(sender=self.sender, recipient=self.recipient)\n        self.assertEqual(self.notification_class.primary_key, notification.id)\n\n        self.notification_class.save_details()\n        self.assertNotEqual(\n            self.notification_class.primary_key, notification.id)\n\n    def test_get_model_instance_default(self):\n        notification = self.notification_class.get_model_instance()\n\n        self.assertEqual(notification.id, self.notification_class.primary_key)\n        self.assertEqual(notification.sender, self.notification_class.sender)\n        self.assertEqual(notification.recipient,\n                         self.notification_class.recipient)\n        self.assertEqual(notification.subject, self.notification_class.subject)\n        self.assertEqual(notification.message, self.notification_class.message)\n\n    def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Notification.DoesNotExist, msg='get_model_instance does not raise Notification.DoesNotExist for non-existant notification'):\n            self.invalid_class.get_model_instance()\n\n    def test_get_sender_default(self):\n        self.assertEqual(self.notification_class.get_sender(), self.sender)\n\n    def test_get_recipient_default(self):\n        self.assertEqual(\n            self.notification_class.get_recipient(), self.recipient)\n\n    def test_get_subject_default(self):\n        self.assertEqual(self.notification_class.get_subject(), 'Subject')\n\n    def test_get_message_default(self):\n        self.assertEqual(self.notification_class.get_message(), 'Message')\n\n    def test_get_primary_key_default(self):\n        notification = self.notification_class.get_model_instance()\n        self.assertEqual(\n            self.notification_class.get_primary_key(), notification.id)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n        self.sender = UserClass(\n            username='sender', email='sender@uwm.edu', first_name='Test', last_name='Sender')\n        self.sender.save_details()\n        self.sender = self.sender.get_model_instance()\n\n        self.recipient = UserClass(\n            username='recipient', email='recipient@uwm.edu', first_name='Test', last_name='Recipient')\n        self.recipient.save_details()\n        self.recipient = self.recipient.get_model_instance()\n\n        self.notification_class = NotificationClass(\n            self.sender, self.recipient, 'Subject', 'Message')\n        self.notification_class.save_details()\n\n        self.invalid_class = NotificationClass(None, None, '', '')", "func_code_string": "def setUp(self):\n        self.sender = UserClass(\n            username='sender', email='sender@uwm.edu', first_name='Test', last_name='Sender')\n        self.sender.save_details()\n        self.sender = self.sender.get_model_instance()\n\n        self.recipient = UserClass(\n            username='recipient', email='recipient@uwm.edu', first_name='Test', last_name='Recipient')\n        self.recipient.save_details()\n        self.recipient = self.recipient.get_model_instance()\n\n        self.notification_class = NotificationClass(\n            self.sender, self.recipient, 'Subject', 'Message')\n        self.notification_class.save_details()\n\n        self.invalid_class = NotificationClass(None, None, '', '')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_init_default", "whole_func_string": "def test_init_default(self):\n        notification_class = NotificationClass(\n            self.sender, self.recipient, 'Subject', 'Message')\n\n        self.assertEqual(notification_class.sender, self.sender)\n        self.assertEqual(notification_class.recipient, self.recipient)\n        self.assertEqual(notification_class.subject, 'Subject')\n        self.assertEqual(notification_class.message, 'Message')\n        self.assertEqual(notification_class.primary_key, None)", "func_code_string": "def test_init_default(self):\n        notification_class = NotificationClass(\n            self.sender, self.recipient, 'Subject', 'Message')\n\n        self.assertEqual(notification_class.sender, self.sender)\n        self.assertEqual(notification_class.recipient, self.recipient)\n        self.assertEqual(notification_class.subject, 'Subject')\n        self.assertEqual(notification_class.message, 'Message')\n        self.assertEqual(notification_class.primary_key, None)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_get_instance_default", "whole_func_string": "def test_get_instance_default(self):\n        notification_class = NotificationClass.get_instance(self.notification_class.get_model_instance())\n\n        self.assertTrue(isinstance(notification_class, NotificationClass))\n\n        self.assertEqual(notification_class.sender, self.notification_class.sender)\n        self.assertEqual(notification_class.recipient, self.notification_class.recipient)\n        self.assertEqual(notification_class.subject, self.notification_class.subject)\n        self.assertEqual(notification_class.message, self.notification_class.message)\n        self.assertEqual(notification_class.primary_key, self.notification_class.primary_key)", "func_code_string": "def test_get_instance_default(self):\n        notification_class = NotificationClass.get_instance(self.notification_class.get_model_instance())\n\n        self.assertTrue(isinstance(notification_class, NotificationClass))\n\n        self.assertEqual(notification_class.sender, self.notification_class.sender)\n        self.assertEqual(notification_class.recipient, self.notification_class.recipient)\n        self.assertEqual(notification_class.subject, self.notification_class.subject)\n        self.assertEqual(notification_class.message, self.notification_class.message)\n        self.assertEqual(notification_class.primary_key, self.notification_class.primary_key)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_save_details_default", "whole_func_string": "def test_save_details_default(self):\n        notification = Notification.objects.get(sender=self.sender, recipient=self.recipient)\n\n        self.assertEqual(self.notification_class.sender, notification.sender)\n        self.assertEqual(self.notification_class.recipient, notification.recipient)\n        self.assertEqual(self.notification_class.subject, notification.subject)\n        self.assertEqual(self.notification_class.message, notification.message)", "func_code_string": "def test_save_details_default(self):\n        notification = Notification.objects.get(sender=self.sender, recipient=self.recipient)\n\n        self.assertEqual(self.notification_class.sender, notification.sender)\n        self.assertEqual(self.notification_class.recipient, notification.recipient)\n        self.assertEqual(self.notification_class.subject, notification.subject)\n        self.assertEqual(self.notification_class.message, notification.message)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_save_details_duplicate", "whole_func_string": "def test_save_details_duplicate(self):\n        notification = Notification.objects.get(sender=self.sender, recipient=self.recipient)\n        self.assertEqual(self.notification_class.primary_key, notification.id)\n\n        self.notification_class.save_details()\n        self.assertNotEqual(\n            self.notification_class.primary_key, notification.id)", "func_code_string": "def test_save_details_duplicate(self):\n        notification = Notification.objects.get(sender=self.sender, recipient=self.recipient)\n        self.assertEqual(self.notification_class.primary_key, notification.id)\n\n        self.notification_class.save_details()\n        self.assertNotEqual(\n            self.notification_class.primary_key, notification.id)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_get_model_instance_default", "whole_func_string": "def test_get_model_instance_default(self):\n        notification = self.notification_class.get_model_instance()\n\n        self.assertEqual(notification.id, self.notification_class.primary_key)\n        self.assertEqual(notification.sender, self.notification_class.sender)\n        self.assertEqual(notification.recipient,\n                         self.notification_class.recipient)\n        self.assertEqual(notification.subject, self.notification_class.subject)\n        self.assertEqual(notification.message, self.notification_class.message)", "func_code_string": "def test_get_model_instance_default(self):\n        notification = self.notification_class.get_model_instance()\n\n        self.assertEqual(notification.id, self.notification_class.primary_key)\n        self.assertEqual(notification.sender, self.notification_class.sender)\n        self.assertEqual(notification.recipient,\n                         self.notification_class.recipient)\n        self.assertEqual(notification.subject, self.notification_class.subject)\n        self.assertEqual(notification.message, self.notification_class.message)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_get_model_instance_does_not_exist", "whole_func_string": "def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Notification.DoesNotExist, msg='get_model_instance does not raise Notification.DoesNotExist for non-existant notification'):\n            self.invalid_class.get_model_instance()", "func_code_string": "def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Notification.DoesNotExist, msg='get_model_instance does not raise Notification.DoesNotExist for non-existant notification'):\n            self.invalid_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_get_sender_default", "whole_func_string": "def test_get_sender_default(self):\n        self.assertEqual(self.notification_class.get_sender(), self.sender)", "func_code_string": "def test_get_sender_default(self):\n        self.assertEqual(self.notification_class.get_sender(), self.sender)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_get_recipient_default", "whole_func_string": "def test_get_recipient_default(self):\n        self.assertEqual(\n            self.notification_class.get_recipient(), self.recipient)", "func_code_string": "def test_get_recipient_default(self):\n        self.assertEqual(\n            self.notification_class.get_recipient(), self.recipient)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_get_subject_default", "whole_func_string": "def test_get_subject_default(self):\n        self.assertEqual(self.notification_class.get_subject(), 'Subject')", "func_code_string": "def test_get_subject_default(self):\n        self.assertEqual(self.notification_class.get_subject(), 'Subject')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_get_message_default", "whole_func_string": "def test_get_message_default(self):\n        self.assertEqual(self.notification_class.get_message(), 'Message')", "func_code_string": "def test_get_message_default(self):\n        self.assertEqual(self.notification_class.get_message(), 'Message')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_notification.py", "func_name": "test_get_primary_key_default", "whole_func_string": "def test_get_primary_key_default(self):\n        notification = self.notification_class.get_model_instance()\n        self.assertEqual(\n            self.notification_class.get_primary_key(), notification.id)", "func_code_string": "def test_get_primary_key_default(self):\n        notification = self.notification_class.get_model_instance()\n        self.assertEqual(\n            self.notification_class.get_primary_key(), notification.id)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "SupervisorUnitTestSuite", "whole_func_string": "class SupervisorUnitTestSuite(TestCase):\n    def setUp(self):\n        self.supervisor_class = SupervisorClass('supervisor', 'supervisor@uwm.edu', 'Test', 'Supervisor')\n        self.supervisor_class.save_details()\n\n        self.instructor = InstructorClass('instructor', 'instructor@uwm.edu', 'Test', 'Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass('ta', 'ta@uwm.edu', 'Test', 'TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course = CourseClass(subject='COMPSCI', number='361', name='Intro to Software Engineering')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass('891', self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n    def test_init_default(self):\n        supervisor_class = SupervisorClass('supervisor', 'supervisor@uwm.edu', 'Test', 'Supervisor',\n                                           phone_number='1111111111', home_address='123 Main St.')\n\n        self.assertEqual(supervisor_class.username, 'supervisor')\n        self.assertEqual(supervisor_class.email, 'supervisor@uwm.edu')\n        self.assertEqual(supervisor_class.first_name, 'Test')\n        self.assertEqual(supervisor_class.last_name, 'Supervisor')\n        self.assertEqual(supervisor_class.phone_number, '1111111111')\n        self.assertEqual(supervisor_class.home_address, '123 Main St.')\n        self.assertEqual(supervisor_class.courses, [])\n        self.assertEqual(supervisor_class.sent_notifications, [])\n        self.assertEqual(supervisor_class.received_notifications, [])\n\n    def test_get_instance_default(self):\n        supervisor_class = SupervisorClass.get_instance(self.supervisor_class.get_model_instance())\n\n        self.assertTrue(isinstance(supervisor_class, SupervisorClass))\n\n        self.assertEqual(supervisor_class.username, self.supervisor_class.username)\n        self.assertEqual(supervisor_class.email, self.supervisor_class.email)\n        self.assertEqual(supervisor_class.first_name, self.supervisor_class.first_name)\n        self.assertEqual(supervisor_class.last_name, self.supervisor_class.last_name)\n        self.assertEqual(supervisor_class.role, self.supervisor_class.role)\n        self.assertEqual(supervisor_class.courses, self.supervisor_class.courses)\n        self.assertEqual(supervisor_class.sent_notifications, self.supervisor_class.sent_notifications)\n        self.assertEqual(supervisor_class.received_notifications, self.supervisor_class.received_notifications)\n\n    def test_get_courses(self):\n        self.assertEqual(list(self.supervisor_class.get_courses()), [self.course])\n\n    def test_has_course_default(self):\n        courses = Course.objects.all()\n\n        for course in courses:\n            self.assertTrue(self.supervisor_class.has_course(course))\n\n    def test_has_course_true(self):\n        self.assertEqual(self.supervisor_class.has_course(self.course), True)\n\n    def test_has_course_false(self):\n        invalid_course = Course(subject='ELECENG', number='330', name='Electronics 1')\n        self.assertFalse(self.supervisor_class.has_course(invalid_course))\n\n    def test_get_sections(self):\n        all_sections = self.supervisor_class.get_sections()\n        self.assertEqual(list(all_sections), [self.section])\n\n    def test_has_section_true(self):\n        self.assertTrue(self.supervisor_class.has_section(self.section))\n\n    def test_has_section_false(self):\n        invalid_section = SectionClass('801', self.course)\n        self.assertFalse(self.supervisor_class.has_section(invalid_section))\n\n    def test_create_user_default(self):\n        user = self.supervisor_class.create_user('test', 'test@uwm.edu', 'foobar123', 'Test', 'User')\n\n        self.assertTrue(user.check_password('foobar123'))\n\n        self.assertEqual(user.username, 'test')\n        self.assertEqual(user.email, 'test@uwm.edu')\n        self.assertEqual(user.first_name, 'Test')\n        self.assertEqual(user.last_name, 'User')\n        self.assertEqual(user.role, Role.TA)\n        self.assertEqual(user.phone_number, None)\n        self.assertEqual(user.home_address, None)\n        self.assertEqual(list(user.courses.all()), [])\n        self.assertEqual(list(user.sent_notifications.all()), [])\n        self.assertEqual(list(user.received_notifications.all()), [])\n\n    def test_delete_user_default(self):\n        user = UserClass('test', 'test@uwm.edu', 'Test', 'User')\n        user.save_details()\n        user = user.get_model_instance()\n\n        self.supervisor_class.delete_user(user)\n\n        with self.assertRaises(User.DoesNotExist, msg='delete_user fails to delete the user from the db'):\n            user_class = UserClass.get_instance(user)\n            user_class.get_model_instance()\n    \n    def test_delete_user_does_not_exist(self):\n        invalid_user = UserClass('invalid', 'invalid@uwm.edu', 'Invalid', 'User')\n\n        with self.assertRaises(AttributeError, msg='delete_user does not raise AttributeError for non-existant user'):\n            self.supervisor_class.delete_user(invalid_user)\n\n    def test_edit_user_default(self):\n        self.ta = self.supervisor_class.edit_user(self.ta, 'test', 'test@uwm.edu', 'foobar123', 'Test', 'User', Role.SUPERVISOR)\n\n        self.assertTrue(self.ta.check_password('foobar123'))\n\n        self.assertEqual(self.ta.username, 'test')\n        self.assertEqual(self.ta.email, 'test@uwm.edu')\n        self.assertEqual(self.ta.first_name, 'Test')\n        self.assertEqual(self.ta.last_name, 'User')\n        self.assertEqual(self.ta.role, Role.SUPERVISOR)\n        self.assertEqual(self.ta.phone_number, None)\n        self.assertEqual(self.ta.home_address, None)\n\n    def test_create_course_default(self):\n        course = self.supervisor_class.create_course('COMPSCI', '337', 'Systems Programming', self.instructor)\n        \n        self.assertEqual(course.subject, 'COMPSCI')\n        self.assertEqual(course.number, '337')\n        self.assertEqual(course.name, 'Systems Programming')\n        self.assertEqual(course.instructor, self.instructor)\n\n    def test_delete_course_default(self):\n        course = CourseClass('COMPSCI', '337', 'Systems Programming', self.instructor)\n        course.save_details()\n        course = course.get_model_instance()\n\n        self.supervisor_class.delete_course(course)\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete_course fails to delete the course from the db'):\n            course_class = CourseClass.get_instance(course)\n            course_class.get_model_instance()\n\n    def test_delete_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete_course does not raise Course.DoesNotExist for non-existant course'):\n            self.supervisor_class.delete_course(invalid)\n\n    def test_edit_course_default(self):\n        self.course = self.supervisor_class.edit_course(self.course, 'COMPSCI', '337', 'Systems Programming')\n\n        self.assertEqual(self.course.subject, 'COMPSCI')\n        self.assertEqual(self.course.number, '337')\n        self.assertEqual(self.course.name, 'Systems Programming')\n        self.assertEqual(self.course.instructor, None)\n    \n    def test_create_section_default(self):\n        section = self.supervisor_class.create_section(self.course, '892')\n        course_class = CourseClass.get_instance(self.course)\n\n        self.assertEqual(section.number, '892')\n        self.assertEqual(section.course, self.course)\n        self.assertIn(section, course_class.get_sections())\n\n    def test_delete_section_default(self):\n        section = SectionClass('892', self.course)\n        section.save_details()\n        section = section.get_model_instance()\n\n        self.supervisor_class.delete_section(section)\n\n        with self.assertRaises(Section.DoesNotExist, msg='Failed to delete section from the db'):\n            section_class = SectionClass.get_instance(section)\n            section_class.get_model_instance()\n\n    def test_delete_section_does_not_exist(self):\n        invalid = SectionClass('0', None)\n\n        with self.assertRaises(AttributeError, msg='delete_section does not raise AttributeError for non-existant section'):\n            self.supervisor_class.delete_course(invalid)\n\n    def test_assign_instructor_course_default(self):\n        self.supervisor_class.assign_instructor_course(self.instructor, self.course)\n\n        self.assertEqual(self.course.instructor, self.instructor)\n        self.assertIn(self.course, self.instructor.courses.all())\n\n    def test_assign_instructor_course_instructor_does_not_exist(self):\n        invalid = InstructorClass('invalid', 'invalid@uwm.edu', 'Invalid', 'Instructor')\n\n        with self.assertRaises(AttributeError, msg='assign_instructor_course does not raise AttributeError for non-existant instructor'):\n            self.supervisor_class.assign_instructor_course(invalid, self.course)\n\n    def test_assign_instructor_course_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(TypeError, msg='assign_instructor_course does not raise TypeError for non-existant course'):\n            self.supervisor_class.assign_instructor_course(self.instructor, invalid)\n\n    def test_assign_ta_course_default(self):\n        self.supervisor_class.assign_ta_course(self.ta, self.course)\n\n        self.assertIn(self.course, self.ta.courses.all())\n        self.assertIn(self.ta, self.course.user_set.all())\n\n    def test_assign_ta_course_ta_does_not_exist(self):\n        invalid = TAClass('invalid', 'invalid@uwm.edu', 'Invalid', 'TA')\n\n        with self.assertRaises(AttributeError, msg='assign_ta_course does not raise AttributeError for non-existant TA'):\n            self.supervisor_class.assign_ta_course(invalid, self.course)\n\n    def test_assign_ta_course_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(TypeError, msg='assign_ta_course does not raise TypeError for non-existant course'):\n            self.supervisor_class.assign_ta_course(self.ta, invalid)\n\n    def test_send_notifications(self):\n        notifications = self.supervisor_class.send_notifications('Subject', 'Message')\n\n        supervisor = self.supervisor_class.get_model_instance()\n\n        for notification in notifications:\n            self.assertIn(notification, supervisor.sent_notifications.all())\n            self.assertNotIn(notification, supervisor.received_notifications.all())\n\n            self.assertNotIn(notification, notification.recipient.sent_notifications.all())\n            self.assertIn(notification, notification.recipient.received_notifications.all())", "func_code_string": "class SupervisorUnitTestSuite(TestCase):\n    def setUp(self):\n        self.supervisor_class = SupervisorClass('supervisor', 'supervisor@uwm.edu', 'Test', 'Supervisor')\n        self.supervisor_class.save_details()\n\n        self.instructor = InstructorClass('instructor', 'instructor@uwm.edu', 'Test', 'Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass('ta', 'ta@uwm.edu', 'Test', 'TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course = CourseClass(subject='COMPSCI', number='361', name='Intro to Software Engineering')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass('891', self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n    def test_init_default(self):\n        supervisor_class = SupervisorClass('supervisor', 'supervisor@uwm.edu', 'Test', 'Supervisor',\n                                           phone_number='1111111111', home_address='123 Main St.')\n\n        self.assertEqual(supervisor_class.username, 'supervisor')\n        self.assertEqual(supervisor_class.email, 'supervisor@uwm.edu')\n        self.assertEqual(supervisor_class.first_name, 'Test')\n        self.assertEqual(supervisor_class.last_name, 'Supervisor')\n        self.assertEqual(supervisor_class.phone_number, '1111111111')\n        self.assertEqual(supervisor_class.home_address, '123 Main St.')\n        self.assertEqual(supervisor_class.courses, [])\n        self.assertEqual(supervisor_class.sent_notifications, [])\n        self.assertEqual(supervisor_class.received_notifications, [])\n\n    def test_get_instance_default(self):\n        supervisor_class = SupervisorClass.get_instance(self.supervisor_class.get_model_instance())\n\n        self.assertTrue(isinstance(supervisor_class, SupervisorClass))\n\n        self.assertEqual(supervisor_class.username, self.supervisor_class.username)\n        self.assertEqual(supervisor_class.email, self.supervisor_class.email)\n        self.assertEqual(supervisor_class.first_name, self.supervisor_class.first_name)\n        self.assertEqual(supervisor_class.last_name, self.supervisor_class.last_name)\n        self.assertEqual(supervisor_class.role, self.supervisor_class.role)\n        self.assertEqual(supervisor_class.courses, self.supervisor_class.courses)\n        self.assertEqual(supervisor_class.sent_notifications, self.supervisor_class.sent_notifications)\n        self.assertEqual(supervisor_class.received_notifications, self.supervisor_class.received_notifications)\n\n    def test_get_courses(self):\n        self.assertEqual(list(self.supervisor_class.get_courses()), [self.course])\n\n    def test_has_course_default(self):\n        courses = Course.objects.all()\n\n        for course in courses:\n            self.assertTrue(self.supervisor_class.has_course(course))\n\n    def test_has_course_true(self):\n        self.assertEqual(self.supervisor_class.has_course(self.course), True)\n\n    def test_has_course_false(self):\n        invalid_course = Course(subject='ELECENG', number='330', name='Electronics 1')\n        self.assertFalse(self.supervisor_class.has_course(invalid_course))\n\n    def test_get_sections(self):\n        all_sections = self.supervisor_class.get_sections()\n        self.assertEqual(list(all_sections), [self.section])\n\n    def test_has_section_true(self):\n        self.assertTrue(self.supervisor_class.has_section(self.section))\n\n    def test_has_section_false(self):\n        invalid_section = SectionClass('801', self.course)\n        self.assertFalse(self.supervisor_class.has_section(invalid_section))\n\n    def test_create_user_default(self):\n        user = self.supervisor_class.create_user('test', 'test@uwm.edu', 'foobar123', 'Test', 'User')\n\n        self.assertTrue(user.check_password('foobar123'))\n\n        self.assertEqual(user.username, 'test')\n        self.assertEqual(user.email, 'test@uwm.edu')\n        self.assertEqual(user.first_name, 'Test')\n        self.assertEqual(user.last_name, 'User')\n        self.assertEqual(user.role, Role.TA)\n        self.assertEqual(user.phone_number, None)\n        self.assertEqual(user.home_address, None)\n        self.assertEqual(list(user.courses.all()), [])\n        self.assertEqual(list(user.sent_notifications.all()), [])\n        self.assertEqual(list(user.received_notifications.all()), [])\n\n    def test_delete_user_default(self):\n        user = UserClass('test', 'test@uwm.edu', 'Test', 'User')\n        user.save_details()\n        user = user.get_model_instance()\n\n        self.supervisor_class.delete_user(user)\n\n        with self.assertRaises(User.DoesNotExist, msg='delete_user fails to delete the user from the db'):\n            user_class = UserClass.get_instance(user)\n            user_class.get_model_instance()\n    \n    def test_delete_user_does_not_exist(self):\n        invalid_user = UserClass('invalid', 'invalid@uwm.edu', 'Invalid', 'User')\n\n        with self.assertRaises(AttributeError, msg='delete_user does not raise AttributeError for non-existant user'):\n            self.supervisor_class.delete_user(invalid_user)\n\n    def test_edit_user_default(self):\n        self.ta = self.supervisor_class.edit_user(self.ta, 'test', 'test@uwm.edu', 'foobar123', 'Test', 'User', Role.SUPERVISOR)\n\n        self.assertTrue(self.ta.check_password('foobar123'))\n\n        self.assertEqual(self.ta.username, 'test')\n        self.assertEqual(self.ta.email, 'test@uwm.edu')\n        self.assertEqual(self.ta.first_name, 'Test')\n        self.assertEqual(self.ta.last_name, 'User')\n        self.assertEqual(self.ta.role, Role.SUPERVISOR)\n        self.assertEqual(self.ta.phone_number, None)\n        self.assertEqual(self.ta.home_address, None)\n\n    def test_create_course_default(self):\n        course = self.supervisor_class.create_course('COMPSCI', '337', 'Systems Programming', self.instructor)\n        \n        self.assertEqual(course.subject, 'COMPSCI')\n        self.assertEqual(course.number, '337')\n        self.assertEqual(course.name, 'Systems Programming')\n        self.assertEqual(course.instructor, self.instructor)\n\n    def test_delete_course_default(self):\n        course = CourseClass('COMPSCI', '337', 'Systems Programming', self.instructor)\n        course.save_details()\n        course = course.get_model_instance()\n\n        self.supervisor_class.delete_course(course)\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete_course fails to delete the course from the db'):\n            course_class = CourseClass.get_instance(course)\n            course_class.get_model_instance()\n\n    def test_delete_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete_course does not raise Course.DoesNotExist for non-existant course'):\n            self.supervisor_class.delete_course(invalid)\n\n    def test_edit_course_default(self):\n        self.course = self.supervisor_class.edit_course(self.course, 'COMPSCI', '337', 'Systems Programming')\n\n        self.assertEqual(self.course.subject, 'COMPSCI')\n        self.assertEqual(self.course.number, '337')\n        self.assertEqual(self.course.name, 'Systems Programming')\n        self.assertEqual(self.course.instructor, None)\n    \n    def test_create_section_default(self):\n        section = self.supervisor_class.create_section(self.course, '892')\n        course_class = CourseClass.get_instance(self.course)\n\n        self.assertEqual(section.number, '892')\n        self.assertEqual(section.course, self.course)\n        self.assertIn(section, course_class.get_sections())\n\n    def test_delete_section_default(self):\n        section = SectionClass('892', self.course)\n        section.save_details()\n        section = section.get_model_instance()\n\n        self.supervisor_class.delete_section(section)\n\n        with self.assertRaises(Section.DoesNotExist, msg='Failed to delete section from the db'):\n            section_class = SectionClass.get_instance(section)\n            section_class.get_model_instance()\n\n    def test_delete_section_does_not_exist(self):\n        invalid = SectionClass('0', None)\n\n        with self.assertRaises(AttributeError, msg='delete_section does not raise AttributeError for non-existant section'):\n            self.supervisor_class.delete_course(invalid)\n\n    def test_assign_instructor_course_default(self):\n        self.supervisor_class.assign_instructor_course(self.instructor, self.course)\n\n        self.assertEqual(self.course.instructor, self.instructor)\n        self.assertIn(self.course, self.instructor.courses.all())\n\n    def test_assign_instructor_course_instructor_does_not_exist(self):\n        invalid = InstructorClass('invalid', 'invalid@uwm.edu', 'Invalid', 'Instructor')\n\n        with self.assertRaises(AttributeError, msg='assign_instructor_course does not raise AttributeError for non-existant instructor'):\n            self.supervisor_class.assign_instructor_course(invalid, self.course)\n\n    def test_assign_instructor_course_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(TypeError, msg='assign_instructor_course does not raise TypeError for non-existant course'):\n            self.supervisor_class.assign_instructor_course(self.instructor, invalid)\n\n    def test_assign_ta_course_default(self):\n        self.supervisor_class.assign_ta_course(self.ta, self.course)\n\n        self.assertIn(self.course, self.ta.courses.all())\n        self.assertIn(self.ta, self.course.user_set.all())\n\n    def test_assign_ta_course_ta_does_not_exist(self):\n        invalid = TAClass('invalid', 'invalid@uwm.edu', 'Invalid', 'TA')\n\n        with self.assertRaises(AttributeError, msg='assign_ta_course does not raise AttributeError for non-existant TA'):\n            self.supervisor_class.assign_ta_course(invalid, self.course)\n\n    def test_assign_ta_course_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(TypeError, msg='assign_ta_course does not raise TypeError for non-existant course'):\n            self.supervisor_class.assign_ta_course(self.ta, invalid)\n\n    def test_send_notifications(self):\n        notifications = self.supervisor_class.send_notifications('Subject', 'Message')\n\n        supervisor = self.supervisor_class.get_model_instance()\n\n        for notification in notifications:\n            self.assertIn(notification, supervisor.sent_notifications.all())\n            self.assertNotIn(notification, supervisor.received_notifications.all())\n\n            self.assertNotIn(notification, notification.recipient.sent_notifications.all())\n            self.assertIn(notification, notification.recipient.received_notifications.all())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n        self.supervisor_class = SupervisorClass('supervisor', 'supervisor@uwm.edu', 'Test', 'Supervisor')\n        self.supervisor_class.save_details()\n\n        self.instructor = InstructorClass('instructor', 'instructor@uwm.edu', 'Test', 'Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass('ta', 'ta@uwm.edu', 'Test', 'TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course = CourseClass(subject='COMPSCI', number='361', name='Intro to Software Engineering')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass('891', self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()", "func_code_string": "def setUp(self):\n        self.supervisor_class = SupervisorClass('supervisor', 'supervisor@uwm.edu', 'Test', 'Supervisor')\n        self.supervisor_class.save_details()\n\n        self.instructor = InstructorClass('instructor', 'instructor@uwm.edu', 'Test', 'Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass('ta', 'ta@uwm.edu', 'Test', 'TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course = CourseClass(subject='COMPSCI', number='361', name='Intro to Software Engineering')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass('891', self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_init_default", "whole_func_string": "def test_init_default(self):\n        supervisor_class = SupervisorClass('supervisor', 'supervisor@uwm.edu', 'Test', 'Supervisor',\n                                           phone_number='1111111111', home_address='123 Main St.')\n\n        self.assertEqual(supervisor_class.username, 'supervisor')\n        self.assertEqual(supervisor_class.email, 'supervisor@uwm.edu')\n        self.assertEqual(supervisor_class.first_name, 'Test')\n        self.assertEqual(supervisor_class.last_name, 'Supervisor')\n        self.assertEqual(supervisor_class.phone_number, '1111111111')\n        self.assertEqual(supervisor_class.home_address, '123 Main St.')\n        self.assertEqual(supervisor_class.courses, [])\n        self.assertEqual(supervisor_class.sent_notifications, [])\n        self.assertEqual(supervisor_class.received_notifications, [])", "func_code_string": "def test_init_default(self):\n        supervisor_class = SupervisorClass('supervisor', 'supervisor@uwm.edu', 'Test', 'Supervisor',\n                                           phone_number='1111111111', home_address='123 Main St.')\n\n        self.assertEqual(supervisor_class.username, 'supervisor')\n        self.assertEqual(supervisor_class.email, 'supervisor@uwm.edu')\n        self.assertEqual(supervisor_class.first_name, 'Test')\n        self.assertEqual(supervisor_class.last_name, 'Supervisor')\n        self.assertEqual(supervisor_class.phone_number, '1111111111')\n        self.assertEqual(supervisor_class.home_address, '123 Main St.')\n        self.assertEqual(supervisor_class.courses, [])\n        self.assertEqual(supervisor_class.sent_notifications, [])\n        self.assertEqual(supervisor_class.received_notifications, [])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_get_instance_default", "whole_func_string": "def test_get_instance_default(self):\n        supervisor_class = SupervisorClass.get_instance(self.supervisor_class.get_model_instance())\n\n        self.assertTrue(isinstance(supervisor_class, SupervisorClass))\n\n        self.assertEqual(supervisor_class.username, self.supervisor_class.username)\n        self.assertEqual(supervisor_class.email, self.supervisor_class.email)\n        self.assertEqual(supervisor_class.first_name, self.supervisor_class.first_name)\n        self.assertEqual(supervisor_class.last_name, self.supervisor_class.last_name)\n        self.assertEqual(supervisor_class.role, self.supervisor_class.role)\n        self.assertEqual(supervisor_class.courses, self.supervisor_class.courses)\n        self.assertEqual(supervisor_class.sent_notifications, self.supervisor_class.sent_notifications)\n        self.assertEqual(supervisor_class.received_notifications, self.supervisor_class.received_notifications)", "func_code_string": "def test_get_instance_default(self):\n        supervisor_class = SupervisorClass.get_instance(self.supervisor_class.get_model_instance())\n\n        self.assertTrue(isinstance(supervisor_class, SupervisorClass))\n\n        self.assertEqual(supervisor_class.username, self.supervisor_class.username)\n        self.assertEqual(supervisor_class.email, self.supervisor_class.email)\n        self.assertEqual(supervisor_class.first_name, self.supervisor_class.first_name)\n        self.assertEqual(supervisor_class.last_name, self.supervisor_class.last_name)\n        self.assertEqual(supervisor_class.role, self.supervisor_class.role)\n        self.assertEqual(supervisor_class.courses, self.supervisor_class.courses)\n        self.assertEqual(supervisor_class.sent_notifications, self.supervisor_class.sent_notifications)\n        self.assertEqual(supervisor_class.received_notifications, self.supervisor_class.received_notifications)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_get_courses", "whole_func_string": "def test_get_courses(self):\n        self.assertEqual(list(self.supervisor_class.get_courses()), [self.course])", "func_code_string": "def test_get_courses(self):\n        self.assertEqual(list(self.supervisor_class.get_courses()), [self.course])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_has_course_default", "whole_func_string": "def test_has_course_default(self):\n        courses = Course.objects.all()\n\n        for course in courses:\n            self.assertTrue(self.supervisor_class.has_course(course))", "func_code_string": "def test_has_course_default(self):\n        courses = Course.objects.all()\n\n        for course in courses:\n            self.assertTrue(self.supervisor_class.has_course(course))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_has_course_true", "whole_func_string": "def test_has_course_true(self):\n        self.assertEqual(self.supervisor_class.has_course(self.course), True)", "func_code_string": "def test_has_course_true(self):\n        self.assertEqual(self.supervisor_class.has_course(self.course), True)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_has_course_false", "whole_func_string": "def test_has_course_false(self):\n        invalid_course = Course(subject='ELECENG', number='330', name='Electronics 1')\n        self.assertFalse(self.supervisor_class.has_course(invalid_course))", "func_code_string": "def test_has_course_false(self):\n        invalid_course = Course(subject='ELECENG', number='330', name='Electronics 1')\n        self.assertFalse(self.supervisor_class.has_course(invalid_course))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_get_sections", "whole_func_string": "def test_get_sections(self):\n        all_sections = self.supervisor_class.get_sections()\n        self.assertEqual(list(all_sections), [self.section])", "func_code_string": "def test_get_sections(self):\n        all_sections = self.supervisor_class.get_sections()\n        self.assertEqual(list(all_sections), [self.section])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_has_section_true", "whole_func_string": "def test_has_section_true(self):\n        self.assertTrue(self.supervisor_class.has_section(self.section))", "func_code_string": "def test_has_section_true(self):\n        self.assertTrue(self.supervisor_class.has_section(self.section))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_has_section_false", "whole_func_string": "def test_has_section_false(self):\n        invalid_section = SectionClass('801', self.course)\n        self.assertFalse(self.supervisor_class.has_section(invalid_section))", "func_code_string": "def test_has_section_false(self):\n        invalid_section = SectionClass('801', self.course)\n        self.assertFalse(self.supervisor_class.has_section(invalid_section))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_create_user_default", "whole_func_string": "def test_create_user_default(self):\n        user = self.supervisor_class.create_user('test', 'test@uwm.edu', 'foobar123', 'Test', 'User')\n\n        self.assertTrue(user.check_password('foobar123'))\n\n        self.assertEqual(user.username, 'test')\n        self.assertEqual(user.email, 'test@uwm.edu')\n        self.assertEqual(user.first_name, 'Test')\n        self.assertEqual(user.last_name, 'User')\n        self.assertEqual(user.role, Role.TA)\n        self.assertEqual(user.phone_number, None)\n        self.assertEqual(user.home_address, None)\n        self.assertEqual(list(user.courses.all()), [])\n        self.assertEqual(list(user.sent_notifications.all()), [])\n        self.assertEqual(list(user.received_notifications.all()), [])", "func_code_string": "def test_create_user_default(self):\n        user = self.supervisor_class.create_user('test', 'test@uwm.edu', 'foobar123', 'Test', 'User')\n\n        self.assertTrue(user.check_password('foobar123'))\n\n        self.assertEqual(user.username, 'test')\n        self.assertEqual(user.email, 'test@uwm.edu')\n        self.assertEqual(user.first_name, 'Test')\n        self.assertEqual(user.last_name, 'User')\n        self.assertEqual(user.role, Role.TA)\n        self.assertEqual(user.phone_number, None)\n        self.assertEqual(user.home_address, None)\n        self.assertEqual(list(user.courses.all()), [])\n        self.assertEqual(list(user.sent_notifications.all()), [])\n        self.assertEqual(list(user.received_notifications.all()), [])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_delete_user_default", "whole_func_string": "def test_delete_user_default(self):\n        user = UserClass('test', 'test@uwm.edu', 'Test', 'User')\n        user.save_details()\n        user = user.get_model_instance()\n\n        self.supervisor_class.delete_user(user)\n\n        with self.assertRaises(User.DoesNotExist, msg='delete_user fails to delete the user from the db'):\n            user_class = UserClass.get_instance(user)\n            user_class.get_model_instance()", "func_code_string": "def test_delete_user_default(self):\n        user = UserClass('test', 'test@uwm.edu', 'Test', 'User')\n        user.save_details()\n        user = user.get_model_instance()\n\n        self.supervisor_class.delete_user(user)\n\n        with self.assertRaises(User.DoesNotExist, msg='delete_user fails to delete the user from the db'):\n            user_class = UserClass.get_instance(user)\n            user_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_delete_user_does_not_exist", "whole_func_string": "def test_delete_user_does_not_exist(self):\n        invalid_user = UserClass('invalid', 'invalid@uwm.edu', 'Invalid', 'User')\n\n        with self.assertRaises(AttributeError, msg='delete_user does not raise AttributeError for non-existant user'):\n            self.supervisor_class.delete_user(invalid_user)", "func_code_string": "def test_delete_user_does_not_exist(self):\n        invalid_user = UserClass('invalid', 'invalid@uwm.edu', 'Invalid', 'User')\n\n        with self.assertRaises(AttributeError, msg='delete_user does not raise AttributeError for non-existant user'):\n            self.supervisor_class.delete_user(invalid_user)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_edit_user_default", "whole_func_string": "def test_edit_user_default(self):\n        self.ta = self.supervisor_class.edit_user(self.ta, 'test', 'test@uwm.edu', 'foobar123', 'Test', 'User', Role.SUPERVISOR)\n\n        self.assertTrue(self.ta.check_password('foobar123'))\n\n        self.assertEqual(self.ta.username, 'test')\n        self.assertEqual(self.ta.email, 'test@uwm.edu')\n        self.assertEqual(self.ta.first_name, 'Test')\n        self.assertEqual(self.ta.last_name, 'User')\n        self.assertEqual(self.ta.role, Role.SUPERVISOR)\n        self.assertEqual(self.ta.phone_number, None)\n        self.assertEqual(self.ta.home_address, None)", "func_code_string": "def test_edit_user_default(self):\n        self.ta = self.supervisor_class.edit_user(self.ta, 'test', 'test@uwm.edu', 'foobar123', 'Test', 'User', Role.SUPERVISOR)\n\n        self.assertTrue(self.ta.check_password('foobar123'))\n\n        self.assertEqual(self.ta.username, 'test')\n        self.assertEqual(self.ta.email, 'test@uwm.edu')\n        self.assertEqual(self.ta.first_name, 'Test')\n        self.assertEqual(self.ta.last_name, 'User')\n        self.assertEqual(self.ta.role, Role.SUPERVISOR)\n        self.assertEqual(self.ta.phone_number, None)\n        self.assertEqual(self.ta.home_address, None)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_create_course_default", "whole_func_string": "def test_create_course_default(self):\n        course = self.supervisor_class.create_course('COMPSCI', '337', 'Systems Programming', self.instructor)\n        \n        self.assertEqual(course.subject, 'COMPSCI')\n        self.assertEqual(course.number, '337')\n        self.assertEqual(course.name, 'Systems Programming')\n        self.assertEqual(course.instructor, self.instructor)", "func_code_string": "def test_create_course_default(self):\n        course = self.supervisor_class.create_course('COMPSCI', '337', 'Systems Programming', self.instructor)\n        \n        self.assertEqual(course.subject, 'COMPSCI')\n        self.assertEqual(course.number, '337')\n        self.assertEqual(course.name, 'Systems Programming')\n        self.assertEqual(course.instructor, self.instructor)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_delete_course_default", "whole_func_string": "def test_delete_course_default(self):\n        course = CourseClass('COMPSCI', '337', 'Systems Programming', self.instructor)\n        course.save_details()\n        course = course.get_model_instance()\n\n        self.supervisor_class.delete_course(course)\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete_course fails to delete the course from the db'):\n            course_class = CourseClass.get_instance(course)\n            course_class.get_model_instance()", "func_code_string": "def test_delete_course_default(self):\n        course = CourseClass('COMPSCI', '337', 'Systems Programming', self.instructor)\n        course.save_details()\n        course = course.get_model_instance()\n\n        self.supervisor_class.delete_course(course)\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete_course fails to delete the course from the db'):\n            course_class = CourseClass.get_instance(course)\n            course_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_delete_course_does_not_exist", "whole_func_string": "def test_delete_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete_course does not raise Course.DoesNotExist for non-existant course'):\n            self.supervisor_class.delete_course(invalid)", "func_code_string": "def test_delete_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete_course does not raise Course.DoesNotExist for non-existant course'):\n            self.supervisor_class.delete_course(invalid)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_edit_course_default", "whole_func_string": "def test_edit_course_default(self):\n        self.course = self.supervisor_class.edit_course(self.course, 'COMPSCI', '337', 'Systems Programming')\n\n        self.assertEqual(self.course.subject, 'COMPSCI')\n        self.assertEqual(self.course.number, '337')\n        self.assertEqual(self.course.name, 'Systems Programming')\n        self.assertEqual(self.course.instructor, None)", "func_code_string": "def test_edit_course_default(self):\n        self.course = self.supervisor_class.edit_course(self.course, 'COMPSCI', '337', 'Systems Programming')\n\n        self.assertEqual(self.course.subject, 'COMPSCI')\n        self.assertEqual(self.course.number, '337')\n        self.assertEqual(self.course.name, 'Systems Programming')\n        self.assertEqual(self.course.instructor, None)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_create_section_default", "whole_func_string": "def test_create_section_default(self):\n        section = self.supervisor_class.create_section(self.course, '892')\n        course_class = CourseClass.get_instance(self.course)\n\n        self.assertEqual(section.number, '892')\n        self.assertEqual(section.course, self.course)\n        self.assertIn(section, course_class.get_sections())", "func_code_string": "def test_create_section_default(self):\n        section = self.supervisor_class.create_section(self.course, '892')\n        course_class = CourseClass.get_instance(self.course)\n\n        self.assertEqual(section.number, '892')\n        self.assertEqual(section.course, self.course)\n        self.assertIn(section, course_class.get_sections())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_delete_section_default", "whole_func_string": "def test_delete_section_default(self):\n        section = SectionClass('892', self.course)\n        section.save_details()\n        section = section.get_model_instance()\n\n        self.supervisor_class.delete_section(section)\n\n        with self.assertRaises(Section.DoesNotExist, msg='Failed to delete section from the db'):\n            section_class = SectionClass.get_instance(section)\n            section_class.get_model_instance()", "func_code_string": "def test_delete_section_default(self):\n        section = SectionClass('892', self.course)\n        section.save_details()\n        section = section.get_model_instance()\n\n        self.supervisor_class.delete_section(section)\n\n        with self.assertRaises(Section.DoesNotExist, msg='Failed to delete section from the db'):\n            section_class = SectionClass.get_instance(section)\n            section_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_delete_section_does_not_exist", "whole_func_string": "def test_delete_section_does_not_exist(self):\n        invalid = SectionClass('0', None)\n\n        with self.assertRaises(AttributeError, msg='delete_section does not raise AttributeError for non-existant section'):\n            self.supervisor_class.delete_course(invalid)", "func_code_string": "def test_delete_section_does_not_exist(self):\n        invalid = SectionClass('0', None)\n\n        with self.assertRaises(AttributeError, msg='delete_section does not raise AttributeError for non-existant section'):\n            self.supervisor_class.delete_course(invalid)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_assign_instructor_course_default", "whole_func_string": "def test_assign_instructor_course_default(self):\n        self.supervisor_class.assign_instructor_course(self.instructor, self.course)\n\n        self.assertEqual(self.course.instructor, self.instructor)\n        self.assertIn(self.course, self.instructor.courses.all())", "func_code_string": "def test_assign_instructor_course_default(self):\n        self.supervisor_class.assign_instructor_course(self.instructor, self.course)\n\n        self.assertEqual(self.course.instructor, self.instructor)\n        self.assertIn(self.course, self.instructor.courses.all())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_assign_instructor_course_instructor_does_not_exist", "whole_func_string": "def test_assign_instructor_course_instructor_does_not_exist(self):\n        invalid = InstructorClass('invalid', 'invalid@uwm.edu', 'Invalid', 'Instructor')\n\n        with self.assertRaises(AttributeError, msg='assign_instructor_course does not raise AttributeError for non-existant instructor'):\n            self.supervisor_class.assign_instructor_course(invalid, self.course)", "func_code_string": "def test_assign_instructor_course_instructor_does_not_exist(self):\n        invalid = InstructorClass('invalid', 'invalid@uwm.edu', 'Invalid', 'Instructor')\n\n        with self.assertRaises(AttributeError, msg='assign_instructor_course does not raise AttributeError for non-existant instructor'):\n            self.supervisor_class.assign_instructor_course(invalid, self.course)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_assign_instructor_course_course_does_not_exist", "whole_func_string": "def test_assign_instructor_course_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(TypeError, msg='assign_instructor_course does not raise TypeError for non-existant course'):\n            self.supervisor_class.assign_instructor_course(self.instructor, invalid)", "func_code_string": "def test_assign_instructor_course_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(TypeError, msg='assign_instructor_course does not raise TypeError for non-existant course'):\n            self.supervisor_class.assign_instructor_course(self.instructor, invalid)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_assign_ta_course_default", "whole_func_string": "def test_assign_ta_course_default(self):\n        self.supervisor_class.assign_ta_course(self.ta, self.course)\n\n        self.assertIn(self.course, self.ta.courses.all())\n        self.assertIn(self.ta, self.course.user_set.all())", "func_code_string": "def test_assign_ta_course_default(self):\n        self.supervisor_class.assign_ta_course(self.ta, self.course)\n\n        self.assertIn(self.course, self.ta.courses.all())\n        self.assertIn(self.ta, self.course.user_set.all())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_assign_ta_course_ta_does_not_exist", "whole_func_string": "def test_assign_ta_course_ta_does_not_exist(self):\n        invalid = TAClass('invalid', 'invalid@uwm.edu', 'Invalid', 'TA')\n\n        with self.assertRaises(AttributeError, msg='assign_ta_course does not raise AttributeError for non-existant TA'):\n            self.supervisor_class.assign_ta_course(invalid, self.course)", "func_code_string": "def test_assign_ta_course_ta_does_not_exist(self):\n        invalid = TAClass('invalid', 'invalid@uwm.edu', 'Invalid', 'TA')\n\n        with self.assertRaises(AttributeError, msg='assign_ta_course does not raise AttributeError for non-existant TA'):\n            self.supervisor_class.assign_ta_course(invalid, self.course)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_assign_ta_course_course_does_not_exist", "whole_func_string": "def test_assign_ta_course_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(TypeError, msg='assign_ta_course does not raise TypeError for non-existant course'):\n            self.supervisor_class.assign_ta_course(self.ta, invalid)", "func_code_string": "def test_assign_ta_course_course_does_not_exist(self):\n        invalid = CourseClass('INVALID', '0', 'Invalid')\n\n        with self.assertRaises(TypeError, msg='assign_ta_course does not raise TypeError for non-existant course'):\n            self.supervisor_class.assign_ta_course(self.ta, invalid)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_supervisor.py", "func_name": "test_send_notifications", "whole_func_string": "def test_send_notifications(self):\n        notifications = self.supervisor_class.send_notifications('Subject', 'Message')\n\n        supervisor = self.supervisor_class.get_model_instance()\n\n        for notification in notifications:\n            self.assertIn(notification, supervisor.sent_notifications.all())\n            self.assertNotIn(notification, supervisor.received_notifications.all())\n\n            self.assertNotIn(notification, notification.recipient.sent_notifications.all())\n            self.assertIn(notification, notification.recipient.received_notifications.all())", "func_code_string": "def test_send_notifications(self):\n        notifications = self.supervisor_class.send_notifications('Subject', 'Message')\n\n        supervisor = self.supervisor_class.get_model_instance()\n\n        for notification in notifications:\n            self.assertIn(notification, supervisor.sent_notifications.all())\n            self.assertNotIn(notification, supervisor.received_notifications.all())\n\n            self.assertNotIn(notification, notification.recipient.sent_notifications.all())\n            self.assertIn(notification, notification.recipient.received_notifications.all())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "CourseUnitTestSuite", "whole_func_string": "class CourseUnitTestSuite(TestCase):\n    def setUp(self):\n        self.instructor = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                                          first_name='Test', last_name='Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass(username='ta', email='ta@uwm.edu',\n                          first_name='Test', last_name='TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course_class = CourseClass(\n            'COURSE', '1', 'Course', self.instructor)\n        self.course_class.save_details()\n\n        self.invalid_class = CourseClass('INVALID', '1')\n\n    def test_init_default(self):\n        course_class = CourseClass('COURSE', '1', 'Course', self.instructor)\n\n        self.assertEqual(course_class.subject, 'COURSE')\n        self.assertEqual(course_class.number, '1')\n        self.assertEqual(course_class.name, 'Course')\n        self.assertEqual(course_class.instructor, self.instructor)\n\n    def test_save_details_default(self):\n        course = Course.objects.get(\n            subject=self.course_class.subject, number=self.course_class.number)\n\n        self.assertEqual(self.course_class.subject, course.subject)\n        self.assertEqual(self.course_class.number, course.number)\n        self.assertEqual(self.course_class.name, course.name)\n        self.assertEqual(self.course_class.instructor, course.instructor)\n\n    def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='save_details does not raise IntegrityError for duplicate course'):\n            self.course_class.save_details()\n\n    def test_get_model_instance(self):\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.subject, self.course_class.subject)\n        self.assertEqual(course.number, self.course_class.number)\n        self.assertEqual(course.name, self.course_class.name)\n        self.assertEqual(course.instructor, self.course_class.instructor)\n\n    def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Course.DoesNotExist, msg='get_model_instance does not raise Course.DoesNotExist for non-existant course'):\n            self.invalid_class.get_model_instance()\n\n    def test_get_instance_default(self):\n        course_class = CourseClass.get_instance(\n            self.course_class.get_model_instance())\n\n        self.assertTrue(isinstance(course_class, CourseClass))\n\n        self.assertEqual(course_class.subject, self.course_class.subject)\n        self.assertEqual(course_class.number, self.course_class.number)\n        self.assertEqual(course_class.name, self.course_class.name)\n        self.assertEqual(course_class.instructor, self.course_class.instructor)\n\n    def test_delete_default(self):\n        self.course_class.delete()\n\n        with self.assertRaises(Course.DoesNotExist, msg='Failed to delete the course from db'):\n            self.course_class.get_model_instance()\n\n    def test_delete_does_not_exist(self):\n        self.course_class.delete()\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete does not raise Course.DoesNotExist for non-existant course'):\n            self.course_class.delete()\n\n    def test_get_subject_default(self):\n        self.assertEqual(self.course_class.get_subject(), 'COURSE')\n\n    def test_set_subject_default(self):\n        self.course_class.set_subject('TEST')\n        self.assertEqual(self.course_class.subject, 'TEST')\n\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.subject, 'TEST')\n\n    def test_get_number_default(self):\n        self.assertEqual(self.course_class.get_number(), '1')\n\n    def test_set_number_default(self):\n        self.course_class.set_number('2')\n        self.assertEqual(self.course_class.number, '2')\n\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.number, '2')\n\n    def test_get_name_default(self):\n        self.assertEqual(self.course_class.get_name(), 'Course')\n\n    def test_set_name_default(self):\n        self.course_class.set_name('Test')\n        self.assertEqual(self.course_class.name, 'Test')\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.name, 'Test')\n\n    def test_get_instructor_default(self):\n        self.assertEqual(self.course_class.get_instructor(), self.instructor)\n\n    def test_set_instructor_default(self):\n        instructor = InstructorClass(username='test', email='test@uwm.edu',\n                                     first_name='Test', last_name='Instructor')\n        instructor.save_details()\n        instructor = instructor.get_model_instance()\n\n        self.course_class.set_instructor(instructor)\n        self.assertEqual(self.course_class.instructor, instructor)\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.instructor, instructor)\n\n    def test_set_instructor_none(self):\n        self.course_class.set_instructor(None)\n        self.assertEqual(self.course_class.instructor, None)\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.instructor, None)\n\n    def test_set_instructor_instructor_does_not_exist(self):\n        invalid_instructor = InstructorClass(\n            username='test', email='test@uwm.edu', first_name='Test', last_name='Test')\n\n        with self.assertRaises(User.DoesNotExist, msg='set_instructor does not raise User.DoesNotExist for non-existant instructor'):\n            self.invalid_class.set_instructor(\n                invalid_instructor.get_model_instance())\n\n    def test_get_tas_default(self):\n        course = self.course_class.get_model_instance()\n        course.user_set.add(self.ta)\n\n        self.assertEqual(list(self.course_class.get_tas()), [self.ta])\n    \n    def test_get_sections(self):\n        course = self.course_class.get_model_instance()\n        self.assertEqual(list(self.course_class.get_sections()), [])", "func_code_string": "class CourseUnitTestSuite(TestCase):\n    def setUp(self):\n        self.instructor = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                                          first_name='Test', last_name='Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass(username='ta', email='ta@uwm.edu',\n                          first_name='Test', last_name='TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course_class = CourseClass(\n            'COURSE', '1', 'Course', self.instructor)\n        self.course_class.save_details()\n\n        self.invalid_class = CourseClass('INVALID', '1')\n\n    def test_init_default(self):\n        course_class = CourseClass('COURSE', '1', 'Course', self.instructor)\n\n        self.assertEqual(course_class.subject, 'COURSE')\n        self.assertEqual(course_class.number, '1')\n        self.assertEqual(course_class.name, 'Course')\n        self.assertEqual(course_class.instructor, self.instructor)\n\n    def test_save_details_default(self):\n        course = Course.objects.get(\n            subject=self.course_class.subject, number=self.course_class.number)\n\n        self.assertEqual(self.course_class.subject, course.subject)\n        self.assertEqual(self.course_class.number, course.number)\n        self.assertEqual(self.course_class.name, course.name)\n        self.assertEqual(self.course_class.instructor, course.instructor)\n\n    def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='save_details does not raise IntegrityError for duplicate course'):\n            self.course_class.save_details()\n\n    def test_get_model_instance(self):\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.subject, self.course_class.subject)\n        self.assertEqual(course.number, self.course_class.number)\n        self.assertEqual(course.name, self.course_class.name)\n        self.assertEqual(course.instructor, self.course_class.instructor)\n\n    def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Course.DoesNotExist, msg='get_model_instance does not raise Course.DoesNotExist for non-existant course'):\n            self.invalid_class.get_model_instance()\n\n    def test_get_instance_default(self):\n        course_class = CourseClass.get_instance(\n            self.course_class.get_model_instance())\n\n        self.assertTrue(isinstance(course_class, CourseClass))\n\n        self.assertEqual(course_class.subject, self.course_class.subject)\n        self.assertEqual(course_class.number, self.course_class.number)\n        self.assertEqual(course_class.name, self.course_class.name)\n        self.assertEqual(course_class.instructor, self.course_class.instructor)\n\n    def test_delete_default(self):\n        self.course_class.delete()\n\n        with self.assertRaises(Course.DoesNotExist, msg='Failed to delete the course from db'):\n            self.course_class.get_model_instance()\n\n    def test_delete_does_not_exist(self):\n        self.course_class.delete()\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete does not raise Course.DoesNotExist for non-existant course'):\n            self.course_class.delete()\n\n    def test_get_subject_default(self):\n        self.assertEqual(self.course_class.get_subject(), 'COURSE')\n\n    def test_set_subject_default(self):\n        self.course_class.set_subject('TEST')\n        self.assertEqual(self.course_class.subject, 'TEST')\n\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.subject, 'TEST')\n\n    def test_get_number_default(self):\n        self.assertEqual(self.course_class.get_number(), '1')\n\n    def test_set_number_default(self):\n        self.course_class.set_number('2')\n        self.assertEqual(self.course_class.number, '2')\n\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.number, '2')\n\n    def test_get_name_default(self):\n        self.assertEqual(self.course_class.get_name(), 'Course')\n\n    def test_set_name_default(self):\n        self.course_class.set_name('Test')\n        self.assertEqual(self.course_class.name, 'Test')\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.name, 'Test')\n\n    def test_get_instructor_default(self):\n        self.assertEqual(self.course_class.get_instructor(), self.instructor)\n\n    def test_set_instructor_default(self):\n        instructor = InstructorClass(username='test', email='test@uwm.edu',\n                                     first_name='Test', last_name='Instructor')\n        instructor.save_details()\n        instructor = instructor.get_model_instance()\n\n        self.course_class.set_instructor(instructor)\n        self.assertEqual(self.course_class.instructor, instructor)\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.instructor, instructor)\n\n    def test_set_instructor_none(self):\n        self.course_class.set_instructor(None)\n        self.assertEqual(self.course_class.instructor, None)\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.instructor, None)\n\n    def test_set_instructor_instructor_does_not_exist(self):\n        invalid_instructor = InstructorClass(\n            username='test', email='test@uwm.edu', first_name='Test', last_name='Test')\n\n        with self.assertRaises(User.DoesNotExist, msg='set_instructor does not raise User.DoesNotExist for non-existant instructor'):\n            self.invalid_class.set_instructor(\n                invalid_instructor.get_model_instance())\n\n    def test_get_tas_default(self):\n        course = self.course_class.get_model_instance()\n        course.user_set.add(self.ta)\n\n        self.assertEqual(list(self.course_class.get_tas()), [self.ta])\n    \n    def test_get_sections(self):\n        course = self.course_class.get_model_instance()\n        self.assertEqual(list(self.course_class.get_sections()), [])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n        self.instructor = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                                          first_name='Test', last_name='Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass(username='ta', email='ta@uwm.edu',\n                          first_name='Test', last_name='TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course_class = CourseClass(\n            'COURSE', '1', 'Course', self.instructor)\n        self.course_class.save_details()\n\n        self.invalid_class = CourseClass('INVALID', '1')", "func_code_string": "def setUp(self):\n        self.instructor = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                                          first_name='Test', last_name='Instructor')\n        self.instructor.save_details()\n        self.instructor = self.instructor.get_model_instance()\n\n        self.ta = TAClass(username='ta', email='ta@uwm.edu',\n                          first_name='Test', last_name='TA')\n        self.ta.save_details()\n        self.ta = self.ta.get_model_instance()\n\n        self.course_class = CourseClass(\n            'COURSE', '1', 'Course', self.instructor)\n        self.course_class.save_details()\n\n        self.invalid_class = CourseClass('INVALID', '1')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_init_default", "whole_func_string": "def test_init_default(self):\n        course_class = CourseClass('COURSE', '1', 'Course', self.instructor)\n\n        self.assertEqual(course_class.subject, 'COURSE')\n        self.assertEqual(course_class.number, '1')\n        self.assertEqual(course_class.name, 'Course')\n        self.assertEqual(course_class.instructor, self.instructor)", "func_code_string": "def test_init_default(self):\n        course_class = CourseClass('COURSE', '1', 'Course', self.instructor)\n\n        self.assertEqual(course_class.subject, 'COURSE')\n        self.assertEqual(course_class.number, '1')\n        self.assertEqual(course_class.name, 'Course')\n        self.assertEqual(course_class.instructor, self.instructor)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_save_details_default", "whole_func_string": "def test_save_details_default(self):\n        course = Course.objects.get(\n            subject=self.course_class.subject, number=self.course_class.number)\n\n        self.assertEqual(self.course_class.subject, course.subject)\n        self.assertEqual(self.course_class.number, course.number)\n        self.assertEqual(self.course_class.name, course.name)\n        self.assertEqual(self.course_class.instructor, course.instructor)", "func_code_string": "def test_save_details_default(self):\n        course = Course.objects.get(\n            subject=self.course_class.subject, number=self.course_class.number)\n\n        self.assertEqual(self.course_class.subject, course.subject)\n        self.assertEqual(self.course_class.number, course.number)\n        self.assertEqual(self.course_class.name, course.name)\n        self.assertEqual(self.course_class.instructor, course.instructor)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_save_details_exists", "whole_func_string": "def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='save_details does not raise IntegrityError for duplicate course'):\n            self.course_class.save_details()", "func_code_string": "def test_save_details_exists(self):\n        with self.assertRaises(IntegrityError, msg='save_details does not raise IntegrityError for duplicate course'):\n            self.course_class.save_details()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_get_model_instance", "whole_func_string": "def test_get_model_instance(self):\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.subject, self.course_class.subject)\n        self.assertEqual(course.number, self.course_class.number)\n        self.assertEqual(course.name, self.course_class.name)\n        self.assertEqual(course.instructor, self.course_class.instructor)", "func_code_string": "def test_get_model_instance(self):\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.subject, self.course_class.subject)\n        self.assertEqual(course.number, self.course_class.number)\n        self.assertEqual(course.name, self.course_class.name)\n        self.assertEqual(course.instructor, self.course_class.instructor)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_get_model_instance_does_not_exist", "whole_func_string": "def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Course.DoesNotExist, msg='get_model_instance does not raise Course.DoesNotExist for non-existant course'):\n            self.invalid_class.get_model_instance()", "func_code_string": "def test_get_model_instance_does_not_exist(self):\n        with self.assertRaises(Course.DoesNotExist, msg='get_model_instance does not raise Course.DoesNotExist for non-existant course'):\n            self.invalid_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_get_instance_default", "whole_func_string": "def test_get_instance_default(self):\n        course_class = CourseClass.get_instance(\n            self.course_class.get_model_instance())\n\n        self.assertTrue(isinstance(course_class, CourseClass))\n\n        self.assertEqual(course_class.subject, self.course_class.subject)\n        self.assertEqual(course_class.number, self.course_class.number)\n        self.assertEqual(course_class.name, self.course_class.name)\n        self.assertEqual(course_class.instructor, self.course_class.instructor)", "func_code_string": "def test_get_instance_default(self):\n        course_class = CourseClass.get_instance(\n            self.course_class.get_model_instance())\n\n        self.assertTrue(isinstance(course_class, CourseClass))\n\n        self.assertEqual(course_class.subject, self.course_class.subject)\n        self.assertEqual(course_class.number, self.course_class.number)\n        self.assertEqual(course_class.name, self.course_class.name)\n        self.assertEqual(course_class.instructor, self.course_class.instructor)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_delete_default", "whole_func_string": "def test_delete_default(self):\n        self.course_class.delete()\n\n        with self.assertRaises(Course.DoesNotExist, msg='Failed to delete the course from db'):\n            self.course_class.get_model_instance()", "func_code_string": "def test_delete_default(self):\n        self.course_class.delete()\n\n        with self.assertRaises(Course.DoesNotExist, msg='Failed to delete the course from db'):\n            self.course_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_delete_does_not_exist", "whole_func_string": "def test_delete_does_not_exist(self):\n        self.course_class.delete()\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete does not raise Course.DoesNotExist for non-existant course'):\n            self.course_class.delete()", "func_code_string": "def test_delete_does_not_exist(self):\n        self.course_class.delete()\n\n        with self.assertRaises(Course.DoesNotExist, msg='delete does not raise Course.DoesNotExist for non-existant course'):\n            self.course_class.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_get_subject_default", "whole_func_string": "def test_get_subject_default(self):\n        self.assertEqual(self.course_class.get_subject(), 'COURSE')", "func_code_string": "def test_get_subject_default(self):\n        self.assertEqual(self.course_class.get_subject(), 'COURSE')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_set_subject_default", "whole_func_string": "def test_set_subject_default(self):\n        self.course_class.set_subject('TEST')\n        self.assertEqual(self.course_class.subject, 'TEST')\n\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.subject, 'TEST')", "func_code_string": "def test_set_subject_default(self):\n        self.course_class.set_subject('TEST')\n        self.assertEqual(self.course_class.subject, 'TEST')\n\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.subject, 'TEST')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_get_number_default", "whole_func_string": "def test_get_number_default(self):\n        self.assertEqual(self.course_class.get_number(), '1')", "func_code_string": "def test_get_number_default(self):\n        self.assertEqual(self.course_class.get_number(), '1')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_set_number_default", "whole_func_string": "def test_set_number_default(self):\n        self.course_class.set_number('2')\n        self.assertEqual(self.course_class.number, '2')\n\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.number, '2')", "func_code_string": "def test_set_number_default(self):\n        self.course_class.set_number('2')\n        self.assertEqual(self.course_class.number, '2')\n\n        course = self.course_class.get_model_instance()\n\n        self.assertEqual(course.number, '2')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_get_name_default", "whole_func_string": "def test_get_name_default(self):\n        self.assertEqual(self.course_class.get_name(), 'Course')", "func_code_string": "def test_get_name_default(self):\n        self.assertEqual(self.course_class.get_name(), 'Course')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_set_name_default", "whole_func_string": "def test_set_name_default(self):\n        self.course_class.set_name('Test')\n        self.assertEqual(self.course_class.name, 'Test')\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.name, 'Test')", "func_code_string": "def test_set_name_default(self):\n        self.course_class.set_name('Test')\n        self.assertEqual(self.course_class.name, 'Test')\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.name, 'Test')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_get_instructor_default", "whole_func_string": "def test_get_instructor_default(self):\n        self.assertEqual(self.course_class.get_instructor(), self.instructor)", "func_code_string": "def test_get_instructor_default(self):\n        self.assertEqual(self.course_class.get_instructor(), self.instructor)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_set_instructor_default", "whole_func_string": "def test_set_instructor_default(self):\n        instructor = InstructorClass(username='test', email='test@uwm.edu',\n                                     first_name='Test', last_name='Instructor')\n        instructor.save_details()\n        instructor = instructor.get_model_instance()\n\n        self.course_class.set_instructor(instructor)\n        self.assertEqual(self.course_class.instructor, instructor)\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.instructor, instructor)", "func_code_string": "def test_set_instructor_default(self):\n        instructor = InstructorClass(username='test', email='test@uwm.edu',\n                                     first_name='Test', last_name='Instructor')\n        instructor.save_details()\n        instructor = instructor.get_model_instance()\n\n        self.course_class.set_instructor(instructor)\n        self.assertEqual(self.course_class.instructor, instructor)\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.instructor, instructor)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_set_instructor_none", "whole_func_string": "def test_set_instructor_none(self):\n        self.course_class.set_instructor(None)\n        self.assertEqual(self.course_class.instructor, None)\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.instructor, None)", "func_code_string": "def test_set_instructor_none(self):\n        self.course_class.set_instructor(None)\n        self.assertEqual(self.course_class.instructor, None)\n\n        course = self.course_class.get_model_instance()\n        self.assertEqual(course.instructor, None)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_set_instructor_instructor_does_not_exist", "whole_func_string": "def test_set_instructor_instructor_does_not_exist(self):\n        invalid_instructor = InstructorClass(\n            username='test', email='test@uwm.edu', first_name='Test', last_name='Test')\n\n        with self.assertRaises(User.DoesNotExist, msg='set_instructor does not raise User.DoesNotExist for non-existant instructor'):\n            self.invalid_class.set_instructor(\n                invalid_instructor.get_model_instance())", "func_code_string": "def test_set_instructor_instructor_does_not_exist(self):\n        invalid_instructor = InstructorClass(\n            username='test', email='test@uwm.edu', first_name='Test', last_name='Test')\n\n        with self.assertRaises(User.DoesNotExist, msg='set_instructor does not raise User.DoesNotExist for non-existant instructor'):\n            self.invalid_class.set_instructor(\n                invalid_instructor.get_model_instance())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_get_tas_default", "whole_func_string": "def test_get_tas_default(self):\n        course = self.course_class.get_model_instance()\n        course.user_set.add(self.ta)\n\n        self.assertEqual(list(self.course_class.get_tas()), [self.ta])", "func_code_string": "def test_get_tas_default(self):\n        course = self.course_class.get_model_instance()\n        course.user_set.add(self.ta)\n\n        self.assertEqual(list(self.course_class.get_tas()), [self.ta])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_course.py", "func_name": "test_get_sections", "whole_func_string": "def test_get_sections(self):\n        course = self.course_class.get_model_instance()\n        self.assertEqual(list(self.course_class.get_sections()), [])", "func_code_string": "def test_get_sections(self):\n        course = self.course_class.get_model_instance()\n        self.assertEqual(list(self.course_class.get_sections()), [])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "InstructorUnitTestSuite", "whole_func_string": "class InstructorUnitTestSuite(TestCase):\n    def setUp(self):\n        self.instructor_class = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor_class.save_details()\n\n        self.course = CourseClass(name='Test', subject='Test', number='Test')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.ta = TAClass(username='TA', email='ta@uwm.edu', first_name='Test', last_name=' TA')\n        self.ta.save_details()\n        self.ta.add_course(self.course)\n        self.ta = self.ta.get_model_instance()\n\n        self.section = SectionClass(number='1', course=self.course, ta=self.ta)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n    def test_init_default(self):\n        instructor_class = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                          first_name='Test', last_name='Instructor', courses=[self.course])\n\n        self.assertEqual(instructor_class.username, 'instructor')\n        self.assertEqual(instructor_class.email, 'instructor@uwm.edu')\n        self.assertEqual(instructor_class.first_name, 'Test')\n        self.assertEqual(instructor_class.last_name, 'Instructor')\n        self.assertEqual(instructor_class.role, Role.INSTRUCTOR)\n        self.assertEqual(instructor_class.phone_number, None)\n        self.assertEqual(instructor_class.home_address, None)\n        self.assertEqual(instructor_class.courses, [self.course])\n        self.assertEqual(instructor_class.sent_notifications, [])\n        self.assertEqual(instructor_class.received_notifications, [])\n    \n    def test_get_instance_default(self):\n        instructor_class = InstructorClass.get_instance(self.instructor_class.get_model_instance())\n\n        self.assertTrue(isinstance(instructor_class, InstructorClass))\n\n        self.assertEqual(instructor_class.username, self.instructor_class.username)\n        self.assertEqual(instructor_class.email, self.instructor_class.email)\n        self.assertEqual(instructor_class.first_name, self.instructor_class.first_name)\n        self.assertEqual(instructor_class.last_name, self.instructor_class.last_name)\n        self.assertEqual(instructor_class.role, self.instructor_class.role)\n        self.assertEqual(instructor_class.courses, self.instructor_class.courses)\n        self.assertEqual(instructor_class.sent_notifications, self.instructor_class.sent_notifications)\n        self.assertEqual(instructor_class.received_notifications, self.instructor_class.received_notifications)\n\n    def test_validate_default(self):\n        pass\n\n    def test_assign_ta_section_default(self):\n        self.instructor_class.assign_ta_section(self.ta, self.section)\n\n                                                 \n        self.assertIn(self.section.course, self.ta.courses.all())\n    \n    def test_assign_ta_section_ta_does_not_exist(self):\n        invalid_ta = TAClass('invalid', 'invalid@uwm.edu', 'Invalid', 'TA')\n\n        with self.assertRaises(TypeError, msg='assign_ta_section does not raise TypeError for non-existant TA'):\n            self.instructor_class.assign_ta_section(invalid_ta, self.section)\n\n    def test_assign_ta_section_section_does_not_exist(self):\n        invalid_section = SectionClass('ABC', None)\n\n        with self.assertRaises(AttributeError, msg='assign_ta_section does not raise AttributeError for non-existant section'):\n            self.instructor_class.assign_ta_section(self.ta, invalid_section)\n\n    def test_get_sent_notifications_default(self):\n        self.assertEqual(self.instructor_class.get_sent_notifications(), [])\n\n    def test_send_notifications_default(self):\n        notifications = self.instructor_class.send_notifications(self.course, 'Subject', 'Message')\n        notification = notifications[0]\n\n        instructor = self.instructor_class.get_model_instance()\n\n        self.assertIn(notification, instructor.sent_notifications.all())\n        self.assertNotIn(notification, instructor.received_notifications.all())\n\n        self.assertNotIn(notification, self.ta.sent_notifications.all())\n        self.assertIn(notification, self.ta.received_notifications.all())\n\n    def test_send_notifications_course_does_not_exist(self):\n        invalid_course = CourseClass('', '')\n\n        with self.assertRaises(Course.DoesNotExist, msg='send_notifications does not raise Course.DoesNotExist for non-existant course'):\n            self.instructor_class.send_notifications(invalid_course, 'Subject', 'Message')", "func_code_string": "class InstructorUnitTestSuite(TestCase):\n    def setUp(self):\n        self.instructor_class = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor_class.save_details()\n\n        self.course = CourseClass(name='Test', subject='Test', number='Test')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.ta = TAClass(username='TA', email='ta@uwm.edu', first_name='Test', last_name=' TA')\n        self.ta.save_details()\n        self.ta.add_course(self.course)\n        self.ta = self.ta.get_model_instance()\n\n        self.section = SectionClass(number='1', course=self.course, ta=self.ta)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n    def test_init_default(self):\n        instructor_class = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                          first_name='Test', last_name='Instructor', courses=[self.course])\n\n        self.assertEqual(instructor_class.username, 'instructor')\n        self.assertEqual(instructor_class.email, 'instructor@uwm.edu')\n        self.assertEqual(instructor_class.first_name, 'Test')\n        self.assertEqual(instructor_class.last_name, 'Instructor')\n        self.assertEqual(instructor_class.role, Role.INSTRUCTOR)\n        self.assertEqual(instructor_class.phone_number, None)\n        self.assertEqual(instructor_class.home_address, None)\n        self.assertEqual(instructor_class.courses, [self.course])\n        self.assertEqual(instructor_class.sent_notifications, [])\n        self.assertEqual(instructor_class.received_notifications, [])\n    \n    def test_get_instance_default(self):\n        instructor_class = InstructorClass.get_instance(self.instructor_class.get_model_instance())\n\n        self.assertTrue(isinstance(instructor_class, InstructorClass))\n\n        self.assertEqual(instructor_class.username, self.instructor_class.username)\n        self.assertEqual(instructor_class.email, self.instructor_class.email)\n        self.assertEqual(instructor_class.first_name, self.instructor_class.first_name)\n        self.assertEqual(instructor_class.last_name, self.instructor_class.last_name)\n        self.assertEqual(instructor_class.role, self.instructor_class.role)\n        self.assertEqual(instructor_class.courses, self.instructor_class.courses)\n        self.assertEqual(instructor_class.sent_notifications, self.instructor_class.sent_notifications)\n        self.assertEqual(instructor_class.received_notifications, self.instructor_class.received_notifications)\n\n    def test_validate_default(self):\n        pass\n\n    def test_assign_ta_section_default(self):\n        self.instructor_class.assign_ta_section(self.ta, self.section)\n\n                                                 \n        self.assertIn(self.section.course, self.ta.courses.all())\n    \n    def test_assign_ta_section_ta_does_not_exist(self):\n        invalid_ta = TAClass('invalid', 'invalid@uwm.edu', 'Invalid', 'TA')\n\n        with self.assertRaises(TypeError, msg='assign_ta_section does not raise TypeError for non-existant TA'):\n            self.instructor_class.assign_ta_section(invalid_ta, self.section)\n\n    def test_assign_ta_section_section_does_not_exist(self):\n        invalid_section = SectionClass('ABC', None)\n\n        with self.assertRaises(AttributeError, msg='assign_ta_section does not raise AttributeError for non-existant section'):\n            self.instructor_class.assign_ta_section(self.ta, invalid_section)\n\n    def test_get_sent_notifications_default(self):\n        self.assertEqual(self.instructor_class.get_sent_notifications(), [])\n\n    def test_send_notifications_default(self):\n        notifications = self.instructor_class.send_notifications(self.course, 'Subject', 'Message')\n        notification = notifications[0]\n\n        instructor = self.instructor_class.get_model_instance()\n\n        self.assertIn(notification, instructor.sent_notifications.all())\n        self.assertNotIn(notification, instructor.received_notifications.all())\n\n        self.assertNotIn(notification, self.ta.sent_notifications.all())\n        self.assertIn(notification, self.ta.received_notifications.all())\n\n    def test_send_notifications_course_does_not_exist(self):\n        invalid_course = CourseClass('', '')\n\n        with self.assertRaises(Course.DoesNotExist, msg='send_notifications does not raise Course.DoesNotExist for non-existant course'):\n            self.instructor_class.send_notifications(invalid_course, 'Subject', 'Message')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n        self.instructor_class = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor_class.save_details()\n\n        self.course = CourseClass(name='Test', subject='Test', number='Test')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.ta = TAClass(username='TA', email='ta@uwm.edu', first_name='Test', last_name=' TA')\n        self.ta.save_details()\n        self.ta.add_course(self.course)\n        self.ta = self.ta.get_model_instance()\n\n        self.section = SectionClass(number='1', course=self.course, ta=self.ta)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()", "func_code_string": "def setUp(self):\n        self.instructor_class = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor_class.save_details()\n\n        self.course = CourseClass(name='Test', subject='Test', number='Test')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.ta = TAClass(username='TA', email='ta@uwm.edu', first_name='Test', last_name=' TA')\n        self.ta.save_details()\n        self.ta.add_course(self.course)\n        self.ta = self.ta.get_model_instance()\n\n        self.section = SectionClass(number='1', course=self.course, ta=self.ta)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "test_init_default", "whole_func_string": "def test_init_default(self):\n        instructor_class = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                          first_name='Test', last_name='Instructor', courses=[self.course])\n\n        self.assertEqual(instructor_class.username, 'instructor')\n        self.assertEqual(instructor_class.email, 'instructor@uwm.edu')\n        self.assertEqual(instructor_class.first_name, 'Test')\n        self.assertEqual(instructor_class.last_name, 'Instructor')\n        self.assertEqual(instructor_class.role, Role.INSTRUCTOR)\n        self.assertEqual(instructor_class.phone_number, None)\n        self.assertEqual(instructor_class.home_address, None)\n        self.assertEqual(instructor_class.courses, [self.course])\n        self.assertEqual(instructor_class.sent_notifications, [])\n        self.assertEqual(instructor_class.received_notifications, [])", "func_code_string": "def test_init_default(self):\n        instructor_class = InstructorClass(username='instructor', email='instructor@uwm.edu',\n                          first_name='Test', last_name='Instructor', courses=[self.course])\n\n        self.assertEqual(instructor_class.username, 'instructor')\n        self.assertEqual(instructor_class.email, 'instructor@uwm.edu')\n        self.assertEqual(instructor_class.first_name, 'Test')\n        self.assertEqual(instructor_class.last_name, 'Instructor')\n        self.assertEqual(instructor_class.role, Role.INSTRUCTOR)\n        self.assertEqual(instructor_class.phone_number, None)\n        self.assertEqual(instructor_class.home_address, None)\n        self.assertEqual(instructor_class.courses, [self.course])\n        self.assertEqual(instructor_class.sent_notifications, [])\n        self.assertEqual(instructor_class.received_notifications, [])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "test_get_instance_default", "whole_func_string": "def test_get_instance_default(self):\n        instructor_class = InstructorClass.get_instance(self.instructor_class.get_model_instance())\n\n        self.assertTrue(isinstance(instructor_class, InstructorClass))\n\n        self.assertEqual(instructor_class.username, self.instructor_class.username)\n        self.assertEqual(instructor_class.email, self.instructor_class.email)\n        self.assertEqual(instructor_class.first_name, self.instructor_class.first_name)\n        self.assertEqual(instructor_class.last_name, self.instructor_class.last_name)\n        self.assertEqual(instructor_class.role, self.instructor_class.role)\n        self.assertEqual(instructor_class.courses, self.instructor_class.courses)\n        self.assertEqual(instructor_class.sent_notifications, self.instructor_class.sent_notifications)\n        self.assertEqual(instructor_class.received_notifications, self.instructor_class.received_notifications)", "func_code_string": "def test_get_instance_default(self):\n        instructor_class = InstructorClass.get_instance(self.instructor_class.get_model_instance())\n\n        self.assertTrue(isinstance(instructor_class, InstructorClass))\n\n        self.assertEqual(instructor_class.username, self.instructor_class.username)\n        self.assertEqual(instructor_class.email, self.instructor_class.email)\n        self.assertEqual(instructor_class.first_name, self.instructor_class.first_name)\n        self.assertEqual(instructor_class.last_name, self.instructor_class.last_name)\n        self.assertEqual(instructor_class.role, self.instructor_class.role)\n        self.assertEqual(instructor_class.courses, self.instructor_class.courses)\n        self.assertEqual(instructor_class.sent_notifications, self.instructor_class.sent_notifications)\n        self.assertEqual(instructor_class.received_notifications, self.instructor_class.received_notifications)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "test_validate_default", "whole_func_string": "def test_validate_default(self):\n        pass", "func_code_string": "def test_validate_default(self):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "test_assign_ta_section_default", "whole_func_string": "def test_assign_ta_section_default(self):\n        self.instructor_class.assign_ta_section(self.ta, self.section)\n\n                                                 \n        self.assertIn(self.section.course, self.ta.courses.all())", "func_code_string": "def test_assign_ta_section_default(self):\n        self.instructor_class.assign_ta_section(self.ta, self.section)\n\n                                                 \n        self.assertIn(self.section.course, self.ta.courses.all())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "test_assign_ta_section_ta_does_not_exist", "whole_func_string": "def test_assign_ta_section_ta_does_not_exist(self):\n        invalid_ta = TAClass('invalid', 'invalid@uwm.edu', 'Invalid', 'TA')\n\n        with self.assertRaises(TypeError, msg='assign_ta_section does not raise TypeError for non-existant TA'):\n            self.instructor_class.assign_ta_section(invalid_ta, self.section)", "func_code_string": "def test_assign_ta_section_ta_does_not_exist(self):\n        invalid_ta = TAClass('invalid', 'invalid@uwm.edu', 'Invalid', 'TA')\n\n        with self.assertRaises(TypeError, msg='assign_ta_section does not raise TypeError for non-existant TA'):\n            self.instructor_class.assign_ta_section(invalid_ta, self.section)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "test_assign_ta_section_section_does_not_exist", "whole_func_string": "def test_assign_ta_section_section_does_not_exist(self):\n        invalid_section = SectionClass('ABC', None)\n\n        with self.assertRaises(AttributeError, msg='assign_ta_section does not raise AttributeError for non-existant section'):\n            self.instructor_class.assign_ta_section(self.ta, invalid_section)", "func_code_string": "def test_assign_ta_section_section_does_not_exist(self):\n        invalid_section = SectionClass('ABC', None)\n\n        with self.assertRaises(AttributeError, msg='assign_ta_section does not raise AttributeError for non-existant section'):\n            self.instructor_class.assign_ta_section(self.ta, invalid_section)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "test_get_sent_notifications_default", "whole_func_string": "def test_get_sent_notifications_default(self):\n        self.assertEqual(self.instructor_class.get_sent_notifications(), [])", "func_code_string": "def test_get_sent_notifications_default(self):\n        self.assertEqual(self.instructor_class.get_sent_notifications(), [])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "test_send_notifications_default", "whole_func_string": "def test_send_notifications_default(self):\n        notifications = self.instructor_class.send_notifications(self.course, 'Subject', 'Message')\n        notification = notifications[0]\n\n        instructor = self.instructor_class.get_model_instance()\n\n        self.assertIn(notification, instructor.sent_notifications.all())\n        self.assertNotIn(notification, instructor.received_notifications.all())\n\n        self.assertNotIn(notification, self.ta.sent_notifications.all())\n        self.assertIn(notification, self.ta.received_notifications.all())", "func_code_string": "def test_send_notifications_default(self):\n        notifications = self.instructor_class.send_notifications(self.course, 'Subject', 'Message')\n        notification = notifications[0]\n\n        instructor = self.instructor_class.get_model_instance()\n\n        self.assertIn(notification, instructor.sent_notifications.all())\n        self.assertNotIn(notification, instructor.received_notifications.all())\n\n        self.assertNotIn(notification, self.ta.sent_notifications.all())\n        self.assertIn(notification, self.ta.received_notifications.all())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_instructor.py", "func_name": "test_send_notifications_course_does_not_exist", "whole_func_string": "def test_send_notifications_course_does_not_exist(self):\n        invalid_course = CourseClass('', '')\n\n        with self.assertRaises(Course.DoesNotExist, msg='send_notifications does not raise Course.DoesNotExist for non-existant course'):\n            self.instructor_class.send_notifications(invalid_course, 'Subject', 'Message')", "func_code_string": "def test_send_notifications_course_does_not_exist(self):\n        invalid_course = CourseClass('', '')\n\n        with self.assertRaises(Course.DoesNotExist, msg='send_notifications does not raise Course.DoesNotExist for non-existant course'):\n            self.instructor_class.send_notifications(invalid_course, 'Subject', 'Message')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_ta.py", "func_name": "TAUnitTestSuite", "whole_func_string": "class TAUnitTestSuite(TestCase):\n    def setUp(self):\n        self.course = CourseClass(name='Test', subject='TEST', number='001')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass(number='001', course=self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n        self.ta_class = TAClass(username='ta', email='ta@uwm.edu', first_name='Test',\n                                last_name='TA', courses=[self.course])\n        self.ta_class.save_details()\n\n        self.section.tas.add(self.ta_class.get_model_instance())\n\n    def test_init_default(self):\n        ta_class = TAClass(username='ta', email='ta@uwm.edu', first_name='Test',\n                           last_name='TA', courses=[self.course])\n\n        self.assertEqual(ta_class.username, 'ta')\n        self.assertEqual(ta_class.email, 'ta@uwm.edu')\n        self.assertEqual(ta_class.first_name, 'Test')\n        self.assertEqual(ta_class.last_name, 'TA')\n        self.assertEqual(ta_class.role, Role.TA)\n        self.assertEqual(ta_class.phone_number, None)\n        self.assertEqual(ta_class.home_address, None)\n        self.assertEqual(ta_class.courses, [self.course])\n        self.assertEqual(ta_class.sent_notifications, [])\n        self.assertEqual(ta_class.received_notifications, [])\n\n    def test_get_instance_default(self):\n        ta_class = TAClass.get_instance(self.ta_class.get_model_instance())\n\n        self.assertTrue(isinstance(ta_class, TAClass))\n\n        self.assertEqual(ta_class.username, self.ta_class.username)\n        self.assertEqual(ta_class.email, self.ta_class.email)\n        self.assertEqual(ta_class.first_name, self.ta_class.first_name)\n        self.assertEqual(ta_class.last_name, self.ta_class.last_name)\n        self.assertEqual(ta_class.role, self.ta_class.role)\n        self.assertEqual(ta_class.phone_number, self.ta_class.phone_number)\n        self.assertEqual(ta_class.home_address, self.ta_class.home_address)\n        self.assertEqual(ta_class.courses, self.ta_class.courses)\n        self.assertEqual(ta_class.sent_notifications, self.ta_class.sent_notifications)\n        self.assertEqual(ta_class.received_notifications, self.ta_class.received_notifications)\n\n    def test_get_sections_default(self):\n        self.assertEqual(list(self.ta_class.get_sections()), [self.section])\n\n    def test_has_section_true(self):\n        self.assertTrue(self.ta_class.has_section(self.section))\n\n    def test_has_section_false(self):\n        section_2 = SectionClass(number='002', course=self.course)\n        section_2.save_details()\n\n        self.assertFalse(self.ta_class.has_section(section_2))", "func_code_string": "class TAUnitTestSuite(TestCase):\n    def setUp(self):\n        self.course = CourseClass(name='Test', subject='TEST', number='001')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass(number='001', course=self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n        self.ta_class = TAClass(username='ta', email='ta@uwm.edu', first_name='Test',\n                                last_name='TA', courses=[self.course])\n        self.ta_class.save_details()\n\n        self.section.tas.add(self.ta_class.get_model_instance())\n\n    def test_init_default(self):\n        ta_class = TAClass(username='ta', email='ta@uwm.edu', first_name='Test',\n                           last_name='TA', courses=[self.course])\n\n        self.assertEqual(ta_class.username, 'ta')\n        self.assertEqual(ta_class.email, 'ta@uwm.edu')\n        self.assertEqual(ta_class.first_name, 'Test')\n        self.assertEqual(ta_class.last_name, 'TA')\n        self.assertEqual(ta_class.role, Role.TA)\n        self.assertEqual(ta_class.phone_number, None)\n        self.assertEqual(ta_class.home_address, None)\n        self.assertEqual(ta_class.courses, [self.course])\n        self.assertEqual(ta_class.sent_notifications, [])\n        self.assertEqual(ta_class.received_notifications, [])\n\n    def test_get_instance_default(self):\n        ta_class = TAClass.get_instance(self.ta_class.get_model_instance())\n\n        self.assertTrue(isinstance(ta_class, TAClass))\n\n        self.assertEqual(ta_class.username, self.ta_class.username)\n        self.assertEqual(ta_class.email, self.ta_class.email)\n        self.assertEqual(ta_class.first_name, self.ta_class.first_name)\n        self.assertEqual(ta_class.last_name, self.ta_class.last_name)\n        self.assertEqual(ta_class.role, self.ta_class.role)\n        self.assertEqual(ta_class.phone_number, self.ta_class.phone_number)\n        self.assertEqual(ta_class.home_address, self.ta_class.home_address)\n        self.assertEqual(ta_class.courses, self.ta_class.courses)\n        self.assertEqual(ta_class.sent_notifications, self.ta_class.sent_notifications)\n        self.assertEqual(ta_class.received_notifications, self.ta_class.received_notifications)\n\n    def test_get_sections_default(self):\n        self.assertEqual(list(self.ta_class.get_sections()), [self.section])\n\n    def test_has_section_true(self):\n        self.assertTrue(self.ta_class.has_section(self.section))\n\n    def test_has_section_false(self):\n        section_2 = SectionClass(number='002', course=self.course)\n        section_2.save_details()\n\n        self.assertFalse(self.ta_class.has_section(section_2))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_ta.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n        self.course = CourseClass(name='Test', subject='TEST', number='001')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass(number='001', course=self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n        self.ta_class = TAClass(username='ta', email='ta@uwm.edu', first_name='Test',\n                                last_name='TA', courses=[self.course])\n        self.ta_class.save_details()\n\n        self.section.tas.add(self.ta_class.get_model_instance())", "func_code_string": "def setUp(self):\n        self.course = CourseClass(name='Test', subject='TEST', number='001')\n        self.course.save_details()\n        self.course = self.course.get_model_instance()\n\n        self.section = SectionClass(number='001', course=self.course)\n        self.section.save_details()\n        self.section = self.section.get_model_instance()\n\n        self.ta_class = TAClass(username='ta', email='ta@uwm.edu', first_name='Test',\n                                last_name='TA', courses=[self.course])\n        self.ta_class.save_details()\n\n        self.section.tas.add(self.ta_class.get_model_instance())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_ta.py", "func_name": "test_init_default", "whole_func_string": "def test_init_default(self):\n        ta_class = TAClass(username='ta', email='ta@uwm.edu', first_name='Test',\n                           last_name='TA', courses=[self.course])\n\n        self.assertEqual(ta_class.username, 'ta')\n        self.assertEqual(ta_class.email, 'ta@uwm.edu')\n        self.assertEqual(ta_class.first_name, 'Test')\n        self.assertEqual(ta_class.last_name, 'TA')\n        self.assertEqual(ta_class.role, Role.TA)\n        self.assertEqual(ta_class.phone_number, None)\n        self.assertEqual(ta_class.home_address, None)\n        self.assertEqual(ta_class.courses, [self.course])\n        self.assertEqual(ta_class.sent_notifications, [])\n        self.assertEqual(ta_class.received_notifications, [])", "func_code_string": "def test_init_default(self):\n        ta_class = TAClass(username='ta', email='ta@uwm.edu', first_name='Test',\n                           last_name='TA', courses=[self.course])\n\n        self.assertEqual(ta_class.username, 'ta')\n        self.assertEqual(ta_class.email, 'ta@uwm.edu')\n        self.assertEqual(ta_class.first_name, 'Test')\n        self.assertEqual(ta_class.last_name, 'TA')\n        self.assertEqual(ta_class.role, Role.TA)\n        self.assertEqual(ta_class.phone_number, None)\n        self.assertEqual(ta_class.home_address, None)\n        self.assertEqual(ta_class.courses, [self.course])\n        self.assertEqual(ta_class.sent_notifications, [])\n        self.assertEqual(ta_class.received_notifications, [])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_ta.py", "func_name": "test_get_instance_default", "whole_func_string": "def test_get_instance_default(self):\n        ta_class = TAClass.get_instance(self.ta_class.get_model_instance())\n\n        self.assertTrue(isinstance(ta_class, TAClass))\n\n        self.assertEqual(ta_class.username, self.ta_class.username)\n        self.assertEqual(ta_class.email, self.ta_class.email)\n        self.assertEqual(ta_class.first_name, self.ta_class.first_name)\n        self.assertEqual(ta_class.last_name, self.ta_class.last_name)\n        self.assertEqual(ta_class.role, self.ta_class.role)\n        self.assertEqual(ta_class.phone_number, self.ta_class.phone_number)\n        self.assertEqual(ta_class.home_address, self.ta_class.home_address)\n        self.assertEqual(ta_class.courses, self.ta_class.courses)\n        self.assertEqual(ta_class.sent_notifications, self.ta_class.sent_notifications)\n        self.assertEqual(ta_class.received_notifications, self.ta_class.received_notifications)", "func_code_string": "def test_get_instance_default(self):\n        ta_class = TAClass.get_instance(self.ta_class.get_model_instance())\n\n        self.assertTrue(isinstance(ta_class, TAClass))\n\n        self.assertEqual(ta_class.username, self.ta_class.username)\n        self.assertEqual(ta_class.email, self.ta_class.email)\n        self.assertEqual(ta_class.first_name, self.ta_class.first_name)\n        self.assertEqual(ta_class.last_name, self.ta_class.last_name)\n        self.assertEqual(ta_class.role, self.ta_class.role)\n        self.assertEqual(ta_class.phone_number, self.ta_class.phone_number)\n        self.assertEqual(ta_class.home_address, self.ta_class.home_address)\n        self.assertEqual(ta_class.courses, self.ta_class.courses)\n        self.assertEqual(ta_class.sent_notifications, self.ta_class.sent_notifications)\n        self.assertEqual(ta_class.received_notifications, self.ta_class.received_notifications)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_ta.py", "func_name": "test_get_sections_default", "whole_func_string": "def test_get_sections_default(self):\n        self.assertEqual(list(self.ta_class.get_sections()), [self.section])", "func_code_string": "def test_get_sections_default(self):\n        self.assertEqual(list(self.ta_class.get_sections()), [self.section])", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_ta.py", "func_name": "test_has_section_true", "whole_func_string": "def test_has_section_true(self):\n        self.assertTrue(self.ta_class.has_section(self.section))", "func_code_string": "def test_has_section_true(self):\n        self.assertTrue(self.ta_class.has_section(self.section))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "unit_tests/test_ta.py", "func_name": "test_has_section_false", "whole_func_string": "def test_has_section_false(self):\n        section_2 = SectionClass(number='002', course=self.course)\n        section_2.save_details()\n\n        self.assertFalse(self.ta_class.has_section(section_2))", "func_code_string": "def test_has_section_false(self):\n        section_2 = SectionClass(number='002', course=self.course)\n        section_2.save_details()\n\n        self.assertFalse(self.ta_class.has_section(section_2))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "SectionClass", "whole_func_string": "class SectionClass:\n    def __init__(self, number, course, ta=None):\n        self.number = number\n        self.course = course\n        self.ta = ta\n\n    @classmethod\n    def get_instance(cls, section):\n        return cls(\n            section.number,\n            section.course,\n            section.ta\n        )\n\n    def save_details(self):\n        section = Section(number=self.number, course=self.course)\n        section.save()\n\n        if self.ta:\n            setattr(section, 'ta', self.ta)\n            section.save()\n\n        return f'Added {self.course.subject} {self.course.number} - {self.number} to the system.'\n\n    def get_model_instance(self):\n        return Section.objects.get(course=self.course, number=self.number)\n\n    def validate(self):\n        pass\n\n    def delete(self):\n        section = self.get_model_instance()\n        section.delete()\n\n    def get_number(self):\n        return self.number\n\n    def set_number(self, number):\n        section = self.get_model_instance()\n        section.number = number\n        section.save()\n\n        self.number = number\n\n    def get_course(self):\n        return self.course\n\n    def set_ta(self, ta):\n        section = self.get_model_instance()\n        setattr(section, 'ta', ta)\n        section.save()", "func_code_string": "class SectionClass:\n    def __init__(self, number, course, ta=None):\n        self.number = number\n        self.course = course\n        self.ta = ta\n\n    @classmethod\n    def get_instance(cls, section):\n        return cls(\n            section.number,\n            section.course,\n            section.ta\n        )\n\n    def save_details(self):\n        section = Section(number=self.number, course=self.course)\n        section.save()\n\n        if self.ta:\n            setattr(section, 'ta', self.ta)\n            section.save()\n\n        return f'Added {self.course.subject} {self.course.number} - {self.number} to the system.'\n\n    def get_model_instance(self):\n        return Section.objects.get(course=self.course, number=self.number)\n\n    def validate(self):\n        pass\n\n    def delete(self):\n        section = self.get_model_instance()\n        section.delete()\n\n    def get_number(self):\n        return self.number\n\n    def set_number(self, number):\n        section = self.get_model_instance()\n        section.number = number\n        section.save()\n\n        self.number = number\n\n    def get_course(self):\n        return self.course\n\n    def set_ta(self, ta):\n        section = self.get_model_instance()\n        setattr(section, 'ta', ta)\n        section.save()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "__init__", "whole_func_string": "def __init__(self, number, course, ta=None):\n        self.number = number\n        self.course = course\n        self.ta = ta", "func_code_string": "def __init__(self, number, course, ta=None):\n        self.number = number\n        self.course = course\n        self.ta = ta", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "get_instance", "whole_func_string": "def get_instance(cls, section):\n        return cls(\n            section.number,\n            section.course,\n            section.ta\n        )", "func_code_string": "def get_instance(cls, section):\n        return cls(\n            section.number,\n            section.course,\n            section.ta\n        )", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "save_details", "whole_func_string": "def save_details(self):\n        section = Section(number=self.number, course=self.course)\n        section.save()\n\n        if self.ta:\n            setattr(section, 'ta', self.ta)\n            section.save()\n\n        return f'Added {self.course.subject} {self.course.number} - {self.number} to the system.'", "func_code_string": "def save_details(self):\n        section = Section(number=self.number, course=self.course)\n        section.save()\n\n        if self.ta:\n            setattr(section, 'ta', self.ta)\n            section.save()\n\n        return f'Added {self.course.subject} {self.course.number} - {self.number} to the system.'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "get_model_instance", "whole_func_string": "def get_model_instance(self):\n        return Section.objects.get(course=self.course, number=self.number)", "func_code_string": "def get_model_instance(self):\n        return Section.objects.get(course=self.course, number=self.number)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "validate", "whole_func_string": "def validate(self):\n        pass", "func_code_string": "def validate(self):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "delete", "whole_func_string": "def delete(self):\n        section = self.get_model_instance()\n        section.delete()", "func_code_string": "def delete(self):\n        section = self.get_model_instance()\n        section.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "get_number", "whole_func_string": "def get_number(self):\n        return self.number", "func_code_string": "def get_number(self):\n        return self.number", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "set_number", "whole_func_string": "def set_number(self, number):\n        section = self.get_model_instance()\n        section.number = number\n        section.save()\n\n        self.number = number", "func_code_string": "def set_number(self, number):\n        section = self.get_model_instance()\n        section.number = number\n        section.save()\n\n        self.number = number", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "get_course", "whole_func_string": "def get_course(self):\n        return self.course", "func_code_string": "def get_course(self):\n        return self.course", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/section_class.py", "func_name": "set_ta", "whole_func_string": "def set_ta(self, ta):\n        section = self.get_model_instance()\n        setattr(section, 'ta', ta)\n        section.save()", "func_code_string": "def set_ta(self, ta):\n        section = self.get_model_instance()\n        setattr(section, 'ta', ta)\n        section.save()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "UserClass", "whole_func_string": "class UserClass:\n    def __init__(self, username, email, first_name, last_name, role=None, phone_number=None, home_address=None,\n                 courses=[], sent_notifications=[], received_notifications=[]):\n        self.username = username\n        self.email = email\n        self.first_name = first_name\n        self.last_name = last_name\n        self.phone_number = phone_number\n        self.home_address = home_address\n        self.role = role\n        self.courses = courses\n        self.sent_notifications = sent_notifications\n        self.received_notifications = received_notifications\n\n    @classmethod\n    def get_instance(cls, user):\n        from .supervisor_class import SupervisorClass\n        from .instructor_class import InstructorClass\n        from .ta_class import TAClass\n\n        if user.is_supervisor():\n            return SupervisorClass.get_instance(user)\n        \n        if user.is_instructor():\n            return InstructorClass.get_instance(user)\n        \n        if user.is_ta():\n            return TAClass.get_instance(user)\n\n        return cls(\n            user.username, \n            user.email, \n            user.first_name, \n            user.last_name, \n            user.role, \n            user.phone_number, \n            user.home_address, \n            list(user.courses.all()), \n            list(user.sent_notifications.all()), \n            list(user.received_notifications.all())\n        )\n\n    def save_details(self):\n        user = User(username=self.username, email=self.email, first_name=self.first_name,\n                    last_name=self.last_name, role=self.role)\n        user.role = self.role\n        user.save()\n\n        user.courses.set(self.courses)\n    \n    def get_model_instance(self):\n        return User.objects.get(username=self.username)\n\n    def validate(self):\n        if User.objects.filter(username=self.username).exists():\n            raise ValidationError('Username is taken.')\n        \n        if User.objects.filter(email=self.email).exists():\n            raise ValidationError('User with that email already exists!')\n        \n        domain_length = len(AUTH_EMAIL_DOMAIN)\n        if self.email[-domain_length:] != AUTH_EMAIL_DOMAIN:\n            raise ValidationError(f'Email does not end with {AUTH_EMAIL_DOMAIN}')\n\n        roles = set(role.value for role in Role)\n        if self.role not in roles:\n            raise ValidationError('Role does not exist!')\n        \n        if self.phone_number and not self.phone_number.isnumeric():\n            raise ValidationError('Phone number can only contain digits.')\n\n    def delete(self):\n        user = self.get_model_instance()\n        user.delete()\n\n    def get_username(self):\n        return self.username\n    \n    def set_username(self, username):\n        user = self.get_model_instance()\n        user.username = username\n        user.save()\n\n        self.username = username\n\n    def get_email(self):\n        return self.email\n    \n    def set_email(self, email):\n        user = self.get_model_instance()\n        user.email = email\n        user.save()\n\n        self.email = email\n    \n    def get_first_name(self):\n        return self.first_name\n    \n    def set_first_name(self, first_name):\n        user = self.get_model_instance()\n        user.first_name = first_name\n        user.save()\n\n        self.first_name = first_name\n    \n    def get_last_name(self):\n        return self.last_name\n    \n    def set_last_name(self, last_name):\n        user = self.get_model_instance()\n        user.last_name = last_name\n        user.save()\n\n        self.last_name = last_name\n    \n    def get_role(self):\n        return self.role\n    \n    def set_role(self, role):\n        user = self.get_model_instance()\n        user.role = role\n        user.save()\n\n        self.role = role\n\n    def set_password(self, raw_password):\n        user = self.get_model_instance()\n\n        validate_password(raw_password)\n        user.set_password(raw_password)\n        user.save()\n\n    def set_phone_number(self, phone_number):\n        user = self.get_model_instance()\n        user.phone_number = phone_number\n        user.save()\n\n        self.phone_number = phone_number\n\n    def set_home_address(self, home_address):\n        user = self.get_model_instance()\n        user.home_address = home_address\n        user.save()\n\n        self.home_address = home_address\n\n    def get_courses(self):\n        user = self.get_model_instance()\n        return user.courses.all()\n\n    def has_course(self, course):\n        user = self.get_model_instance()\n        return user.courses.filter(subject=course.subject, number=course.number).exists()\n\n    def add_course(self, course):\n        user = self.get_model_instance()\n\n        if not (course in self.courses):\n            user.courses.add(course)\n            self.courses = list(user.courses.all())\n\n    def get_received_notifications(self):\n        user = self.get_model_instance()\n        return user.received_notifications.all()\n    \n    def is_supervisor(self):\n        return self.role == Role.SUPERVISOR\n\n    def is_instructor(self):\n        return self.role == Role.INSTRUCTOR\n\n    def is_ta(self):\n        return self.role == Role.TA\n    \n    @staticmethod\n    def all():\n        return User.objects.all()", "func_code_string": "class UserClass:\n    def __init__(self, username, email, first_name, last_name, role=None, phone_number=None, home_address=None,\n                 courses=[], sent_notifications=[], received_notifications=[]):\n        self.username = username\n        self.email = email\n        self.first_name = first_name\n        self.last_name = last_name\n        self.phone_number = phone_number\n        self.home_address = home_address\n        self.role = role\n        self.courses = courses\n        self.sent_notifications = sent_notifications\n        self.received_notifications = received_notifications\n\n    @classmethod\n    def get_instance(cls, user):\n        from .supervisor_class import SupervisorClass\n        from .instructor_class import InstructorClass\n        from .ta_class import TAClass\n\n        if user.is_supervisor():\n            return SupervisorClass.get_instance(user)\n        \n        if user.is_instructor():\n            return InstructorClass.get_instance(user)\n        \n        if user.is_ta():\n            return TAClass.get_instance(user)\n\n        return cls(\n            user.username, \n            user.email, \n            user.first_name, \n            user.last_name, \n            user.role, \n            user.phone_number, \n            user.home_address, \n            list(user.courses.all()), \n            list(user.sent_notifications.all()), \n            list(user.received_notifications.all())\n        )\n\n    def save_details(self):\n        user = User(username=self.username, email=self.email, first_name=self.first_name,\n                    last_name=self.last_name, role=self.role)\n        user.role = self.role\n        user.save()\n\n        user.courses.set(self.courses)\n    \n    def get_model_instance(self):\n        return User.objects.get(username=self.username)\n\n    def validate(self):\n        if User.objects.filter(username=self.username).exists():\n            raise ValidationError('Username is taken.')\n        \n        if User.objects.filter(email=self.email).exists():\n            raise ValidationError('User with that email already exists!')\n        \n        domain_length = len(AUTH_EMAIL_DOMAIN)\n        if self.email[-domain_length:] != AUTH_EMAIL_DOMAIN:\n            raise ValidationError(f'Email does not end with {AUTH_EMAIL_DOMAIN}')\n\n        roles = set(role.value for role in Role)\n        if self.role not in roles:\n            raise ValidationError('Role does not exist!')\n        \n        if self.phone_number and not self.phone_number.isnumeric():\n            raise ValidationError('Phone number can only contain digits.')\n\n    def delete(self):\n        user = self.get_model_instance()\n        user.delete()\n\n    def get_username(self):\n        return self.username\n    \n    def set_username(self, username):\n        user = self.get_model_instance()\n        user.username = username\n        user.save()\n\n        self.username = username\n\n    def get_email(self):\n        return self.email\n    \n    def set_email(self, email):\n        user = self.get_model_instance()\n        user.email = email\n        user.save()\n\n        self.email = email\n    \n    def get_first_name(self):\n        return self.first_name\n    \n    def set_first_name(self, first_name):\n        user = self.get_model_instance()\n        user.first_name = first_name\n        user.save()\n\n        self.first_name = first_name\n    \n    def get_last_name(self):\n        return self.last_name\n    \n    def set_last_name(self, last_name):\n        user = self.get_model_instance()\n        user.last_name = last_name\n        user.save()\n\n        self.last_name = last_name\n    \n    def get_role(self):\n        return self.role\n    \n    def set_role(self, role):\n        user = self.get_model_instance()\n        user.role = role\n        user.save()\n\n        self.role = role\n\n    def set_password(self, raw_password):\n        user = self.get_model_instance()\n\n        validate_password(raw_password)\n        user.set_password(raw_password)\n        user.save()\n\n    def set_phone_number(self, phone_number):\n        user = self.get_model_instance()\n        user.phone_number = phone_number\n        user.save()\n\n        self.phone_number = phone_number\n\n    def set_home_address(self, home_address):\n        user = self.get_model_instance()\n        user.home_address = home_address\n        user.save()\n\n        self.home_address = home_address\n\n    def get_courses(self):\n        user = self.get_model_instance()\n        return user.courses.all()\n\n    def has_course(self, course):\n        user = self.get_model_instance()\n        return user.courses.filter(subject=course.subject, number=course.number).exists()\n\n    def add_course(self, course):\n        user = self.get_model_instance()\n\n        if not (course in self.courses):\n            user.courses.add(course)\n            self.courses = list(user.courses.all())\n\n    def get_received_notifications(self):\n        user = self.get_model_instance()\n        return user.received_notifications.all()\n    \n    def is_supervisor(self):\n        return self.role == Role.SUPERVISOR\n\n    def is_instructor(self):\n        return self.role == Role.INSTRUCTOR\n\n    def is_ta(self):\n        return self.role == Role.TA\n    \n    @staticmethod\n    def all():\n        return User.objects.all()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "__init__", "whole_func_string": "def __init__(self, username, email, first_name, last_name, role=None, phone_number=None, home_address=None,\n                 courses=[], sent_notifications=[], received_notifications=[]):\n        self.username = username\n        self.email = email\n        self.first_name = first_name\n        self.last_name = last_name\n        self.phone_number = phone_number\n        self.home_address = home_address\n        self.role = role\n        self.courses = courses\n        self.sent_notifications = sent_notifications\n        self.received_notifications = received_notifications", "func_code_string": "def __init__(self, username, email, first_name, last_name, role=None, phone_number=None, home_address=None,\n                 courses=[], sent_notifications=[], received_notifications=[]):\n        self.username = username\n        self.email = email\n        self.first_name = first_name\n        self.last_name = last_name\n        self.phone_number = phone_number\n        self.home_address = home_address\n        self.role = role\n        self.courses = courses\n        self.sent_notifications = sent_notifications\n        self.received_notifications = received_notifications", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "get_instance", "whole_func_string": "def get_instance(cls, user):\n        from .supervisor_class import SupervisorClass\n        from .instructor_class import InstructorClass\n        from .ta_class import TAClass\n\n        if user.is_supervisor():\n            return SupervisorClass.get_instance(user)\n        \n        if user.is_instructor():\n            return InstructorClass.get_instance(user)\n        \n        if user.is_ta():\n            return TAClass.get_instance(user)\n\n        return cls(\n            user.username, \n            user.email, \n            user.first_name, \n            user.last_name, \n            user.role, \n            user.phone_number, \n            user.home_address, \n            list(user.courses.all()), \n            list(user.sent_notifications.all()), \n            list(user.received_notifications.all())\n        )", "func_code_string": "def get_instance(cls, user):\n        from .supervisor_class import SupervisorClass\n        from .instructor_class import InstructorClass\n        from .ta_class import TAClass\n\n        if user.is_supervisor():\n            return SupervisorClass.get_instance(user)\n        \n        if user.is_instructor():\n            return InstructorClass.get_instance(user)\n        \n        if user.is_ta():\n            return TAClass.get_instance(user)\n\n        return cls(\n            user.username, \n            user.email, \n            user.first_name, \n            user.last_name, \n            user.role, \n            user.phone_number, \n            user.home_address, \n            list(user.courses.all()), \n            list(user.sent_notifications.all()), \n            list(user.received_notifications.all())\n        )", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "save_details", "whole_func_string": "def save_details(self):\n        user = User(username=self.username, email=self.email, first_name=self.first_name,\n                    last_name=self.last_name, role=self.role)\n        user.role = self.role\n        user.save()\n\n        user.courses.set(self.courses)", "func_code_string": "def save_details(self):\n        user = User(username=self.username, email=self.email, first_name=self.first_name,\n                    last_name=self.last_name, role=self.role)\n        user.role = self.role\n        user.save()\n\n        user.courses.set(self.courses)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "get_model_instance", "whole_func_string": "def get_model_instance(self):\n        return User.objects.get(username=self.username)", "func_code_string": "def get_model_instance(self):\n        return User.objects.get(username=self.username)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "validate", "whole_func_string": "def validate(self):\n        if User.objects.filter(username=self.username).exists():\n            raise ValidationError('Username is taken.')\n        \n        if User.objects.filter(email=self.email).exists():\n            raise ValidationError('User with that email already exists!')\n        \n        domain_length = len(AUTH_EMAIL_DOMAIN)\n        if self.email[-domain_length:] != AUTH_EMAIL_DOMAIN:\n            raise ValidationError(f'Email does not end with {AUTH_EMAIL_DOMAIN}')\n\n        roles = set(role.value for role in Role)\n        if self.role not in roles:\n            raise ValidationError('Role does not exist!')\n        \n        if self.phone_number and not self.phone_number.isnumeric():\n            raise ValidationError('Phone number can only contain digits.')", "func_code_string": "def validate(self):\n        if User.objects.filter(username=self.username).exists():\n            raise ValidationError('Username is taken.')\n        \n        if User.objects.filter(email=self.email).exists():\n            raise ValidationError('User with that email already exists!')\n        \n        domain_length = len(AUTH_EMAIL_DOMAIN)\n        if self.email[-domain_length:] != AUTH_EMAIL_DOMAIN:\n            raise ValidationError(f'Email does not end with {AUTH_EMAIL_DOMAIN}')\n\n        roles = set(role.value for role in Role)\n        if self.role not in roles:\n            raise ValidationError('Role does not exist!')\n        \n        if self.phone_number and not self.phone_number.isnumeric():\n            raise ValidationError('Phone number can only contain digits.')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "delete", "whole_func_string": "def delete(self):\n        user = self.get_model_instance()\n        user.delete()", "func_code_string": "def delete(self):\n        user = self.get_model_instance()\n        user.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "get_username", "whole_func_string": "def get_username(self):\n        return self.username", "func_code_string": "def get_username(self):\n        return self.username", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "set_username", "whole_func_string": "def set_username(self, username):\n        user = self.get_model_instance()\n        user.username = username\n        user.save()\n\n        self.username = username", "func_code_string": "def set_username(self, username):\n        user = self.get_model_instance()\n        user.username = username\n        user.save()\n\n        self.username = username", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "get_email", "whole_func_string": "def get_email(self):\n        return self.email", "func_code_string": "def get_email(self):\n        return self.email", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "set_email", "whole_func_string": "def set_email(self, email):\n        user = self.get_model_instance()\n        user.email = email\n        user.save()\n\n        self.email = email", "func_code_string": "def set_email(self, email):\n        user = self.get_model_instance()\n        user.email = email\n        user.save()\n\n        self.email = email", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "get_first_name", "whole_func_string": "def get_first_name(self):\n        return self.first_name", "func_code_string": "def get_first_name(self):\n        return self.first_name", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "set_first_name", "whole_func_string": "def set_first_name(self, first_name):\n        user = self.get_model_instance()\n        user.first_name = first_name\n        user.save()\n\n        self.first_name = first_name", "func_code_string": "def set_first_name(self, first_name):\n        user = self.get_model_instance()\n        user.first_name = first_name\n        user.save()\n\n        self.first_name = first_name", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "get_last_name", "whole_func_string": "def get_last_name(self):\n        return self.last_name", "func_code_string": "def get_last_name(self):\n        return self.last_name", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "set_last_name", "whole_func_string": "def set_last_name(self, last_name):\n        user = self.get_model_instance()\n        user.last_name = last_name\n        user.save()\n\n        self.last_name = last_name", "func_code_string": "def set_last_name(self, last_name):\n        user = self.get_model_instance()\n        user.last_name = last_name\n        user.save()\n\n        self.last_name = last_name", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "get_role", "whole_func_string": "def get_role(self):\n        return self.role", "func_code_string": "def get_role(self):\n        return self.role", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "set_role", "whole_func_string": "def set_role(self, role):\n        user = self.get_model_instance()\n        user.role = role\n        user.save()\n\n        self.role = role", "func_code_string": "def set_role(self, role):\n        user = self.get_model_instance()\n        user.role = role\n        user.save()\n\n        self.role = role", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "set_password", "whole_func_string": "def set_password(self, raw_password):\n        user = self.get_model_instance()\n\n        validate_password(raw_password)\n        user.set_password(raw_password)\n        user.save()", "func_code_string": "def set_password(self, raw_password):\n        user = self.get_model_instance()\n\n        validate_password(raw_password)\n        user.set_password(raw_password)\n        user.save()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "set_phone_number", "whole_func_string": "def set_phone_number(self, phone_number):\n        user = self.get_model_instance()\n        user.phone_number = phone_number\n        user.save()\n\n        self.phone_number = phone_number", "func_code_string": "def set_phone_number(self, phone_number):\n        user = self.get_model_instance()\n        user.phone_number = phone_number\n        user.save()\n\n        self.phone_number = phone_number", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "set_home_address", "whole_func_string": "def set_home_address(self, home_address):\n        user = self.get_model_instance()\n        user.home_address = home_address\n        user.save()\n\n        self.home_address = home_address", "func_code_string": "def set_home_address(self, home_address):\n        user = self.get_model_instance()\n        user.home_address = home_address\n        user.save()\n\n        self.home_address = home_address", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "get_courses", "whole_func_string": "def get_courses(self):\n        user = self.get_model_instance()\n        return user.courses.all()", "func_code_string": "def get_courses(self):\n        user = self.get_model_instance()\n        return user.courses.all()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "has_course", "whole_func_string": "def has_course(self, course):\n        user = self.get_model_instance()\n        return user.courses.filter(subject=course.subject, number=course.number).exists()", "func_code_string": "def has_course(self, course):\n        user = self.get_model_instance()\n        return user.courses.filter(subject=course.subject, number=course.number).exists()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "add_course", "whole_func_string": "def add_course(self, course):\n        user = self.get_model_instance()\n\n        if not (course in self.courses):\n            user.courses.add(course)\n            self.courses = list(user.courses.all())", "func_code_string": "def add_course(self, course):\n        user = self.get_model_instance()\n\n        if not (course in self.courses):\n            user.courses.add(course)\n            self.courses = list(user.courses.all())", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "get_received_notifications", "whole_func_string": "def get_received_notifications(self):\n        user = self.get_model_instance()\n        return user.received_notifications.all()", "func_code_string": "def get_received_notifications(self):\n        user = self.get_model_instance()\n        return user.received_notifications.all()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "is_supervisor", "whole_func_string": "def is_supervisor(self):\n        return self.role == Role.SUPERVISOR", "func_code_string": "def is_supervisor(self):\n        return self.role == Role.SUPERVISOR", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "is_instructor", "whole_func_string": "def is_instructor(self):\n        return self.role == Role.INSTRUCTOR", "func_code_string": "def is_instructor(self):\n        return self.role == Role.INSTRUCTOR", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "is_ta", "whole_func_string": "def is_ta(self):\n        return self.role == Role.TA", "func_code_string": "def is_ta(self):\n        return self.role == Role.TA", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/user_class.py", "func_name": "all", "whole_func_string": "def all():\n        return User.objects.all()", "func_code_string": "def all():\n        return User.objects.all()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "CourseClass", "whole_func_string": "class CourseClass:\n    def __init__(self, subject, number, name='', instructor=None):\n        self.subject = subject\n        self.number = number\n        self.name = name\n        self.instructor = instructor\n\n    @classmethod\n    def get_instance(cls, course):\n        return cls(course.subject, course.number, course.name, course.instructor)\n\n    def save_details(self):\n        course = Course(name=self.name, subject=self.subject,\n                        number=self.number, instructor=self.instructor)\n        course.save()\n        return f'Added {self.subject} {self.number} to the system.'\n\n    def get_model_instance(self):\n        return Course.objects.get(subject=self.subject, number=self.number)\n\n    def validate(self):\n        pass\n\n    def delete(self):\n        course = self.get_model_instance()\n        course.delete()\n\n    def get_subject(self):\n        return self.subject\n\n    def set_subject(self, subject):\n        course = self.get_model_instance()\n        course.subject = subject\n        course.save()\n\n        self.subject = subject\n\n    def get_number(self):\n        return self.number\n\n    def set_number(self, number):\n        course = self.get_model_instance()\n        course.number = number\n        course.save()\n\n        self.number = number\n\n    def get_name(self):\n        return self.name\n\n    def set_name(self, name):\n        course = self.get_model_instance()\n        course.name = name\n        course.save()\n\n        self.name = name\n\n    def get_instructor(self):\n        return self.instructor\n\n    def set_instructor(self, instructor):\n        course = self.get_model_instance()\n        course.instructor = instructor\n        course.save()\n\n        self.instructor = instructor\n\n    def get_tas(self):\n        course = self.get_model_instance()\n        return course.user_set.filter(role=Role.TA)\n\n    def get_sections(self):\n        course = self.get_model_instance()\n        return course.section_set.all()", "func_code_string": "class CourseClass:\n    def __init__(self, subject, number, name='', instructor=None):\n        self.subject = subject\n        self.number = number\n        self.name = name\n        self.instructor = instructor\n\n    @classmethod\n    def get_instance(cls, course):\n        return cls(course.subject, course.number, course.name, course.instructor)\n\n    def save_details(self):\n        course = Course(name=self.name, subject=self.subject,\n                        number=self.number, instructor=self.instructor)\n        course.save()\n        return f'Added {self.subject} {self.number} to the system.'\n\n    def get_model_instance(self):\n        return Course.objects.get(subject=self.subject, number=self.number)\n\n    def validate(self):\n        pass\n\n    def delete(self):\n        course = self.get_model_instance()\n        course.delete()\n\n    def get_subject(self):\n        return self.subject\n\n    def set_subject(self, subject):\n        course = self.get_model_instance()\n        course.subject = subject\n        course.save()\n\n        self.subject = subject\n\n    def get_number(self):\n        return self.number\n\n    def set_number(self, number):\n        course = self.get_model_instance()\n        course.number = number\n        course.save()\n\n        self.number = number\n\n    def get_name(self):\n        return self.name\n\n    def set_name(self, name):\n        course = self.get_model_instance()\n        course.name = name\n        course.save()\n\n        self.name = name\n\n    def get_instructor(self):\n        return self.instructor\n\n    def set_instructor(self, instructor):\n        course = self.get_model_instance()\n        course.instructor = instructor\n        course.save()\n\n        self.instructor = instructor\n\n    def get_tas(self):\n        course = self.get_model_instance()\n        return course.user_set.filter(role=Role.TA)\n\n    def get_sections(self):\n        course = self.get_model_instance()\n        return course.section_set.all()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "__init__", "whole_func_string": "def __init__(self, subject, number, name='', instructor=None):\n        self.subject = subject\n        self.number = number\n        self.name = name\n        self.instructor = instructor", "func_code_string": "def __init__(self, subject, number, name='', instructor=None):\n        self.subject = subject\n        self.number = number\n        self.name = name\n        self.instructor = instructor", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "get_instance", "whole_func_string": "def get_instance(cls, course):\n        return cls(course.subject, course.number, course.name, course.instructor)", "func_code_string": "def get_instance(cls, course):\n        return cls(course.subject, course.number, course.name, course.instructor)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "save_details", "whole_func_string": "def save_details(self):\n        course = Course(name=self.name, subject=self.subject,\n                        number=self.number, instructor=self.instructor)\n        course.save()\n        return f'Added {self.subject} {self.number} to the system.'", "func_code_string": "def save_details(self):\n        course = Course(name=self.name, subject=self.subject,\n                        number=self.number, instructor=self.instructor)\n        course.save()\n        return f'Added {self.subject} {self.number} to the system.'", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "get_model_instance", "whole_func_string": "def get_model_instance(self):\n        return Course.objects.get(subject=self.subject, number=self.number)", "func_code_string": "def get_model_instance(self):\n        return Course.objects.get(subject=self.subject, number=self.number)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "validate", "whole_func_string": "def validate(self):\n        pass", "func_code_string": "def validate(self):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "delete", "whole_func_string": "def delete(self):\n        course = self.get_model_instance()\n        course.delete()", "func_code_string": "def delete(self):\n        course = self.get_model_instance()\n        course.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "get_subject", "whole_func_string": "def get_subject(self):\n        return self.subject", "func_code_string": "def get_subject(self):\n        return self.subject", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "set_subject", "whole_func_string": "def set_subject(self, subject):\n        course = self.get_model_instance()\n        course.subject = subject\n        course.save()\n\n        self.subject = subject", "func_code_string": "def set_subject(self, subject):\n        course = self.get_model_instance()\n        course.subject = subject\n        course.save()\n\n        self.subject = subject", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "get_number", "whole_func_string": "def get_number(self):\n        return self.number", "func_code_string": "def get_number(self):\n        return self.number", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "set_number", "whole_func_string": "def set_number(self, number):\n        course = self.get_model_instance()\n        course.number = number\n        course.save()\n\n        self.number = number", "func_code_string": "def set_number(self, number):\n        course = self.get_model_instance()\n        course.number = number\n        course.save()\n\n        self.number = number", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "get_name", "whole_func_string": "def get_name(self):\n        return self.name", "func_code_string": "def get_name(self):\n        return self.name", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "set_name", "whole_func_string": "def set_name(self, name):\n        course = self.get_model_instance()\n        course.name = name\n        course.save()\n\n        self.name = name", "func_code_string": "def set_name(self, name):\n        course = self.get_model_instance()\n        course.name = name\n        course.save()\n\n        self.name = name", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "get_instructor", "whole_func_string": "def get_instructor(self):\n        return self.instructor", "func_code_string": "def get_instructor(self):\n        return self.instructor", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "set_instructor", "whole_func_string": "def set_instructor(self, instructor):\n        course = self.get_model_instance()\n        course.instructor = instructor\n        course.save()\n\n        self.instructor = instructor", "func_code_string": "def set_instructor(self, instructor):\n        course = self.get_model_instance()\n        course.instructor = instructor\n        course.save()\n\n        self.instructor = instructor", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "get_tas", "whole_func_string": "def get_tas(self):\n        course = self.get_model_instance()\n        return course.user_set.filter(role=Role.TA)", "func_code_string": "def get_tas(self):\n        course = self.get_model_instance()\n        return course.user_set.filter(role=Role.TA)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/course_class.py", "func_name": "get_sections", "whole_func_string": "def get_sections(self):\n        course = self.get_model_instance()\n        return course.section_set.all()", "func_code_string": "def get_sections(self):\n        course = self.get_model_instance()\n        return course.section_set.all()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "NotificationClass", "whole_func_string": "class NotificationClass:\n    def __init__(self, sender, recipient, subject, message, primary_key=None):\n        self.sender = sender\n        self.recipient = recipient\n        self.subject = subject\n        self.message = message\n        self.primary_key = primary_key\n\n    @classmethod\n    def get_instance(cls, notification):\n        return cls(\n            notification.sender, \n            notification.recipient, \n            notification.subject, \n            notification.message, \n            notification.id\n        )\n\n    def save_details(self):\n        notification = Notification(sender=self.sender, recipient=self.recipient,\n                                    subject=self.subject, message=self.message)\n        notification.save()\n\n        self.sender.sent_notifications.add(notification)\n        self.recipient.received_notifications.add(notification)\n\n        self.primary_key = notification.id\n\n    def get_model_instance(self):\n        return Notification.objects.get(pk=self.primary_key)\n\n    def validate(self):\n        pass\n\n    def delete(self):\n        notification = self.get_model_instance()\n        notification.delete()\n\n    def get_sender(self):\n        return self.sender\n\n    def get_recipient(self):\n        return self.recipient\n\n    def get_subject(self):\n        return self.subject\n\n    def get_message(self):\n        return self.message\n\n    def get_primary_key(self):\n        return self.primary_key", "func_code_string": "class NotificationClass:\n    def __init__(self, sender, recipient, subject, message, primary_key=None):\n        self.sender = sender\n        self.recipient = recipient\n        self.subject = subject\n        self.message = message\n        self.primary_key = primary_key\n\n    @classmethod\n    def get_instance(cls, notification):\n        return cls(\n            notification.sender, \n            notification.recipient, \n            notification.subject, \n            notification.message, \n            notification.id\n        )\n\n    def save_details(self):\n        notification = Notification(sender=self.sender, recipient=self.recipient,\n                                    subject=self.subject, message=self.message)\n        notification.save()\n\n        self.sender.sent_notifications.add(notification)\n        self.recipient.received_notifications.add(notification)\n\n        self.primary_key = notification.id\n\n    def get_model_instance(self):\n        return Notification.objects.get(pk=self.primary_key)\n\n    def validate(self):\n        pass\n\n    def delete(self):\n        notification = self.get_model_instance()\n        notification.delete()\n\n    def get_sender(self):\n        return self.sender\n\n    def get_recipient(self):\n        return self.recipient\n\n    def get_subject(self):\n        return self.subject\n\n    def get_message(self):\n        return self.message\n\n    def get_primary_key(self):\n        return self.primary_key", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "__init__", "whole_func_string": "def __init__(self, sender, recipient, subject, message, primary_key=None):\n        self.sender = sender\n        self.recipient = recipient\n        self.subject = subject\n        self.message = message\n        self.primary_key = primary_key", "func_code_string": "def __init__(self, sender, recipient, subject, message, primary_key=None):\n        self.sender = sender\n        self.recipient = recipient\n        self.subject = subject\n        self.message = message\n        self.primary_key = primary_key", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "get_instance", "whole_func_string": "def get_instance(cls, notification):\n        return cls(\n            notification.sender, \n            notification.recipient, \n            notification.subject, \n            notification.message, \n            notification.id\n        )", "func_code_string": "def get_instance(cls, notification):\n        return cls(\n            notification.sender, \n            notification.recipient, \n            notification.subject, \n            notification.message, \n            notification.id\n        )", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "save_details", "whole_func_string": "def save_details(self):\n        notification = Notification(sender=self.sender, recipient=self.recipient,\n                                    subject=self.subject, message=self.message)\n        notification.save()\n\n        self.sender.sent_notifications.add(notification)\n        self.recipient.received_notifications.add(notification)\n\n        self.primary_key = notification.id", "func_code_string": "def save_details(self):\n        notification = Notification(sender=self.sender, recipient=self.recipient,\n                                    subject=self.subject, message=self.message)\n        notification.save()\n\n        self.sender.sent_notifications.add(notification)\n        self.recipient.received_notifications.add(notification)\n\n        self.primary_key = notification.id", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "get_model_instance", "whole_func_string": "def get_model_instance(self):\n        return Notification.objects.get(pk=self.primary_key)", "func_code_string": "def get_model_instance(self):\n        return Notification.objects.get(pk=self.primary_key)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "validate", "whole_func_string": "def validate(self):\n        pass", "func_code_string": "def validate(self):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "delete", "whole_func_string": "def delete(self):\n        notification = self.get_model_instance()\n        notification.delete()", "func_code_string": "def delete(self):\n        notification = self.get_model_instance()\n        notification.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "get_sender", "whole_func_string": "def get_sender(self):\n        return self.sender", "func_code_string": "def get_sender(self):\n        return self.sender", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "get_recipient", "whole_func_string": "def get_recipient(self):\n        return self.recipient", "func_code_string": "def get_recipient(self):\n        return self.recipient", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "get_subject", "whole_func_string": "def get_subject(self):\n        return self.subject", "func_code_string": "def get_subject(self):\n        return self.subject", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "get_message", "whole_func_string": "def get_message(self):\n        return self.message", "func_code_string": "def get_message(self):\n        return self.message", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/notification_class.py", "func_name": "get_primary_key", "whole_func_string": "def get_primary_key(self):\n        return self.primary_key", "func_code_string": "def get_primary_key(self):\n        return self.primary_key", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/instructor_class.py", "func_name": "InstructorClass", "whole_func_string": "class InstructorClass(TAClass):\n    def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None, courses=[],\n                 sent_notifications=[], received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, phone_number, home_address, courses,\n                         received_notifications)\n        self.role = Role.INSTRUCTOR\n        self.sent_notifications = sent_notifications\n    \n    @classmethod\n    def get_instance(cls, instructor):\n        return cls(\n            instructor.username,\n            instructor.email,\n            instructor.first_name,\n            instructor.last_name,\n            instructor.phone_number,\n            instructor.home_address,\n            list(instructor.courses.all()),\n            list(instructor.sent_notifications.all()),\n            list(instructor.received_notifications.all())\n        )\n\n    def validate(self):\n        super().validate()\n\n        if self.role is not Role.INSTRUCTOR:\n            raise ValidationError('Role is not instructor.')\n\n    def assign_ta_section(self, ta, section):\n        section_class = SectionClass.get_instance(section)\n        section_class.set_ta(ta)\n    \n    def remove_ta_section(self, ta, section):\n        pass\n    \n    def get_sent_notifications(self):\n        return self.sent_notifications\n\n    def send_notifications(self, course, subject, message):\n        notifications = []\n        instructor = self.get_model_instance()\n        course_class = CourseClass.get_instance(course)\n\n        for ta in course_class.get_tas():\n            notification_class = NotificationClass(instructor, ta, subject, message)\n            notification_class.save_details()\n            notifications.append(notification_class.get_model_instance())\n        \n        return notifications", "func_code_string": "class InstructorClass(TAClass):\n    def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None, courses=[],\n                 sent_notifications=[], received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, phone_number, home_address, courses,\n                         received_notifications)\n        self.role = Role.INSTRUCTOR\n        self.sent_notifications = sent_notifications\n    \n    @classmethod\n    def get_instance(cls, instructor):\n        return cls(\n            instructor.username,\n            instructor.email,\n            instructor.first_name,\n            instructor.last_name,\n            instructor.phone_number,\n            instructor.home_address,\n            list(instructor.courses.all()),\n            list(instructor.sent_notifications.all()),\n            list(instructor.received_notifications.all())\n        )\n\n    def validate(self):\n        super().validate()\n\n        if self.role is not Role.INSTRUCTOR:\n            raise ValidationError('Role is not instructor.')\n\n    def assign_ta_section(self, ta, section):\n        section_class = SectionClass.get_instance(section)\n        section_class.set_ta(ta)\n    \n    def remove_ta_section(self, ta, section):\n        pass\n    \n    def get_sent_notifications(self):\n        return self.sent_notifications\n\n    def send_notifications(self, course, subject, message):\n        notifications = []\n        instructor = self.get_model_instance()\n        course_class = CourseClass.get_instance(course)\n\n        for ta in course_class.get_tas():\n            notification_class = NotificationClass(instructor, ta, subject, message)\n            notification_class.save_details()\n            notifications.append(notification_class.get_model_instance())\n        \n        return notifications", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/instructor_class.py", "func_name": "__init__", "whole_func_string": "def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None, courses=[],\n                 sent_notifications=[], received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, phone_number, home_address, courses,\n                         received_notifications)\n        self.role = Role.INSTRUCTOR\n        self.sent_notifications = sent_notifications", "func_code_string": "def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None, courses=[],\n                 sent_notifications=[], received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, phone_number, home_address, courses,\n                         received_notifications)\n        self.role = Role.INSTRUCTOR\n        self.sent_notifications = sent_notifications", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/instructor_class.py", "func_name": "get_instance", "whole_func_string": "def get_instance(cls, instructor):\n        return cls(\n            instructor.username,\n            instructor.email,\n            instructor.first_name,\n            instructor.last_name,\n            instructor.phone_number,\n            instructor.home_address,\n            list(instructor.courses.all()),\n            list(instructor.sent_notifications.all()),\n            list(instructor.received_notifications.all())\n        )", "func_code_string": "def get_instance(cls, instructor):\n        return cls(\n            instructor.username,\n            instructor.email,\n            instructor.first_name,\n            instructor.last_name,\n            instructor.phone_number,\n            instructor.home_address,\n            list(instructor.courses.all()),\n            list(instructor.sent_notifications.all()),\n            list(instructor.received_notifications.all())\n        )", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/instructor_class.py", "func_name": "validate", "whole_func_string": "def validate(self):\n        super().validate()\n\n        if self.role is not Role.INSTRUCTOR:\n            raise ValidationError('Role is not instructor.')", "func_code_string": "def validate(self):\n        super().validate()\n\n        if self.role is not Role.INSTRUCTOR:\n            raise ValidationError('Role is not instructor.')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/instructor_class.py", "func_name": "assign_ta_section", "whole_func_string": "def assign_ta_section(self, ta, section):\n        section_class = SectionClass.get_instance(section)\n        section_class.set_ta(ta)", "func_code_string": "def assign_ta_section(self, ta, section):\n        section_class = SectionClass.get_instance(section)\n        section_class.set_ta(ta)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/instructor_class.py", "func_name": "remove_ta_section", "whole_func_string": "def remove_ta_section(self, ta, section):\n        pass", "func_code_string": "def remove_ta_section(self, ta, section):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/instructor_class.py", "func_name": "get_sent_notifications", "whole_func_string": "def get_sent_notifications(self):\n        return self.sent_notifications", "func_code_string": "def get_sent_notifications(self):\n        return self.sent_notifications", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/instructor_class.py", "func_name": "send_notifications", "whole_func_string": "def send_notifications(self, course, subject, message):\n        notifications = []\n        instructor = self.get_model_instance()\n        course_class = CourseClass.get_instance(course)\n\n        for ta in course_class.get_tas():\n            notification_class = NotificationClass(instructor, ta, subject, message)\n            notification_class.save_details()\n            notifications.append(notification_class.get_model_instance())\n        \n        return notifications", "func_code_string": "def send_notifications(self, course, subject, message):\n        notifications = []\n        instructor = self.get_model_instance()\n        course_class = CourseClass.get_instance(course)\n\n        for ta in course_class.get_tas():\n            notification_class = NotificationClass(instructor, ta, subject, message)\n            notification_class.save_details()\n            notifications.append(notification_class.get_model_instance())\n        \n        return notifications", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/ta_class.py", "func_name": "TAClass", "whole_func_string": "class TAClass(UserClass):\n    def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None, courses=[],\n                 received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, Role.TA,\n                         phone_number, home_address, courses, [], received_notifications)\n\n    @classmethod\n    def get_instance(cls, ta):\n        return cls(\n            ta.username, \n            ta.email, \n            ta.first_name, \n            ta.last_name, \n            ta.phone_number, \n            ta.home_address, \n            list(ta.courses.all())\n        )\n\n    def validate(self):\n        super().validate()\n\n        if self.role is not Role.TA:\n            raise ValidationError('Role is not TA.')\n\n    def get_sections(self):\n        ta = self.get_model_instance()\n        return ta.section_set.all()\n\n    def has_section(self, section):\n        ta = self.get_model_instance()\n        return ta.section_set.filter(course=section.course, number=section.number).exists()", "func_code_string": "class TAClass(UserClass):\n    def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None, courses=[],\n                 received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, Role.TA,\n                         phone_number, home_address, courses, [], received_notifications)\n\n    @classmethod\n    def get_instance(cls, ta):\n        return cls(\n            ta.username, \n            ta.email, \n            ta.first_name, \n            ta.last_name, \n            ta.phone_number, \n            ta.home_address, \n            list(ta.courses.all())\n        )\n\n    def validate(self):\n        super().validate()\n\n        if self.role is not Role.TA:\n            raise ValidationError('Role is not TA.')\n\n    def get_sections(self):\n        ta = self.get_model_instance()\n        return ta.section_set.all()\n\n    def has_section(self, section):\n        ta = self.get_model_instance()\n        return ta.section_set.filter(course=section.course, number=section.number).exists()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/ta_class.py", "func_name": "__init__", "whole_func_string": "def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None, courses=[],\n                 received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, Role.TA,\n                         phone_number, home_address, courses, [], received_notifications)", "func_code_string": "def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None, courses=[],\n                 received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, Role.TA,\n                         phone_number, home_address, courses, [], received_notifications)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/ta_class.py", "func_name": "get_instance", "whole_func_string": "def get_instance(cls, ta):\n        return cls(\n            ta.username, \n            ta.email, \n            ta.first_name, \n            ta.last_name, \n            ta.phone_number, \n            ta.home_address, \n            list(ta.courses.all())\n        )", "func_code_string": "def get_instance(cls, ta):\n        return cls(\n            ta.username, \n            ta.email, \n            ta.first_name, \n            ta.last_name, \n            ta.phone_number, \n            ta.home_address, \n            list(ta.courses.all())\n        )", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/ta_class.py", "func_name": "validate", "whole_func_string": "def validate(self):\n        super().validate()\n\n        if self.role is not Role.TA:\n            raise ValidationError('Role is not TA.')", "func_code_string": "def validate(self):\n        super().validate()\n\n        if self.role is not Role.TA:\n            raise ValidationError('Role is not TA.')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/ta_class.py", "func_name": "get_sections", "whole_func_string": "def get_sections(self):\n        ta = self.get_model_instance()\n        return ta.section_set.all()", "func_code_string": "def get_sections(self):\n        ta = self.get_model_instance()\n        return ta.section_set.all()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/ta_class.py", "func_name": "has_section", "whole_func_string": "def has_section(self, section):\n        ta = self.get_model_instance()\n        return ta.section_set.filter(course=section.course, number=section.number).exists()", "func_code_string": "def has_section(self, section):\n        ta = self.get_model_instance()\n        return ta.section_set.filter(course=section.course, number=section.number).exists()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "SupervisorClass", "whole_func_string": "class SupervisorClass(InstructorClass):\n    def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None,\n                 sent_notifications=[], received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, phone_number,\n                         home_address, [], sent_notifications, received_notifications)\n        self.role = Role.SUPERVISOR\n\n    @classmethod\n    def get_instance(cls, supervisor):\n        return cls(\n            supervisor.username,\n            supervisor.email,\n            supervisor.first_name,\n            supervisor.last_name,\n            supervisor.phone_number,\n            supervisor.home_address,\n            list(supervisor.sent_notifications.all()),\n            list(supervisor.received_notifications.all())\n        )\n\n    def validate(self):\n        super().validate()\n\n        if self.role is not Role.SUPERVISOR:\n            raise ValidationError('Role is not supervisor.')\n\n    def get_courses(self):\n        return Course.objects.all()\n\n    def has_course(self, course):\n        return Course.objects.filter(subject=course.subject, number=course.number).exists()\n\n    def add_course(self, course):\n        pass\n\n    def get_sections(self):\n        return Section.objects.all()\n\n    def has_section(self, section):\n        return Section.objects.filter(course=section.course, number=section.number).exists()\n\n    def create_user(self, username, email, password, first_name, last_name, role=Role.TA, phone_number=None, home_address=None, courses=[], sent_notifications=[], received_notifications=[]):\n        user_class = UserClass(username, email, first_name, last_name, role, phone_number,\n                         home_address, courses, sent_notifications, received_notifications)\n        user_class.save_details()\n        user_class.set_password(password)\n\n        return user_class.get_model_instance()\n\n    def delete_user(self, user):\n        user_class = UserClass.get_instance(user)\n        user_class.delete()\n\n    def edit_user(self, user, username, email, password, first_name, last_name, role=Role.TA, phone_number=None, home_address=None):\n        user_class = UserClass.get_instance(user)\n\n        user_class.set_username(username)\n        user_class.set_email(email)\n        user_class.set_first_name(first_name)\n        user_class.set_last_name(last_name)\n        user_class.set_password(password)\n        user_class.set_role(role)\n        user_class.set_phone_number(phone_number)\n        user_class.set_home_address(home_address)\n\n        return user_class.get_model_instance()\n\n    def create_course(self, subject, number, name='', instructor=None):\n        course_class = CourseClass(subject, number, name, instructor)\n        course_class.save_details()\n\n        return course_class.get_model_instance()\n\n    def delete_course(self, course):\n        course_class = CourseClass.get_instance(course)\n        course_class.delete()\n\n    def edit_course(self, course, subject, number, name, instructor=None):\n        course_class = CourseClass.get_instance(course)\n\n        course_class.set_subject(subject)\n        course_class.set_number(number)\n        course_class.set_name(name)\n        course_class.set_instructor(instructor)\n\n        return course_class.get_model_instance()\n\n    def create_section(self, course, number, tas=[]):\n        section_class = SectionClass(number, course, tas)\n        section_class.save_details()\n\n        return section_class.get_model_instance()\n\n    def delete_section(self, section):\n        section_class = SectionClass.get_instance(section)\n        section_class.delete()\n\n    def assign_instructor_course(self, instructor, course):\n        instructor_class = InstructorClass.get_instance(instructor)\n        course_class = CourseClass.get_instance(course)\n        \n        instructor_class.add_course(course)\n        course_class.set_instructor(instructor)\n        \n        course = course.refresh_from_db()\n\n    def assign_ta_course(self, ta, course):\n        ta_class = TAClass.get_instance(ta)\n        ta_class.add_course(course)\n    \n    def remove_ta_course(self, ta, course):\n        pass\n    \n    def send_notifications(self, subject, message):\n        notifications = []\n        supervisor = self.get_model_instance()\n\n        for user in UserClass.all().exclude(username=supervisor.username):\n            notification_class = NotificationClass(supervisor, user, subject, message)\n            notification_class.save_details()\n            notifications.append(notification_class.get_model_instance())\n\n        return notifications", "func_code_string": "class SupervisorClass(InstructorClass):\n    def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None,\n                 sent_notifications=[], received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, phone_number,\n                         home_address, [], sent_notifications, received_notifications)\n        self.role = Role.SUPERVISOR\n\n    @classmethod\n    def get_instance(cls, supervisor):\n        return cls(\n            supervisor.username,\n            supervisor.email,\n            supervisor.first_name,\n            supervisor.last_name,\n            supervisor.phone_number,\n            supervisor.home_address,\n            list(supervisor.sent_notifications.all()),\n            list(supervisor.received_notifications.all())\n        )\n\n    def validate(self):\n        super().validate()\n\n        if self.role is not Role.SUPERVISOR:\n            raise ValidationError('Role is not supervisor.')\n\n    def get_courses(self):\n        return Course.objects.all()\n\n    def has_course(self, course):\n        return Course.objects.filter(subject=course.subject, number=course.number).exists()\n\n    def add_course(self, course):\n        pass\n\n    def get_sections(self):\n        return Section.objects.all()\n\n    def has_section(self, section):\n        return Section.objects.filter(course=section.course, number=section.number).exists()\n\n    def create_user(self, username, email, password, first_name, last_name, role=Role.TA, phone_number=None, home_address=None, courses=[], sent_notifications=[], received_notifications=[]):\n        user_class = UserClass(username, email, first_name, last_name, role, phone_number,\n                         home_address, courses, sent_notifications, received_notifications)\n        user_class.save_details()\n        user_class.set_password(password)\n\n        return user_class.get_model_instance()\n\n    def delete_user(self, user):\n        user_class = UserClass.get_instance(user)\n        user_class.delete()\n\n    def edit_user(self, user, username, email, password, first_name, last_name, role=Role.TA, phone_number=None, home_address=None):\n        user_class = UserClass.get_instance(user)\n\n        user_class.set_username(username)\n        user_class.set_email(email)\n        user_class.set_first_name(first_name)\n        user_class.set_last_name(last_name)\n        user_class.set_password(password)\n        user_class.set_role(role)\n        user_class.set_phone_number(phone_number)\n        user_class.set_home_address(home_address)\n\n        return user_class.get_model_instance()\n\n    def create_course(self, subject, number, name='', instructor=None):\n        course_class = CourseClass(subject, number, name, instructor)\n        course_class.save_details()\n\n        return course_class.get_model_instance()\n\n    def delete_course(self, course):\n        course_class = CourseClass.get_instance(course)\n        course_class.delete()\n\n    def edit_course(self, course, subject, number, name, instructor=None):\n        course_class = CourseClass.get_instance(course)\n\n        course_class.set_subject(subject)\n        course_class.set_number(number)\n        course_class.set_name(name)\n        course_class.set_instructor(instructor)\n\n        return course_class.get_model_instance()\n\n    def create_section(self, course, number, tas=[]):\n        section_class = SectionClass(number, course, tas)\n        section_class.save_details()\n\n        return section_class.get_model_instance()\n\n    def delete_section(self, section):\n        section_class = SectionClass.get_instance(section)\n        section_class.delete()\n\n    def assign_instructor_course(self, instructor, course):\n        instructor_class = InstructorClass.get_instance(instructor)\n        course_class = CourseClass.get_instance(course)\n        \n        instructor_class.add_course(course)\n        course_class.set_instructor(instructor)\n        \n        course = course.refresh_from_db()\n\n    def assign_ta_course(self, ta, course):\n        ta_class = TAClass.get_instance(ta)\n        ta_class.add_course(course)\n    \n    def remove_ta_course(self, ta, course):\n        pass\n    \n    def send_notifications(self, subject, message):\n        notifications = []\n        supervisor = self.get_model_instance()\n\n        for user in UserClass.all().exclude(username=supervisor.username):\n            notification_class = NotificationClass(supervisor, user, subject, message)\n            notification_class.save_details()\n            notifications.append(notification_class.get_model_instance())\n\n        return notifications", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "__init__", "whole_func_string": "def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None,\n                 sent_notifications=[], received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, phone_number,\n                         home_address, [], sent_notifications, received_notifications)\n        self.role = Role.SUPERVISOR", "func_code_string": "def __init__(self, username, email, first_name, last_name, phone_number=None, home_address=None,\n                 sent_notifications=[], received_notifications=[]):\n        super().__init__(username, email, first_name, last_name, phone_number,\n                         home_address, [], sent_notifications, received_notifications)\n        self.role = Role.SUPERVISOR", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "get_instance", "whole_func_string": "def get_instance(cls, supervisor):\n        return cls(\n            supervisor.username,\n            supervisor.email,\n            supervisor.first_name,\n            supervisor.last_name,\n            supervisor.phone_number,\n            supervisor.home_address,\n            list(supervisor.sent_notifications.all()),\n            list(supervisor.received_notifications.all())\n        )", "func_code_string": "def get_instance(cls, supervisor):\n        return cls(\n            supervisor.username,\n            supervisor.email,\n            supervisor.first_name,\n            supervisor.last_name,\n            supervisor.phone_number,\n            supervisor.home_address,\n            list(supervisor.sent_notifications.all()),\n            list(supervisor.received_notifications.all())\n        )", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "validate", "whole_func_string": "def validate(self):\n        super().validate()\n\n        if self.role is not Role.SUPERVISOR:\n            raise ValidationError('Role is not supervisor.')", "func_code_string": "def validate(self):\n        super().validate()\n\n        if self.role is not Role.SUPERVISOR:\n            raise ValidationError('Role is not supervisor.')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "get_courses", "whole_func_string": "def get_courses(self):\n        return Course.objects.all()", "func_code_string": "def get_courses(self):\n        return Course.objects.all()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "has_course", "whole_func_string": "def has_course(self, course):\n        return Course.objects.filter(subject=course.subject, number=course.number).exists()", "func_code_string": "def has_course(self, course):\n        return Course.objects.filter(subject=course.subject, number=course.number).exists()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "add_course", "whole_func_string": "def add_course(self, course):\n        pass", "func_code_string": "def add_course(self, course):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "get_sections", "whole_func_string": "def get_sections(self):\n        return Section.objects.all()", "func_code_string": "def get_sections(self):\n        return Section.objects.all()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "has_section", "whole_func_string": "def has_section(self, section):\n        return Section.objects.filter(course=section.course, number=section.number).exists()", "func_code_string": "def has_section(self, section):\n        return Section.objects.filter(course=section.course, number=section.number).exists()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "create_user", "whole_func_string": "def create_user(self, username, email, password, first_name, last_name, role=Role.TA, phone_number=None, home_address=None, courses=[], sent_notifications=[], received_notifications=[]):\n        user_class = UserClass(username, email, first_name, last_name, role, phone_number,\n                         home_address, courses, sent_notifications, received_notifications)\n        user_class.save_details()\n        user_class.set_password(password)\n\n        return user_class.get_model_instance()", "func_code_string": "def create_user(self, username, email, password, first_name, last_name, role=Role.TA, phone_number=None, home_address=None, courses=[], sent_notifications=[], received_notifications=[]):\n        user_class = UserClass(username, email, first_name, last_name, role, phone_number,\n                         home_address, courses, sent_notifications, received_notifications)\n        user_class.save_details()\n        user_class.set_password(password)\n\n        return user_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "delete_user", "whole_func_string": "def delete_user(self, user):\n        user_class = UserClass.get_instance(user)\n        user_class.delete()", "func_code_string": "def delete_user(self, user):\n        user_class = UserClass.get_instance(user)\n        user_class.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "edit_user", "whole_func_string": "def edit_user(self, user, username, email, password, first_name, last_name, role=Role.TA, phone_number=None, home_address=None):\n        user_class = UserClass.get_instance(user)\n\n        user_class.set_username(username)\n        user_class.set_email(email)\n        user_class.set_first_name(first_name)\n        user_class.set_last_name(last_name)\n        user_class.set_password(password)\n        user_class.set_role(role)\n        user_class.set_phone_number(phone_number)\n        user_class.set_home_address(home_address)\n\n        return user_class.get_model_instance()", "func_code_string": "def edit_user(self, user, username, email, password, first_name, last_name, role=Role.TA, phone_number=None, home_address=None):\n        user_class = UserClass.get_instance(user)\n\n        user_class.set_username(username)\n        user_class.set_email(email)\n        user_class.set_first_name(first_name)\n        user_class.set_last_name(last_name)\n        user_class.set_password(password)\n        user_class.set_role(role)\n        user_class.set_phone_number(phone_number)\n        user_class.set_home_address(home_address)\n\n        return user_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "create_course", "whole_func_string": "def create_course(self, subject, number, name='', instructor=None):\n        course_class = CourseClass(subject, number, name, instructor)\n        course_class.save_details()\n\n        return course_class.get_model_instance()", "func_code_string": "def create_course(self, subject, number, name='', instructor=None):\n        course_class = CourseClass(subject, number, name, instructor)\n        course_class.save_details()\n\n        return course_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "delete_course", "whole_func_string": "def delete_course(self, course):\n        course_class = CourseClass.get_instance(course)\n        course_class.delete()", "func_code_string": "def delete_course(self, course):\n        course_class = CourseClass.get_instance(course)\n        course_class.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "edit_course", "whole_func_string": "def edit_course(self, course, subject, number, name, instructor=None):\n        course_class = CourseClass.get_instance(course)\n\n        course_class.set_subject(subject)\n        course_class.set_number(number)\n        course_class.set_name(name)\n        course_class.set_instructor(instructor)\n\n        return course_class.get_model_instance()", "func_code_string": "def edit_course(self, course, subject, number, name, instructor=None):\n        course_class = CourseClass.get_instance(course)\n\n        course_class.set_subject(subject)\n        course_class.set_number(number)\n        course_class.set_name(name)\n        course_class.set_instructor(instructor)\n\n        return course_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "create_section", "whole_func_string": "def create_section(self, course, number, tas=[]):\n        section_class = SectionClass(number, course, tas)\n        section_class.save_details()\n\n        return section_class.get_model_instance()", "func_code_string": "def create_section(self, course, number, tas=[]):\n        section_class = SectionClass(number, course, tas)\n        section_class.save_details()\n\n        return section_class.get_model_instance()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "delete_section", "whole_func_string": "def delete_section(self, section):\n        section_class = SectionClass.get_instance(section)\n        section_class.delete()", "func_code_string": "def delete_section(self, section):\n        section_class = SectionClass.get_instance(section)\n        section_class.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "assign_instructor_course", "whole_func_string": "def assign_instructor_course(self, instructor, course):\n        instructor_class = InstructorClass.get_instance(instructor)\n        course_class = CourseClass.get_instance(course)\n        \n        instructor_class.add_course(course)\n        course_class.set_instructor(instructor)\n        \n        course = course.refresh_from_db()", "func_code_string": "def assign_instructor_course(self, instructor, course):\n        instructor_class = InstructorClass.get_instance(instructor)\n        course_class = CourseClass.get_instance(course)\n        \n        instructor_class.add_course(course)\n        course_class.set_instructor(instructor)\n        \n        course = course.refresh_from_db()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "assign_ta_course", "whole_func_string": "def assign_ta_course(self, ta, course):\n        ta_class = TAClass.get_instance(ta)\n        ta_class.add_course(course)", "func_code_string": "def assign_ta_course(self, ta, course):\n        ta_class = TAClass.get_instance(ta)\n        ta_class.add_course(course)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "remove_ta_course", "whole_func_string": "def remove_ta_course(self, ta, course):\n        pass", "func_code_string": "def remove_ta_course(self, ta, course):\n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "classes/supervisor_class.py", "func_name": "send_notifications", "whole_func_string": "def send_notifications(self, subject, message):\n        notifications = []\n        supervisor = self.get_model_instance()\n\n        for user in UserClass.all().exclude(username=supervisor.username):\n            notification_class = NotificationClass(supervisor, user, subject, message)\n            notification_class.save_details()\n            notifications.append(notification_class.get_model_instance())\n\n        return notifications", "func_code_string": "def send_notifications(self, subject, message):\n        notifications = []\n        supervisor = self.get_model_instance()\n\n        for user in UserClass.all().exclude(username=supervisor.username):\n            notification_class = NotificationClass(supervisor, user, subject, message)\n            notification_class.save_details()\n            notifications.append(notification_class.get_model_instance())\n\n        return notifications", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_user.py", "func_name": "UserAcceptanceTest", "whole_func_string": "class UserAcceptanceTest(TestCase):\n    def test_create_user(self):\n                           \n        username = 'testuser'\n        email = 'testuser@example.com'\n        password = 'testpassword'\n        role = 1                                            \n\n        user = User(username=username, email=email, password=password, role=role)\n        user.save()\n\n                                             \n        created_user = User.objects.get(username=username)\n\n                                                              \n        self.assertEqual(created_user.username, username)\n        self.assertEqual(created_user.email, email)\n        self.assertEqual(created_user.role, role)\n\n    def test_update_user(self):\n                           \n        username = 'testuser'\n        email = 'testuser@example.com'\n        password = 'testpassword'\n        role = 1                                            \n\n        user = User(username=username, email=email, password=password, role=role)\n        user.save()\n\n                                             \n        existing_user = User.objects.get(username=username)\n\n                                                      \n        new_email = 'updated_email@example.com'\n        existing_user.email = new_email\n        existing_user.save()\n\n                                                   \n        updated_user = User.objects.get(username=username)\n\n                                                        \n        self.assertEqual(updated_user.email, new_email)", "func_code_string": "class UserAcceptanceTest(TestCase):\n    def test_create_user(self):\n                           \n        username = 'testuser'\n        email = 'testuser@example.com'\n        password = 'testpassword'\n        role = 1                                            \n\n        user = User(username=username, email=email, password=password, role=role)\n        user.save()\n\n                                             \n        created_user = User.objects.get(username=username)\n\n                                                              \n        self.assertEqual(created_user.username, username)\n        self.assertEqual(created_user.email, email)\n        self.assertEqual(created_user.role, role)\n\n    def test_update_user(self):\n                           \n        username = 'testuser'\n        email = 'testuser@example.com'\n        password = 'testpassword'\n        role = 1                                            \n\n        user = User(username=username, email=email, password=password, role=role)\n        user.save()\n\n                                             \n        existing_user = User.objects.get(username=username)\n\n                                                      \n        new_email = 'updated_email@example.com'\n        existing_user.email = new_email\n        existing_user.save()\n\n                                                   \n        updated_user = User.objects.get(username=username)\n\n                                                        \n        self.assertEqual(updated_user.email, new_email)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_user.py", "func_name": "test_create_user", "whole_func_string": "def test_create_user(self):\n                           \n        username = 'testuser'\n        email = 'testuser@example.com'\n        password = 'testpassword'\n        role = 1                                            \n\n        user = User(username=username, email=email, password=password, role=role)\n        user.save()\n\n                                             \n        created_user = User.objects.get(username=username)\n\n                                                              \n        self.assertEqual(created_user.username, username)\n        self.assertEqual(created_user.email, email)\n        self.assertEqual(created_user.role, role)", "func_code_string": "def test_create_user(self):\n                           \n        username = 'testuser'\n        email = 'testuser@example.com'\n        password = 'testpassword'\n        role = 1                                            \n\n        user = User(username=username, email=email, password=password, role=role)\n        user.save()\n\n                                             \n        created_user = User.objects.get(username=username)\n\n                                                              \n        self.assertEqual(created_user.username, username)\n        self.assertEqual(created_user.email, email)\n        self.assertEqual(created_user.role, role)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_user.py", "func_name": "test_update_user", "whole_func_string": "def test_update_user(self):\n                           \n        username = 'testuser'\n        email = 'testuser@example.com'\n        password = 'testpassword'\n        role = 1                                            \n\n        user = User(username=username, email=email, password=password, role=role)\n        user.save()\n\n                                             \n        existing_user = User.objects.get(username=username)\n\n                                                      \n        new_email = 'updated_email@example.com'\n        existing_user.email = new_email\n        existing_user.save()\n\n                                                   \n        updated_user = User.objects.get(username=username)\n\n                                                        \n        self.assertEqual(updated_user.email, new_email)", "func_code_string": "def test_update_user(self):\n                           \n        username = 'testuser'\n        email = 'testuser@example.com'\n        password = 'testpassword'\n        role = 1                                            \n\n        user = User(username=username, email=email, password=password, role=role)\n        user.save()\n\n                                             \n        existing_user = User.objects.get(username=username)\n\n                                                      \n        new_email = 'updated_email@example.com'\n        existing_user.email = new_email\n        existing_user.save()\n\n                                                   \n        updated_user = User.objects.get(username=username)\n\n                                                        \n        self.assertEqual(updated_user.email, new_email)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "TestCreateUser", "whole_func_string": "class TestCreateUser(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.supervisor = User.objects.create(first_name='Supervisor', last_name='Test', email='super@uwm.edu',\n                                              username=\"super\", password=\"super\", role=Role.SUPERVISOR)\n        self.instructor = User.objects.create(first_name='Instructor', last_name='Test', email='inst@uwm.edu',\n                                              username=\"inst\", password=\"inst\", role=Role.INSTRUCTOR)\n        self.ta = User.objects.create(first_name='TA', last_name='Test', email='ta@uwm.edu', username=\"ta\",\n                                      password=\"ta\", role=Role.TA)\n\n    def test_ta_view(self):\n                                                                                                        \n                                                   \n         \n                                                                                     \n                                                                                            \n        pass\n\n    def test_instructor_view(self):\n                                                                                                                        \n                                                   \n           \n                                                                                             \n                                                       \n        pass\n\n    def test_supervisor_view(self):\n                                                                                                                        \n                                                   \n           \n                                                                                             \n                                                      \n        pass\n\n    def test_empty_parameter(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"\", \"last_name\": \"\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors, \"Please fill out this section\", msg='Created account with empty parameter')\n\n    def test_invalid_username(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['username'], \"Must provide a username\", msg='Created account with empty parameter')\n\n    def test_invalid_email(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@google.com\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['email'], \"Email does not end with @uwm.edu\",\n                         msg='Created account with invalid email')\n\n    def test_invalid_first_name(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"new\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['first_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')\n\n    def test_invalid_last_name(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"user\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')\n\n    def test_none_matching_passwords(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')\n\n    def test_preexisting_username(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"test@uwm.edu\",\n                                                   \"username\": \"super\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Username is taken.\",\n                         msg='Created account with duplicate username')\n\n    def test_preexisiting_email(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"super@uwm.edu\",\n                                                   \"username\": \"test\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        self.assertEqual(resp.context[\"message\"], \"User with that email already exists!\",\n                         msg='Created account with duplicate email')\n\n    def test_successful_user_creation(self):\n        response = self.client.post('/', {'username': self.supervisor.username, 'password': self.supervisor.password})\n        self.assertEqual(response.url, '/login/')\n\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"test@uwm.edu\",\n                                \"username\": \"test\", \"password\": \"test\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        self.assertEqual(resp.context[\"message\"], \"'New User' has been created\",\n                         msg='Did not create account')", "func_code_string": "class TestCreateUser(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.supervisor = User.objects.create(first_name='Supervisor', last_name='Test', email='super@uwm.edu',\n                                              username=\"super\", password=\"super\", role=Role.SUPERVISOR)\n        self.instructor = User.objects.create(first_name='Instructor', last_name='Test', email='inst@uwm.edu',\n                                              username=\"inst\", password=\"inst\", role=Role.INSTRUCTOR)\n        self.ta = User.objects.create(first_name='TA', last_name='Test', email='ta@uwm.edu', username=\"ta\",\n                                      password=\"ta\", role=Role.TA)\n\n    def test_ta_view(self):\n                                                                                                        \n                                                   \n         \n                                                                                     \n                                                                                            \n        pass\n\n    def test_instructor_view(self):\n                                                                                                                        \n                                                   \n           \n                                                                                             \n                                                       \n        pass\n\n    def test_supervisor_view(self):\n                                                                                                                        \n                                                   \n           \n                                                                                             \n                                                      \n        pass\n\n    def test_empty_parameter(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"\", \"last_name\": \"\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors, \"Please fill out this section\", msg='Created account with empty parameter')\n\n    def test_invalid_username(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['username'], \"Must provide a username\", msg='Created account with empty parameter')\n\n    def test_invalid_email(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@google.com\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['email'], \"Email does not end with @uwm.edu\",\n                         msg='Created account with invalid email')\n\n    def test_invalid_first_name(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"new\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['first_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')\n\n    def test_invalid_last_name(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"user\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')\n\n    def test_none_matching_passwords(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')\n\n    def test_preexisting_username(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"test@uwm.edu\",\n                                                   \"username\": \"super\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Username is taken.\",\n                         msg='Created account with duplicate username')\n\n    def test_preexisiting_email(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"super@uwm.edu\",\n                                                   \"username\": \"test\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        self.assertEqual(resp.context[\"message\"], \"User with that email already exists!\",\n                         msg='Created account with duplicate email')\n\n    def test_successful_user_creation(self):\n        response = self.client.post('/', {'username': self.supervisor.username, 'password': self.supervisor.password})\n        self.assertEqual(response.url, '/login/')\n\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"test@uwm.edu\",\n                                \"username\": \"test\", \"password\": \"test\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        self.assertEqual(resp.context[\"message\"], \"'New User' has been created\",\n                         msg='Did not create account')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n        self.client = Client()\n        self.supervisor = User.objects.create(first_name='Supervisor', last_name='Test', email='super@uwm.edu',\n                                              username=\"super\", password=\"super\", role=Role.SUPERVISOR)\n        self.instructor = User.objects.create(first_name='Instructor', last_name='Test', email='inst@uwm.edu',\n                                              username=\"inst\", password=\"inst\", role=Role.INSTRUCTOR)\n        self.ta = User.objects.create(first_name='TA', last_name='Test', email='ta@uwm.edu', username=\"ta\",\n                                      password=\"ta\", role=Role.TA)", "func_code_string": "def setUp(self):\n        self.client = Client()\n        self.supervisor = User.objects.create(first_name='Supervisor', last_name='Test', email='super@uwm.edu',\n                                              username=\"super\", password=\"super\", role=Role.SUPERVISOR)\n        self.instructor = User.objects.create(first_name='Instructor', last_name='Test', email='inst@uwm.edu',\n                                              username=\"inst\", password=\"inst\", role=Role.INSTRUCTOR)\n        self.ta = User.objects.create(first_name='TA', last_name='Test', email='ta@uwm.edu', username=\"ta\",\n                                      password=\"ta\", role=Role.TA)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_ta_view", "whole_func_string": "def test_ta_view(self):\n                                                                                                        \n                                                   \n         \n                                                                                     \n                                                                                            \n        pass", "func_code_string": "def test_ta_view(self):\n                                                                                                        \n                                                   \n         \n                                                                                     \n                                                                                            \n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_instructor_view", "whole_func_string": "def test_instructor_view(self):\n                                                                                                                        \n                                                   \n           \n                                                                                             \n                                                       \n        pass", "func_code_string": "def test_instructor_view(self):\n                                                                                                                        \n                                                   \n           \n                                                                                             \n                                                       \n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_supervisor_view", "whole_func_string": "def test_supervisor_view(self):\n                                                                                                                        \n                                                   \n           \n                                                                                             \n                                                      \n        pass", "func_code_string": "def test_supervisor_view(self):\n                                                                                                                        \n                                                   \n           \n                                                                                             \n                                                      \n        pass", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_empty_parameter", "whole_func_string": "def test_empty_parameter(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"\", \"last_name\": \"\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors, \"Please fill out this section\", msg='Created account with empty parameter')", "func_code_string": "def test_empty_parameter(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"\", \"last_name\": \"\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors, \"Please fill out this section\", msg='Created account with empty parameter')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_invalid_username", "whole_func_string": "def test_invalid_username(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['username'], \"Must provide a username\", msg='Created account with empty parameter')", "func_code_string": "def test_invalid_username(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['username'], \"Must provide a username\", msg='Created account with empty parameter')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_invalid_email", "whole_func_string": "def test_invalid_email(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@google.com\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['email'], \"Email does not end with @uwm.edu\",\n                         msg='Created account with invalid email')", "func_code_string": "def test_invalid_email(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@google.com\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['email'], \"Email does not end with @uwm.edu\",\n                         msg='Created account with invalid email')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_invalid_first_name", "whole_func_string": "def test_invalid_first_name(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"new\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['first_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')", "func_code_string": "def test_invalid_first_name(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"new\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['first_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_invalid_last_name", "whole_func_string": "def test_invalid_last_name(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"user\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')", "func_code_string": "def test_invalid_last_name(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"user\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_none_matching_passwords", "whole_func_string": "def test_none_matching_passwords(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')", "func_code_string": "def test_none_matching_passwords(self):\n        resp = self.client.post(\"/users/create/\", {\"username\": \"newuser\", \"email\": \"newuser@uwm.edu\",\n                                                   \"first_name\": \"New\", \"last_name\": \"User\"}, follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Please fill out this section\",\n                         msg='Created account with empty parameter')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_preexisting_username", "whole_func_string": "def test_preexisting_username(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"test@uwm.edu\",\n                                                   \"username\": \"super\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Username is taken.\",\n                         msg='Created account with duplicate username')", "func_code_string": "def test_preexisting_username(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"test@uwm.edu\",\n                                                   \"username\": \"super\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        form = resp.context['form']\n        self.assertEqual(form.is_valid(), False)\n        self.assertEqual(form.errors['last_name'], \"Username is taken.\",\n                         msg='Created account with duplicate username')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_preexisiting_email", "whole_func_string": "def test_preexisiting_email(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"super@uwm.edu\",\n                                                   \"username\": \"test\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        self.assertEqual(resp.context[\"message\"], \"User with that email already exists!\",\n                         msg='Created account with duplicate email')", "func_code_string": "def test_preexisiting_email(self):\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"super@uwm.edu\",\n                                                   \"username\": \"test\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        self.assertEqual(resp.context[\"message\"], \"User with that email already exists!\",\n                         msg='Created account with duplicate email')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_user_view.py", "func_name": "test_successful_user_creation", "whole_func_string": "def test_successful_user_creation(self):\n        response = self.client.post('/', {'username': self.supervisor.username, 'password': self.supervisor.password})\n        self.assertEqual(response.url, '/login/')\n\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"test@uwm.edu\",\n                                \"username\": \"test\", \"password\": \"test\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        self.assertEqual(resp.context[\"message\"], \"'New User' has been created\",\n                         msg='Did not create account')", "func_code_string": "def test_successful_user_creation(self):\n        response = self.client.post('/', {'username': self.supervisor.username, 'password': self.supervisor.password})\n        self.assertEqual(response.url, '/login/')\n\n        resp = self.client.post(\"/users/create/\", {\"first_name\": \"New\", \"last_name\": \"User\", \"email\": \"test@uwm.edu\",\n                                \"username\": \"test\", \"password\": \"test\", \"password\": \"test\", \"staff_role\": \"supervisor\"},\n                                follow=True)\n        self.assertEqual(resp.context[\"message\"], \"'New User' has been created\",\n                         msg='Did not create account')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_login.py", "func_name": "TestLogin", "whole_func_string": "class TestLogin(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.login_url = reverse('login')\n        self.dashboard_url = reverse('view_courses')\n        self.username = 'testuser'\n        self.password = 'testpass123'\n        self.user = User.objects.create_user(self.username, password=self.password)\n\n    def test_login(self):\n        response = self.client.post(self.login_url, {'username': self.username, 'password': self.password})\n        self.assertRedirects(response, self.dashboard_url, status_code=302, target_status_code=200)\n        self.assertTrue(authenticate(username=self.username, password=self.password))", "func_code_string": "class TestLogin(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.login_url = reverse('login')\n        self.dashboard_url = reverse('view_courses')\n        self.username = 'testuser'\n        self.password = 'testpass123'\n        self.user = User.objects.create_user(self.username, password=self.password)\n\n    def test_login(self):\n        response = self.client.post(self.login_url, {'username': self.username, 'password': self.password})\n        self.assertRedirects(response, self.dashboard_url, status_code=302, target_status_code=200)\n        self.assertTrue(authenticate(username=self.username, password=self.password))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_login.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n        self.client = Client()\n        self.login_url = reverse('login')\n        self.dashboard_url = reverse('view_courses')\n        self.username = 'testuser'\n        self.password = 'testpass123'\n        self.user = User.objects.create_user(self.username, password=self.password)", "func_code_string": "def setUp(self):\n        self.client = Client()\n        self.login_url = reverse('login')\n        self.dashboard_url = reverse('view_courses')\n        self.username = 'testuser'\n        self.password = 'testpass123'\n        self.user = User.objects.create_user(self.username, password=self.password)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_login.py", "func_name": "test_login", "whole_func_string": "def test_login(self):\n        response = self.client.post(self.login_url, {'username': self.username, 'password': self.password})\n        self.assertRedirects(response, self.dashboard_url, status_code=302, target_status_code=200)\n        self.assertTrue(authenticate(username=self.username, password=self.password))", "func_code_string": "def test_login(self):\n        response = self.client.post(self.login_url, {'username': self.username, 'password': self.password})\n        self.assertRedirects(response, self.dashboard_url, status_code=302, target_status_code=200)\n        self.assertTrue(authenticate(username=self.username, password=self.password))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_profile.py", "func_name": "ProfileViewTest", "whole_func_string": "class ProfileViewTest(TestCase):\n    def setUp(self):\n                                  \n        self.client = Client()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.client.login(username='testuser', password='testpassword')\n\n    def test_profile_view(self):\n                                                  \n        response = self.client.get(reverse('profile'))\n\n                                                          \n        self.assertEqual(response.status_code, 200)", "func_code_string": "class ProfileViewTest(TestCase):\n    def setUp(self):\n                                  \n        self.client = Client()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.client.login(username='testuser', password='testpassword')\n\n    def test_profile_view(self):\n                                                  \n        response = self.client.get(reverse('profile'))\n\n                                                          \n        self.assertEqual(response.status_code, 200)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_profile.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n                                  \n        self.client = Client()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.client.login(username='testuser', password='testpassword')", "func_code_string": "def setUp(self):\n                                  \n        self.client = Client()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.client.login(username='testuser', password='testpassword')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_profile.py", "func_name": "test_profile_view", "whole_func_string": "def test_profile_view(self):\n                                                  \n        response = self.client.get(reverse('profile'))\n\n                                                          \n        self.assertEqual(response.status_code, 200)", "func_code_string": "def test_profile_view(self):\n                                                  \n        response = self.client.get(reverse('profile'))\n\n                                                          \n        self.assertEqual(response.status_code, 200)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_logout.py", "func_name": "LogoutViewTest", "whole_func_string": "class LogoutViewTest(TestCase):\n    def setUp(self):\n                                  \n        self.client = Client()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.client.login(username='testuser', password='testpassword')\n\n    def test_logout_view(self):\n                                                 \n        response = self.client.get(reverse('logout'))\n\n                                                                \n        self.assertEqual(response.status_code, 302)\n\n                                                         \n        self.assertFalse(response.wsgi_request.user.is_authenticated)\n\n                                                                                 \n        self.assertRedirects(response, reverse('home'))", "func_code_string": "class LogoutViewTest(TestCase):\n    def setUp(self):\n                                  \n        self.client = Client()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.client.login(username='testuser', password='testpassword')\n\n    def test_logout_view(self):\n                                                 \n        response = self.client.get(reverse('logout'))\n\n                                                                \n        self.assertEqual(response.status_code, 302)\n\n                                                         \n        self.assertFalse(response.wsgi_request.user.is_authenticated)\n\n                                                                                 \n        self.assertRedirects(response, reverse('home'))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_logout.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n                                  \n        self.client = Client()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.client.login(username='testuser', password='testpassword')", "func_code_string": "def setUp(self):\n                                  \n        self.client = Client()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.client.login(username='testuser', password='testpassword')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_logout.py", "func_name": "test_logout_view", "whole_func_string": "def test_logout_view(self):\n                                                 \n        response = self.client.get(reverse('logout'))\n\n                                                                \n        self.assertEqual(response.status_code, 302)\n\n                                                         \n        self.assertFalse(response.wsgi_request.user.is_authenticated)\n\n                                                                                 \n        self.assertRedirects(response, reverse('home'))", "func_code_string": "def test_logout_view(self):\n                                                 \n        response = self.client.get(reverse('logout'))\n\n                                                                \n        self.assertEqual(response.status_code, 302)\n\n                                                         \n        self.assertFalse(response.wsgi_request.user.is_authenticated)\n\n                                                                                 \n        self.assertRedirects(response, reverse('home'))", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_course.py", "func_name": "CourseAcceptanceTestSuite", "whole_func_string": "class CourseAcceptanceTestSuite(TestCase):\n    def setUp(self):\n        self.instructor = User(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor.set_password('instructor')\n        self.instructor.role = Role.INSTRUCTOR\n        self.instructor.save()\n\n        self.ta = User(username='ta', email='ta@uwm.edu',\n                       first_name='Test', last_name='TA')\n        self.ta.set_password('ta')\n        self.ta.role = Role.TA\n        self.ta.save()\n\n        self.course_class = CourseClass('COURSE', '1', 'Course', self.instructor)\n        self.course_class.save_details()\n\n        self.invalid_class = CourseClass('INVALID', '1')\n\n    def test_save_details(self):\n                                                   \n        course = Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)\n        self.assertEqual(self.course_class.subject, course.subject)\n        self.assertEqual(self.course_class.number, course.number)\n        self.assertEqual(self.course_class.name, course.name)\n        self.assertEqual(self.course_class.instructor, course.instructor)\n\n    def test_save_details_duplicate(self):\n                                                                      \n        with self.assertRaises(IntegrityError):\n            self.course_class.save_details()\n\n    def test_delete(self):\n                                               \n        self.course_class.delete()\n        with self.assertRaises(Course.DoesNotExist):\n            Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)\n\n    def test_delete_nonexistent(self):\n                                                                       \n        self.course_class.delete()\n        with self.assertRaises(Course.DoesNotExist):\n            self.course_class.delete()\n\n    def test_set_subject(self):\n                                                \n        self.course_class.set_subject('TEST')\n        self.assertEqual(self.course_class.subject, 'TEST')\n        course = Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)\n        self.assertEqual(course.subject, 'TEST')\n\n    def test_set_subject_nonexistent(self):\n                                                                                     \n        with self.assertRaises(Course.DoesNotExist):\n            self.invalid_class.set_subject('Test')", "func_code_string": "class CourseAcceptanceTestSuite(TestCase):\n    def setUp(self):\n        self.instructor = User(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor.set_password('instructor')\n        self.instructor.role = Role.INSTRUCTOR\n        self.instructor.save()\n\n        self.ta = User(username='ta', email='ta@uwm.edu',\n                       first_name='Test', last_name='TA')\n        self.ta.set_password('ta')\n        self.ta.role = Role.TA\n        self.ta.save()\n\n        self.course_class = CourseClass('COURSE', '1', 'Course', self.instructor)\n        self.course_class.save_details()\n\n        self.invalid_class = CourseClass('INVALID', '1')\n\n    def test_save_details(self):\n                                                   \n        course = Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)\n        self.assertEqual(self.course_class.subject, course.subject)\n        self.assertEqual(self.course_class.number, course.number)\n        self.assertEqual(self.course_class.name, course.name)\n        self.assertEqual(self.course_class.instructor, course.instructor)\n\n    def test_save_details_duplicate(self):\n                                                                      \n        with self.assertRaises(IntegrityError):\n            self.course_class.save_details()\n\n    def test_delete(self):\n                                               \n        self.course_class.delete()\n        with self.assertRaises(Course.DoesNotExist):\n            Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)\n\n    def test_delete_nonexistent(self):\n                                                                       \n        self.course_class.delete()\n        with self.assertRaises(Course.DoesNotExist):\n            self.course_class.delete()\n\n    def test_set_subject(self):\n                                                \n        self.course_class.set_subject('TEST')\n        self.assertEqual(self.course_class.subject, 'TEST')\n        course = Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)\n        self.assertEqual(course.subject, 'TEST')\n\n    def test_set_subject_nonexistent(self):\n                                                                                     \n        with self.assertRaises(Course.DoesNotExist):\n            self.invalid_class.set_subject('Test')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_course.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n        self.instructor = User(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor.set_password('instructor')\n        self.instructor.role = Role.INSTRUCTOR\n        self.instructor.save()\n\n        self.ta = User(username='ta', email='ta@uwm.edu',\n                       first_name='Test', last_name='TA')\n        self.ta.set_password('ta')\n        self.ta.role = Role.TA\n        self.ta.save()\n\n        self.course_class = CourseClass('COURSE', '1', 'Course', self.instructor)\n        self.course_class.save_details()\n\n        self.invalid_class = CourseClass('INVALID', '1')", "func_code_string": "def setUp(self):\n        self.instructor = User(username='instructor', email='instructor@uwm.edu',\n                               first_name='Test', last_name='Instructor')\n        self.instructor.set_password('instructor')\n        self.instructor.role = Role.INSTRUCTOR\n        self.instructor.save()\n\n        self.ta = User(username='ta', email='ta@uwm.edu',\n                       first_name='Test', last_name='TA')\n        self.ta.set_password('ta')\n        self.ta.role = Role.TA\n        self.ta.save()\n\n        self.course_class = CourseClass('COURSE', '1', 'Course', self.instructor)\n        self.course_class.save_details()\n\n        self.invalid_class = CourseClass('INVALID', '1')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_course.py", "func_name": "test_save_details", "whole_func_string": "def test_save_details(self):\n                                                   \n        course = Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)\n        self.assertEqual(self.course_class.subject, course.subject)\n        self.assertEqual(self.course_class.number, course.number)\n        self.assertEqual(self.course_class.name, course.name)\n        self.assertEqual(self.course_class.instructor, course.instructor)", "func_code_string": "def test_save_details(self):\n                                                   \n        course = Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)\n        self.assertEqual(self.course_class.subject, course.subject)\n        self.assertEqual(self.course_class.number, course.number)\n        self.assertEqual(self.course_class.name, course.name)\n        self.assertEqual(self.course_class.instructor, course.instructor)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_course.py", "func_name": "test_save_details_duplicate", "whole_func_string": "def test_save_details_duplicate(self):\n                                                                      \n        with self.assertRaises(IntegrityError):\n            self.course_class.save_details()", "func_code_string": "def test_save_details_duplicate(self):\n                                                                      \n        with self.assertRaises(IntegrityError):\n            self.course_class.save_details()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_course.py", "func_name": "test_delete", "whole_func_string": "def test_delete(self):\n                                               \n        self.course_class.delete()\n        with self.assertRaises(Course.DoesNotExist):\n            Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)", "func_code_string": "def test_delete(self):\n                                               \n        self.course_class.delete()\n        with self.assertRaises(Course.DoesNotExist):\n            Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_course.py", "func_name": "test_delete_nonexistent", "whole_func_string": "def test_delete_nonexistent(self):\n                                                                       \n        self.course_class.delete()\n        with self.assertRaises(Course.DoesNotExist):\n            self.course_class.delete()", "func_code_string": "def test_delete_nonexistent(self):\n                                                                       \n        self.course_class.delete()\n        with self.assertRaises(Course.DoesNotExist):\n            self.course_class.delete()", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_course.py", "func_name": "test_set_subject", "whole_func_string": "def test_set_subject(self):\n                                                \n        self.course_class.set_subject('TEST')\n        self.assertEqual(self.course_class.subject, 'TEST')\n        course = Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)\n        self.assertEqual(course.subject, 'TEST')", "func_code_string": "def test_set_subject(self):\n                                                \n        self.course_class.set_subject('TEST')\n        self.assertEqual(self.course_class.subject, 'TEST')\n        course = Course.objects.get(subject=self.course_class.subject, number=self.course_class.number)\n        self.assertEqual(course.subject, 'TEST')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_course.py", "func_name": "test_set_subject_nonexistent", "whole_func_string": "def test_set_subject_nonexistent(self):\n                                                                                     \n        with self.assertRaises(Course.DoesNotExist):\n            self.invalid_class.set_subject('Test')", "func_code_string": "def test_set_subject_nonexistent(self):\n                                                                                     \n        with self.assertRaises(Course.DoesNotExist):\n            self.invalid_class.set_subject('Test')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_users.py", "func_name": "UsersAcceptanceTest", "whole_func_string": "class UsersAcceptanceTest(TestCase):\n    def setUp(self):\n                                          \n        self.user = User.objects.create_user(username='admin', password='password')\n        self.role = Role.SUPERVISOR                                   \n\n    def test_list_users(self):\n                                 \n        self.client.login(username='admin', password='password')\n\n                                  \n        user1 = User.objects.create(username='user1', email='user1@example.com', password='password1', role=self.role)\n        user2 = User.objects.create(username='user2', email='user2@example.com', password='password2', role=self.role)\n        user3 = User.objects.create(username='user3', email='user3@example.com', password='password3', role=self.role)\n\n                                    \n        response = self.client.get('/users/', follow=True)                    \n\n                                               \n        self.assertEqual(response.status_code, 200)\n\n                                                                     \n        self.assertContains(response, user1.username)\n        self.assertContains(response, user2.username)\n        self.assertContains(response, user3.username)", "func_code_string": "class UsersAcceptanceTest(TestCase):\n    def setUp(self):\n                                          \n        self.user = User.objects.create_user(username='admin', password='password')\n        self.role = Role.SUPERVISOR                                   \n\n    def test_list_users(self):\n                                 \n        self.client.login(username='admin', password='password')\n\n                                  \n        user1 = User.objects.create(username='user1', email='user1@example.com', password='password1', role=self.role)\n        user2 = User.objects.create(username='user2', email='user2@example.com', password='password2', role=self.role)\n        user3 = User.objects.create(username='user3', email='user3@example.com', password='password3', role=self.role)\n\n                                    \n        response = self.client.get('/users/', follow=True)                    \n\n                                               \n        self.assertEqual(response.status_code, 200)\n\n                                                                     \n        self.assertContains(response, user1.username)\n        self.assertContains(response, user2.username)\n        self.assertContains(response, user3.username)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_users.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n                                          \n        self.user = User.objects.create_user(username='admin', password='password')\n        self.role = Role.SUPERVISOR", "func_code_string": "def setUp(self):\n                                          \n        self.user = User.objects.create_user(username='admin', password='password')\n        self.role = Role.SUPERVISOR", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_users.py", "func_name": "test_list_users", "whole_func_string": "def test_list_users(self):\n                                 \n        self.client.login(username='admin', password='password')\n\n                                  \n        user1 = User.objects.create(username='user1', email='user1@example.com', password='password1', role=self.role)\n        user2 = User.objects.create(username='user2', email='user2@example.com', password='password2', role=self.role)\n        user3 = User.objects.create(username='user3', email='user3@example.com', password='password3', role=self.role)\n\n                                    \n        response = self.client.get('/users/', follow=True)                    \n\n                                               \n        self.assertEqual(response.status_code, 200)\n\n                                                                     \n        self.assertContains(response, user1.username)\n        self.assertContains(response, user2.username)\n        self.assertContains(response, user3.username)", "func_code_string": "def test_list_users(self):\n                                 \n        self.client.login(username='admin', password='password')\n\n                                  \n        user1 = User.objects.create(username='user1', email='user1@example.com', password='password1', role=self.role)\n        user2 = User.objects.create(username='user2', email='user2@example.com', password='password2', role=self.role)\n        user3 = User.objects.create(username='user3', email='user3@example.com', password='password3', role=self.role)\n\n                                    \n        response = self.client.get('/users/', follow=True)                    \n\n                                               \n        self.assertEqual(response.status_code, 200)\n\n                                                                     \n        self.assertContains(response, user1.username)\n        self.assertContains(response, user2.username)\n        self.assertContains(response, user3.username)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_course.py", "func_name": "CreateCourseAcceptanceTest", "whole_func_string": "class CreateCourseAcceptanceTest(TestCase):\n    def test_create_course(self):\n                                   \n        subject = 'COURSE1'\n        number = '101'\n        name = 'Course 1'\n\n                           \n        course = Course(subject=subject, number=number, name=name)\n        course.save()\n\n                                                       \n        created_course = Course.objects.get(subject=subject, number=number)\n\n                                                                \n        self.assertEqual(created_course.subject, subject)\n        self.assertEqual(created_course.number, number)\n        self.assertEqual(created_course.name, name)", "func_code_string": "class CreateCourseAcceptanceTest(TestCase):\n    def test_create_course(self):\n                                   \n        subject = 'COURSE1'\n        number = '101'\n        name = 'Course 1'\n\n                           \n        course = Course(subject=subject, number=number, name=name)\n        course.save()\n\n                                                       \n        created_course = Course.objects.get(subject=subject, number=number)\n\n                                                                \n        self.assertEqual(created_course.subject, subject)\n        self.assertEqual(created_course.number, number)\n        self.assertEqual(created_course.name, name)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_create_course.py", "func_name": "test_create_course", "whole_func_string": "def test_create_course(self):\n                                   \n        subject = 'COURSE1'\n        number = '101'\n        name = 'Course 1'\n\n                           \n        course = Course(subject=subject, number=number, name=name)\n        course.save()\n\n                                                       \n        created_course = Course.objects.get(subject=subject, number=number)\n\n                                                                \n        self.assertEqual(created_course.subject, subject)\n        self.assertEqual(created_course.number, number)\n        self.assertEqual(created_course.name, name)", "func_code_string": "def test_create_course(self):\n                                   \n        subject = 'COURSE1'\n        number = '101'\n        name = 'Course 1'\n\n                           \n        course = Course(subject=subject, number=number, name=name)\n        course.save()\n\n                                                       \n        created_course = Course.objects.get(subject=subject, number=number)\n\n                                                                \n        self.assertEqual(created_course.subject, subject)\n        self.assertEqual(created_course.number, number)\n        self.assertEqual(created_course.name, name)", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_courses.py", "func_name": "CoursesAcceptanceTestSuite", "whole_func_string": "class CoursesAcceptanceTestSuite(TestCase):\n    def setUp(self):\n                                           \n        Course.objects.create(subject='COURSE1', number='101', name='Course 1')\n        Course.objects.create(subject='COURSE2', number='201', name='Course 2')\n        Course.objects.create(subject='COURSE3', number='301', name='Course 3')\n\n    def test_get_course_by_subject_and_number(self):\n                                                    \n        course = Course.objects.get(subject='COURSE1', number='101')\n\n                                                                 \n        self.assertEqual(course.subject, 'COURSE1')\n        self.assertEqual(course.number, '101')\n        self.assertEqual(course.name, 'Course 1')\n\n    def test_get_all_courses(self):\n                                                \n        courses = Course.objects.all()\n\n                                                                           \n        self.assertEqual(courses.count(), 3)\n\n                                                                          \n        self.assertEqual(courses[0].subject, 'COURSE1')\n        self.assertEqual(courses[0].number, '101')\n        self.assertEqual(courses[1].subject, 'COURSE2')\n        self.assertEqual(courses[1].number, '201')\n        self.assertEqual(courses[2].subject, 'COURSE3')\n        self.assertEqual(courses[2].number, '301')", "func_code_string": "class CoursesAcceptanceTestSuite(TestCase):\n    def setUp(self):\n                                           \n        Course.objects.create(subject='COURSE1', number='101', name='Course 1')\n        Course.objects.create(subject='COURSE2', number='201', name='Course 2')\n        Course.objects.create(subject='COURSE3', number='301', name='Course 3')\n\n    def test_get_course_by_subject_and_number(self):\n                                                    \n        course = Course.objects.get(subject='COURSE1', number='101')\n\n                                                                 \n        self.assertEqual(course.subject, 'COURSE1')\n        self.assertEqual(course.number, '101')\n        self.assertEqual(course.name, 'Course 1')\n\n    def test_get_all_courses(self):\n                                                \n        courses = Course.objects.all()\n\n                                                                           \n        self.assertEqual(courses.count(), 3)\n\n                                                                          \n        self.assertEqual(courses[0].subject, 'COURSE1')\n        self.assertEqual(courses[0].number, '101')\n        self.assertEqual(courses[1].subject, 'COURSE2')\n        self.assertEqual(courses[1].number, '201')\n        self.assertEqual(courses[2].subject, 'COURSE3')\n        self.assertEqual(courses[2].number, '301')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_courses.py", "func_name": "setUp", "whole_func_string": "def setUp(self):\n                                           \n        Course.objects.create(subject='COURSE1', number='101', name='Course 1')\n        Course.objects.create(subject='COURSE2', number='201', name='Course 2')\n        Course.objects.create(subject='COURSE3', number='301', name='Course 3')", "func_code_string": "def setUp(self):\n                                           \n        Course.objects.create(subject='COURSE1', number='101', name='Course 1')\n        Course.objects.create(subject='COURSE2', number='201', name='Course 2')\n        Course.objects.create(subject='COURSE3', number='301', name='Course 3')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_courses.py", "func_name": "test_get_course_by_subject_and_number", "whole_func_string": "def test_get_course_by_subject_and_number(self):\n                                                    \n        course = Course.objects.get(subject='COURSE1', number='101')\n\n                                                                 \n        self.assertEqual(course.subject, 'COURSE1')\n        self.assertEqual(course.number, '101')\n        self.assertEqual(course.name, 'Course 1')", "func_code_string": "def test_get_course_by_subject_and_number(self):\n                                                    \n        course = Course.objects.get(subject='COURSE1', number='101')\n\n                                                                 \n        self.assertEqual(course.subject, 'COURSE1')\n        self.assertEqual(course.number, '101')\n        self.assertEqual(course.name, 'Course 1')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
{"repository_name": "Project_891", "func_path_in_repository": "acceptance_tests/test_courses.py", "func_name": "test_get_all_courses", "whole_func_string": "def test_get_all_courses(self):\n                                                \n        courses = Course.objects.all()\n\n                                                                           \n        self.assertEqual(courses.count(), 3)\n\n                                                                          \n        self.assertEqual(courses[0].subject, 'COURSE1')\n        self.assertEqual(courses[0].number, '101')\n        self.assertEqual(courses[1].subject, 'COURSE2')\n        self.assertEqual(courses[1].number, '201')\n        self.assertEqual(courses[2].subject, 'COURSE3')\n        self.assertEqual(courses[2].number, '301')", "func_code_string": "def test_get_all_courses(self):\n                                                \n        courses = Course.objects.all()\n\n                                                                           \n        self.assertEqual(courses.count(), 3)\n\n                                                                          \n        self.assertEqual(courses[0].subject, 'COURSE1')\n        self.assertEqual(courses[0].number, '101')\n        self.assertEqual(courses[1].subject, 'COURSE2')\n        self.assertEqual(courses[1].number, '201')\n        self.assertEqual(courses[2].subject, 'COURSE3')\n        self.assertEqual(courses[2].number, '301')", "func_documentation_string": "", "func_code_url": "", "language": "python", "split_name": "train", "func_code_tokens": [], "func_documentation_tokens": [], "llm_used": ""}
